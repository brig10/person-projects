
PET Filament Maker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029f0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08002afc  08002afc  00012afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c78  08002c78  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  08002c78  08002c78  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c78  08002c78  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c78  08002c78  00012c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c7c  08002c7c  00012c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08002c80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  200000a0  08002d20  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08002d20  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000054b3  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000142e  00000000  00000000  0002557c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000620  00000000  00000000  000269b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000568  00000000  00000000  00026fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017032  00000000  00000000  00027538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000070e5  00000000  00000000  0003e56a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081c30  00000000  00000000  0004564f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c727f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b60  00000000  00000000  000c72d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a0 	.word	0x200000a0
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ae4 	.word	0x08002ae4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a4 	.word	0x200000a4
 8000148:	08002ae4 	.word	0x08002ae4

0800014c <lcd_send_cmd>:

GPIO_TypeDef * alpha[] = {GPIOA, GPIOA, GPIOA, GPIOB, GPIOA, GPIOA, GPIOA, GPIOB};
uint16_t pin[] = {D7_Pin, D6_Pin, D5_Pin, D4_Pin, D3_Pin, D2_Pin, D1_Pin, D0_Pin};

void lcd_send_cmd(char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08c      	sub	sp, #48	; 0x30
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	int data[8];
	data[0] = cmd&0x80;
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800015c:	60fb      	str	r3, [r7, #12]
	data[1] = cmd&0x40;
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000164:	613b      	str	r3, [r7, #16]
	data[2] = cmd&0x20;
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	f003 0320 	and.w	r3, r3, #32
 800016c:	617b      	str	r3, [r7, #20]
	data[3] = cmd&0x10;
 800016e:	79fb      	ldrb	r3, [r7, #7]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	61bb      	str	r3, [r7, #24]
	data[4] = cmd&0x08;
 8000176:	79fb      	ldrb	r3, [r7, #7]
 8000178:	f003 0308 	and.w	r3, r3, #8
 800017c:	61fb      	str	r3, [r7, #28]
	data[5] = cmd&0x04;
 800017e:	79fb      	ldrb	r3, [r7, #7]
 8000180:	f003 0304 	and.w	r3, r3, #4
 8000184:	623b      	str	r3, [r7, #32]
	data[6] = cmd&0x02;
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	f003 0302 	and.w	r3, r3, #2
 800018c:	627b      	str	r3, [r7, #36]	; 0x24
	data[7] = cmd&0x01;
 800018e:	79fb      	ldrb	r3, [r7, #7]
 8000190:	f003 0301 	and.w	r3, r3, #1
 8000194:	62bb      	str	r3, [r7, #40]	; 0x28

	HAL_GPIO_WritePin(GPIOB, RS_Pin, GPIO_PIN_RESET);
 8000196:	2200      	movs	r2, #0
 8000198:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800019c:	4822      	ldr	r0, [pc, #136]	; (8000228 <lcd_send_cmd+0xdc>)
 800019e:	f000 ff3f 	bl	8001020 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, R_W_Pin, GPIO_PIN_RESET);
 80001a2:	2200      	movs	r2, #0
 80001a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001a8:	481f      	ldr	r0, [pc, #124]	; (8000228 <lcd_send_cmd+0xdc>)
 80001aa:	f000 ff39 	bl	8001020 <HAL_GPIO_WritePin>

	for (int i=0; i<8; i++)
 80001ae:	2300      	movs	r3, #0
 80001b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80001b2:	e023      	b.n	80001fc <lcd_send_cmd+0xb0>
	{
		if (data[i] == 0) HAL_GPIO_WritePin(alpha[i], pin[i], GPIO_PIN_RESET);
 80001b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80001b6:	009b      	lsls	r3, r3, #2
 80001b8:	3330      	adds	r3, #48	; 0x30
 80001ba:	443b      	add	r3, r7
 80001bc:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d10c      	bne.n	80001de <lcd_send_cmd+0x92>
 80001c4:	4a19      	ldr	r2, [pc, #100]	; (800022c <lcd_send_cmd+0xe0>)
 80001c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80001c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80001cc:	4a18      	ldr	r2, [pc, #96]	; (8000230 <lcd_send_cmd+0xe4>)
 80001ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80001d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001d4:	2200      	movs	r2, #0
 80001d6:	4619      	mov	r1, r3
 80001d8:	f000 ff22 	bl	8001020 <HAL_GPIO_WritePin>
 80001dc:	e00b      	b.n	80001f6 <lcd_send_cmd+0xaa>
		else HAL_GPIO_WritePin(alpha[i], pin[i], GPIO_PIN_SET);
 80001de:	4a13      	ldr	r2, [pc, #76]	; (800022c <lcd_send_cmd+0xe0>)
 80001e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80001e2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80001e6:	4a12      	ldr	r2, [pc, #72]	; (8000230 <lcd_send_cmd+0xe4>)
 80001e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80001ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001ee:	2201      	movs	r2, #1
 80001f0:	4619      	mov	r1, r3
 80001f2:	f000 ff15 	bl	8001020 <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++)
 80001f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80001f8:	3301      	adds	r3, #1
 80001fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80001fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80001fe:	2b07      	cmp	r3, #7
 8000200:	ddd8      	ble.n	80001b4 <lcd_send_cmd+0x68>
	}

	HAL_GPIO_WritePin(GPIOB, E_Pin, GPIO_PIN_SET);
 8000202:	2201      	movs	r2, #1
 8000204:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000208:	4807      	ldr	r0, [pc, #28]	; (8000228 <lcd_send_cmd+0xdc>)
 800020a:	f000 ff09 	bl	8001020 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 800020e:	2001      	movs	r0, #1
 8000210:	f000 fc50 	bl	8000ab4 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, E_Pin, GPIO_PIN_RESET);
 8000214:	2200      	movs	r2, #0
 8000216:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800021a:	4803      	ldr	r0, [pc, #12]	; (8000228 <lcd_send_cmd+0xdc>)
 800021c:	f000 ff00 	bl	8001020 <HAL_GPIO_WritePin>
}
 8000220:	bf00      	nop
 8000222:	3730      	adds	r7, #48	; 0x30
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	40010c00 	.word	0x40010c00
 800022c:	20000000 	.word	0x20000000
 8000230:	20000020 	.word	0x20000020

08000234 <lcd_send_char>:

void lcd_send_char(char cmd)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b08c      	sub	sp, #48	; 0x30
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	71fb      	strb	r3, [r7, #7]
	int data[8];
	data[0] = cmd&0x80;
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000244:	60fb      	str	r3, [r7, #12]
	data[1] = cmd&0x40;
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024c:	613b      	str	r3, [r7, #16]
	data[2] = cmd&0x20;
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	f003 0320 	and.w	r3, r3, #32
 8000254:	617b      	str	r3, [r7, #20]
	data[3] = cmd&0x10;
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	f003 0310 	and.w	r3, r3, #16
 800025c:	61bb      	str	r3, [r7, #24]
	data[4] = cmd&0x08;
 800025e:	79fb      	ldrb	r3, [r7, #7]
 8000260:	f003 0308 	and.w	r3, r3, #8
 8000264:	61fb      	str	r3, [r7, #28]
	data[5] = cmd&0x04;
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	f003 0304 	and.w	r3, r3, #4
 800026c:	623b      	str	r3, [r7, #32]
	data[6] = cmd&0x02;
 800026e:	79fb      	ldrb	r3, [r7, #7]
 8000270:	f003 0302 	and.w	r3, r3, #2
 8000274:	627b      	str	r3, [r7, #36]	; 0x24
	data[7] = cmd&0x01;
 8000276:	79fb      	ldrb	r3, [r7, #7]
 8000278:	f003 0301 	and.w	r3, r3, #1
 800027c:	62bb      	str	r3, [r7, #40]	; 0x28

	HAL_GPIO_WritePin(GPIOB, RS_Pin, GPIO_PIN_SET);
 800027e:	2201      	movs	r2, #1
 8000280:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000284:	4822      	ldr	r0, [pc, #136]	; (8000310 <lcd_send_char+0xdc>)
 8000286:	f000 fecb 	bl	8001020 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, R_W_Pin, GPIO_PIN_RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000290:	481f      	ldr	r0, [pc, #124]	; (8000310 <lcd_send_char+0xdc>)
 8000292:	f000 fec5 	bl	8001020 <HAL_GPIO_WritePin>

	for (int i=0; i<8; i++)
 8000296:	2300      	movs	r3, #0
 8000298:	62fb      	str	r3, [r7, #44]	; 0x2c
 800029a:	e023      	b.n	80002e4 <lcd_send_char+0xb0>
	{
		if (data[i] == 0) HAL_GPIO_WritePin(alpha[i], pin[i], GPIO_PIN_RESET);
 800029c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800029e:	009b      	lsls	r3, r3, #2
 80002a0:	3330      	adds	r3, #48	; 0x30
 80002a2:	443b      	add	r3, r7
 80002a4:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d10c      	bne.n	80002c6 <lcd_send_char+0x92>
 80002ac:	4a19      	ldr	r2, [pc, #100]	; (8000314 <lcd_send_char+0xe0>)
 80002ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80002b4:	4a18      	ldr	r2, [pc, #96]	; (8000318 <lcd_send_char+0xe4>)
 80002b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002bc:	2200      	movs	r2, #0
 80002be:	4619      	mov	r1, r3
 80002c0:	f000 feae 	bl	8001020 <HAL_GPIO_WritePin>
 80002c4:	e00b      	b.n	80002de <lcd_send_char+0xaa>
		else HAL_GPIO_WritePin(alpha[i], pin[i], GPIO_PIN_SET);
 80002c6:	4a13      	ldr	r2, [pc, #76]	; (8000314 <lcd_send_char+0xe0>)
 80002c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002ca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80002ce:	4a12      	ldr	r2, [pc, #72]	; (8000318 <lcd_send_char+0xe4>)
 80002d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002d6:	2201      	movs	r2, #1
 80002d8:	4619      	mov	r1, r3
 80002da:	f000 fea1 	bl	8001020 <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++)
 80002de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002e0:	3301      	adds	r3, #1
 80002e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80002e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002e6:	2b07      	cmp	r3, #7
 80002e8:	ddd8      	ble.n	800029c <lcd_send_char+0x68>
	}

	HAL_GPIO_WritePin(GPIOB, E_Pin, GPIO_PIN_SET);
 80002ea:	2201      	movs	r2, #1
 80002ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002f0:	4807      	ldr	r0, [pc, #28]	; (8000310 <lcd_send_char+0xdc>)
 80002f2:	f000 fe95 	bl	8001020 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 80002f6:	2001      	movs	r0, #1
 80002f8:	f000 fbdc 	bl	8000ab4 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, E_Pin, GPIO_PIN_RESET);
 80002fc:	2200      	movs	r2, #0
 80002fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000302:	4803      	ldr	r0, [pc, #12]	; (8000310 <lcd_send_char+0xdc>)
 8000304:	f000 fe8c 	bl	8001020 <HAL_GPIO_WritePin>
}
 8000308:	bf00      	nop
 800030a:	3730      	adds	r7, #48	; 0x30
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	40010c00 	.word	0x40010c00
 8000314:	20000000 	.word	0x20000000
 8000318:	20000020 	.word	0x20000020

0800031c <lcd_send_string>:

void lcd_send_string(char *str)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_char(*str++);
 8000324:	e006      	b.n	8000334 <lcd_send_string+0x18>
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	1c5a      	adds	r2, r3, #1
 800032a:	607a      	str	r2, [r7, #4]
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	4618      	mov	r0, r3
 8000330:	f7ff ff80 	bl	8000234 <lcd_send_char>
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d1f4      	bne.n	8000326 <lcd_send_string+0xa>
}
 800033c:	bf00      	nop
 800033e:	bf00      	nop
 8000340:	3708      	adds	r7, #8
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}

08000346 <lcd_clear>:

void lcd_clear()
{
 8000346:	b580      	push	{r7, lr}
 8000348:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 800034a:	2001      	movs	r0, #1
 800034c:	f7ff fefe 	bl	800014c <lcd_send_cmd>
	lcd_send_cmd(0x80);
 8000350:	2080      	movs	r0, #128	; 0x80
 8000352:	f7ff fefb 	bl	800014c <lcd_send_cmd>
}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}

0800035a <lcd_init>:

void lcd_init()
{
 800035a:	b580      	push	{r7, lr}
 800035c:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 800035e:	2032      	movs	r0, #50	; 0x32
 8000360:	f000 fba8 	bl	8000ab4 <HAL_Delay>
	lcd_send_cmd(0x30);
 8000364:	2030      	movs	r0, #48	; 0x30
 8000366:	f7ff fef1 	bl	800014c <lcd_send_cmd>
	HAL_Delay(5);
 800036a:	2005      	movs	r0, #5
 800036c:	f000 fba2 	bl	8000ab4 <HAL_Delay>
	lcd_send_cmd(0x30);
 8000370:	2030      	movs	r0, #48	; 0x30
 8000372:	f7ff feeb 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 8000376:	2001      	movs	r0, #1
 8000378:	f000 fb9c 	bl	8000ab4 <HAL_Delay>
	lcd_send_cmd(0x30);
 800037c:	2030      	movs	r0, #48	; 0x30
 800037e:	f7ff fee5 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 8000382:	200a      	movs	r0, #10
 8000384:	f000 fb96 	bl	8000ab4 <HAL_Delay>
	lcd_send_cmd(0x38);
 8000388:	2038      	movs	r0, #56	; 0x38
 800038a:	f7ff fedf 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 800038e:	200a      	movs	r0, #10
 8000390:	f000 fb90 	bl	8000ab4 <HAL_Delay>
	lcd_send_cmd(0x08);
 8000394:	2008      	movs	r0, #8
 8000396:	f7ff fed9 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 800039a:	200a      	movs	r0, #10
 800039c:	f000 fb8a 	bl	8000ab4 <HAL_Delay>
	lcd_send_cmd(0x01);
 80003a0:	2001      	movs	r0, #1
 80003a2:	f7ff fed3 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 80003a6:	200a      	movs	r0, #10
 80003a8:	f000 fb84 	bl	8000ab4 <HAL_Delay>
	lcd_send_cmd(0x01);
 80003ac:	2001      	movs	r0, #1
 80003ae:	f7ff fecd 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 80003b2:	200a      	movs	r0, #10
 80003b4:	f000 fb7e 	bl	8000ab4 <HAL_Delay>
	lcd_send_cmd(0x06);
 80003b8:	2006      	movs	r0, #6
 80003ba:	f7ff fec7 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 80003be:	200a      	movs	r0, #10
 80003c0:	f000 fb78 	bl	8000ab4 <HAL_Delay>
	lcd_send_cmd(0x0C);
 80003c4:	200c      	movs	r0, #12
 80003c6:	f7ff fec1 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 80003ca:	200a      	movs	r0, #10
 80003cc:	f000 fb72 	bl	8000ab4 <HAL_Delay>
}
 80003d0:	bf00      	nop
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b094      	sub	sp, #80	; 0x50
 80003d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t buf[20];
	GPIO_PinState toggle;
	uint16_t set = 850;
 80003da:	f240 3352 	movw	r3, #850	; 0x352
 80003de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	uint16_t top = 870;
 80003e2:	f240 3366 	movw	r3, #870	; 0x366
 80003e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	uint16_t bot = 800;
 80003ea:	f44f 7348 	mov.w	r3, #800	; 0x320
 80003ee:	87fb      	strh	r3, [r7, #62]	; 0x3e
	int rise = 1;
 80003f0:	2301      	movs	r3, #1
 80003f2:	64bb      	str	r3, [r7, #72]	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f4:	f000 fafc 	bl	80009f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f8:	f000 f8d4 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003fc:	f000 f950 	bl	80006a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000400:	f000 f916 	bl	8000630 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  lcd_init();
 8000404:	f7ff ffa9 	bl	800035a <lcd_init>
  HAL_SPI_Init(&hspi1);
 8000408:	4860      	ldr	r0, [pc, #384]	; (800058c <main+0x1b8>)
 800040a:	f001 fa09 	bl	8001820 <HAL_SPI_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800040e:	2201      	movs	r2, #1
 8000410:	2110      	movs	r1, #16
 8000412:	485f      	ldr	r0, [pc, #380]	; (8000590 <main+0x1bc>)
 8000414:	f000 fe04 	bl	8001020 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	2180      	movs	r1, #128	; 0x80
 800041c:	485d      	ldr	r0, [pc, #372]	; (8000594 <main+0x1c0>)
 800041e:	f000 fdff 	bl	8001020 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000422:	2200      	movs	r2, #0
 8000424:	2140      	movs	r1, #64	; 0x40
 8000426:	485b      	ldr	r0, [pc, #364]	; (8000594 <main+0x1c0>)
 8000428:	f000 fdfa 	bl	8001020 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 800042c:	2032      	movs	r0, #50	; 0x32
 800042e:	f000 fb41 	bl	8000ab4 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Receive Data From Sensor
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000432:	2200      	movs	r2, #0
 8000434:	2110      	movs	r1, #16
 8000436:	4856      	ldr	r0, [pc, #344]	; (8000590 <main+0x1bc>)
 8000438:	f000 fdf2 	bl	8001020 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, buf, 2, 100);
 800043c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000440:	2364      	movs	r3, #100	; 0x64
 8000442:	2202      	movs	r2, #2
 8000444:	4851      	ldr	r0, [pc, #324]	; (800058c <main+0x1b8>)
 8000446:	f001 fa6f 	bl	8001928 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800044a:	2201      	movs	r2, #1
 800044c:	2110      	movs	r1, #16
 800044e:	4850      	ldr	r0, [pc, #320]	; (8000590 <main+0x1bc>)
 8000450:	f000 fde6 	bl	8001020 <HAL_GPIO_WritePin>
	  //HAL_Delay(10);

	  //Convert Data to Sensor Reading
	  sprintf(data, "%02x%02x", buf[1], buf[0]);
 8000454:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000458:	461a      	mov	r2, r3
 800045a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800045e:	f107 0014 	add.w	r0, r7, #20
 8000462:	494d      	ldr	r1, [pc, #308]	; (8000598 <main+0x1c4>)
 8000464:	f001 fe3e 	bl	80020e4 <siprintf>
	  val = (uint16_t)strtol(data, NULL, 16);
 8000468:	f107 0314 	add.w	r3, r7, #20
 800046c:	2210      	movs	r2, #16
 800046e:	2100      	movs	r1, #0
 8000470:	4618      	mov	r0, r3
 8000472:	f001 fed3 	bl	800221c <strtol>
 8000476:	4603      	mov	r3, r0
 8000478:	87bb      	strh	r3, [r7, #60]	; 0x3c
	  val = val<<1;
 800047a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800047c:	005b      	lsls	r3, r3, #1
 800047e:	87bb      	strh	r3, [r7, #60]	; 0x3c
	  val = val>>4;
 8000480:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000482:	091b      	lsrs	r3, r3, #4
 8000484:	87bb      	strh	r3, [r7, #60]	; 0x3c

	  //Compare Reading and Toggle Power
	  if (rise) {
 8000486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000488:	2b00      	cmp	r3, #0
 800048a:	d012      	beq.n	80004b2 <main+0xde>
		  toggle = (val < bot) ? 0 : 1;
 800048c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800048e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000490:	429a      	cmp	r2, r3
 8000492:	bf2c      	ite	cs
 8000494:	2301      	movcs	r3, #1
 8000496:	2300      	movcc	r3, #0
 8000498:	b2db      	uxtb	r3, r3
 800049a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  rise = (val < top) ? 1 : 0;
 800049e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80004a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80004a4:	429a      	cmp	r2, r3
 80004a6:	bf34      	ite	cc
 80004a8:	2301      	movcc	r3, #1
 80004aa:	2300      	movcs	r3, #0
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80004b0:	e011      	b.n	80004d6 <main+0x102>
	  }
	  else {
		  toggle = (val < set) ? 0 : 1;
 80004b2:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80004b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80004b8:	429a      	cmp	r2, r3
 80004ba:	bf2c      	ite	cs
 80004bc:	2301      	movcs	r3, #1
 80004be:	2300      	movcc	r3, #0
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  rise = (val > bot) ? 0 : 1;
 80004c6:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80004c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80004ca:	429a      	cmp	r2, r3
 80004cc:	bf94      	ite	ls
 80004ce:	2301      	movls	r3, #1
 80004d0:	2300      	movhi	r3, #0
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	64bb      	str	r3, [r7, #72]	; 0x48
	  }
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, toggle);
 80004d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80004da:	461a      	mov	r2, r3
 80004dc:	2180      	movs	r1, #128	; 0x80
 80004de:	482d      	ldr	r0, [pc, #180]	; (8000594 <main+0x1c0>)
 80004e0:	f000 fd9e 	bl	8001020 <HAL_GPIO_WritePin>

	  //Display Set and Current Values
	  lcd_clear();
 80004e4:	f7ff ff2f 	bl	8000346 <lcd_clear>
	  sprintf(prnt, "Current:  %d", val);
 80004e8:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80004ea:	463b      	mov	r3, r7
 80004ec:	492b      	ldr	r1, [pc, #172]	; (800059c <main+0x1c8>)
 80004ee:	4618      	mov	r0, r3
 80004f0:	f001 fdf8 	bl	80020e4 <siprintf>
	  lcd_send_string(prnt);
 80004f4:	463b      	mov	r3, r7
 80004f6:	4618      	mov	r0, r3
 80004f8:	f7ff ff10 	bl	800031c <lcd_send_string>
	  lcd_send_cmd(0xC0);
 80004fc:	20c0      	movs	r0, #192	; 0xc0
 80004fe:	f7ff fe25 	bl	800014c <lcd_send_cmd>
	  sprintf(prnt, "Set:    %d", set);
 8000502:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8000506:	463b      	mov	r3, r7
 8000508:	4925      	ldr	r1, [pc, #148]	; (80005a0 <main+0x1cc>)
 800050a:	4618      	mov	r0, r3
 800050c:	f001 fdea 	bl	80020e4 <siprintf>
	  lcd_send_string(prnt);
 8000510:	463b      	mov	r3, r7
 8000512:	4618      	mov	r0, r3
 8000514:	f7ff ff02 	bl	800031c <lcd_send_string>

	  //Step Motor
	  for (int i=0; i<50; i++)
 8000518:	2300      	movs	r3, #0
 800051a:	647b      	str	r3, [r7, #68]	; 0x44
 800051c:	e02f      	b.n	800057e <main+0x1aa>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800051e:	2201      	movs	r2, #1
 8000520:	2120      	movs	r1, #32
 8000522:	481c      	ldr	r0, [pc, #112]	; (8000594 <main+0x1c0>)
 8000524:	f000 fd7c 	bl	8001020 <HAL_GPIO_WritePin>
		  HAL_Delay(1);
 8000528:	2001      	movs	r0, #1
 800052a:	f000 fac3 	bl	8000ab4 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800052e:	2201      	movs	r2, #1
 8000530:	2140      	movs	r1, #64	; 0x40
 8000532:	4818      	ldr	r0, [pc, #96]	; (8000594 <main+0x1c0>)
 8000534:	f000 fd74 	bl	8001020 <HAL_GPIO_WritePin>
		  HAL_Delay(1);
 8000538:	2001      	movs	r0, #1
 800053a:	f000 fabb 	bl	8000ab4 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	2120      	movs	r1, #32
 8000542:	4814      	ldr	r0, [pc, #80]	; (8000594 <main+0x1c0>)
 8000544:	f000 fd6c 	bl	8001020 <HAL_GPIO_WritePin>
		  HAL_Delay(4);
 8000548:	2004      	movs	r0, #4
 800054a:	f000 fab3 	bl	8000ab4 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	2140      	movs	r1, #64	; 0x40
 8000552:	4810      	ldr	r0, [pc, #64]	; (8000594 <main+0x1c0>)
 8000554:	f000 fd64 	bl	8001020 <HAL_GPIO_WritePin>
		  HAL_Delay(5);
 8000558:	2005      	movs	r0, #5
 800055a:	f000 faab 	bl	8000ab4 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800055e:	2201      	movs	r2, #1
 8000560:	2140      	movs	r1, #64	; 0x40
 8000562:	480c      	ldr	r0, [pc, #48]	; (8000594 <main+0x1c0>)
 8000564:	f000 fd5c 	bl	8001020 <HAL_GPIO_WritePin>
		  HAL_Delay(1);
 8000568:	2001      	movs	r0, #1
 800056a:	f000 faa3 	bl	8000ab4 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800056e:	2200      	movs	r2, #0
 8000570:	2140      	movs	r1, #64	; 0x40
 8000572:	4808      	ldr	r0, [pc, #32]	; (8000594 <main+0x1c0>)
 8000574:	f000 fd54 	bl	8001020 <HAL_GPIO_WritePin>
	  for (int i=0; i<50; i++)
 8000578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800057a:	3301      	adds	r3, #1
 800057c:	647b      	str	r3, [r7, #68]	; 0x44
 800057e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000580:	2b31      	cmp	r3, #49	; 0x31
 8000582:	ddcc      	ble.n	800051e <main+0x14a>
	  }
	  HAL_Delay(200);
 8000584:	20c8      	movs	r0, #200	; 0xc8
 8000586:	f000 fa95 	bl	8000ab4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800058a:	e752      	b.n	8000432 <main+0x5e>
 800058c:	200000bc 	.word	0x200000bc
 8000590:	40010800 	.word	0x40010800
 8000594:	40010c00 	.word	0x40010c00
 8000598:	08002afc 	.word	0x08002afc
 800059c:	08002b08 	.word	0x08002b08
 80005a0:	08002b18 	.word	0x08002b18

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b090      	sub	sp, #64	; 0x40
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0318 	add.w	r3, r7, #24
 80005ae:	2228      	movs	r2, #40	; 0x28
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f001 fd8e 	bl	80020d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c6:	2301      	movs	r3, #1
 80005c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80005d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d6:	2301      	movs	r3, #1
 80005d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005da:	2302      	movs	r3, #2
 80005dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 80005e4:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 80005e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ea:	f107 0318 	add.w	r3, r7, #24
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 fd2e 	bl	8001050 <HAL_RCC_OscConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80005fa:	f000 f8d7 	bl	80007ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	230f      	movs	r3, #15
 8000600:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000602:	2302      	movs	r3, #2
 8000604:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800060a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800060e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2102      	movs	r1, #2
 8000618:	4618      	mov	r0, r3
 800061a:	f000 ff9b 	bl	8001554 <HAL_RCC_ClockConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000624:	f000 f8c2 	bl	80007ac <Error_Handler>
  }
}
 8000628:	bf00      	nop
 800062a:	3740      	adds	r7, #64	; 0x40
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000634:	4b18      	ldr	r3, [pc, #96]	; (8000698 <MX_SPI1_Init+0x68>)
 8000636:	4a19      	ldr	r2, [pc, #100]	; (800069c <MX_SPI1_Init+0x6c>)
 8000638:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800063a:	4b17      	ldr	r3, [pc, #92]	; (8000698 <MX_SPI1_Init+0x68>)
 800063c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000640:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <MX_SPI1_Init+0x68>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000648:	4b13      	ldr	r3, [pc, #76]	; (8000698 <MX_SPI1_Init+0x68>)
 800064a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800064e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_SPI1_Init+0x68>)
 8000652:	2202      	movs	r2, #2
 8000654:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <MX_SPI1_Init+0x68>)
 8000658:	2201      	movs	r2, #1
 800065a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800065c:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_SPI1_Init+0x68>)
 800065e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000662:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_SPI1_Init+0x68>)
 8000666:	2228      	movs	r2, #40	; 0x28
 8000668:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <MX_SPI1_Init+0x68>)
 800066c:	2200      	movs	r2, #0
 800066e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_SPI1_Init+0x68>)
 8000672:	2200      	movs	r2, #0
 8000674:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <MX_SPI1_Init+0x68>)
 8000678:	2200      	movs	r2, #0
 800067a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_SPI1_Init+0x68>)
 800067e:	220a      	movs	r2, #10
 8000680:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000682:	4805      	ldr	r0, [pc, #20]	; (8000698 <MX_SPI1_Init+0x68>)
 8000684:	f001 f8cc 	bl	8001820 <HAL_SPI_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800068e:	f000 f88d 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	200000bc 	.word	0x200000bc
 800069c:	40013000 	.word	0x40013000

080006a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	f107 0310 	add.w	r3, r7, #16
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b4:	4b39      	ldr	r3, [pc, #228]	; (800079c <MX_GPIO_Init+0xfc>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	4a38      	ldr	r2, [pc, #224]	; (800079c <MX_GPIO_Init+0xfc>)
 80006ba:	f043 0310 	orr.w	r3, r3, #16
 80006be:	6193      	str	r3, [r2, #24]
 80006c0:	4b36      	ldr	r3, [pc, #216]	; (800079c <MX_GPIO_Init+0xfc>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	f003 0310 	and.w	r3, r3, #16
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006cc:	4b33      	ldr	r3, [pc, #204]	; (800079c <MX_GPIO_Init+0xfc>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a32      	ldr	r2, [pc, #200]	; (800079c <MX_GPIO_Init+0xfc>)
 80006d2:	f043 0320 	orr.w	r3, r3, #32
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b30      	ldr	r3, [pc, #192]	; (800079c <MX_GPIO_Init+0xfc>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f003 0320 	and.w	r3, r3, #32
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e4:	4b2d      	ldr	r3, [pc, #180]	; (800079c <MX_GPIO_Init+0xfc>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a2c      	ldr	r2, [pc, #176]	; (800079c <MX_GPIO_Init+0xfc>)
 80006ea:	f043 0304 	orr.w	r3, r3, #4
 80006ee:	6193      	str	r3, [r2, #24]
 80006f0:	4b2a      	ldr	r3, [pc, #168]	; (800079c <MX_GPIO_Init+0xfc>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f003 0304 	and.w	r3, r3, #4
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fc:	4b27      	ldr	r3, [pc, #156]	; (800079c <MX_GPIO_Init+0xfc>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	4a26      	ldr	r2, [pc, #152]	; (800079c <MX_GPIO_Init+0xfc>)
 8000702:	f043 0308 	orr.w	r3, r3, #8
 8000706:	6193      	str	r3, [r2, #24]
 8000708:	4b24      	ldr	r3, [pc, #144]	; (800079c <MX_GPIO_Init+0xfc>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	f003 0308 	and.w	r3, r3, #8
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800071a:	4821      	ldr	r0, [pc, #132]	; (80007a0 <MX_GPIO_Init+0x100>)
 800071c:	f000 fc80 	bl	8001020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|D5_Pin|D6_Pin|D7_Pin
 8000720:	2200      	movs	r2, #0
 8000722:	f649 7110 	movw	r1, #40720	; 0x9f10
 8000726:	481f      	ldr	r0, [pc, #124]	; (80007a4 <MX_GPIO_Init+0x104>)
 8000728:	f000 fc7a 	bl	8001020 <HAL_GPIO_WritePin>
                          |D3_Pin|D2_Pin|D1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|RS_Pin|R_W_Pin|E_Pin
 800072c:	2200      	movs	r2, #0
 800072e:	f64f 01f8 	movw	r1, #63736	; 0xf8f8
 8000732:	481d      	ldr	r0, [pc, #116]	; (80007a8 <MX_GPIO_Init+0x108>)
 8000734:	f000 fc74 	bl	8001020 <HAL_GPIO_WritePin>
                          |D4_Pin|D0_Pin|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000738:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800073c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	2301      	movs	r3, #1
 8000740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2302      	movs	r3, #2
 8000748:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800074a:	f107 0310 	add.w	r3, r7, #16
 800074e:	4619      	mov	r1, r3
 8000750:	4813      	ldr	r0, [pc, #76]	; (80007a0 <MX_GPIO_Init+0x100>)
 8000752:	f000 fae1 	bl	8000d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 D5_Pin D6_Pin D7_Pin
                           D3_Pin D2_Pin D1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|D5_Pin|D6_Pin|D7_Pin
 8000756:	f649 7310 	movw	r3, #40720	; 0x9f10
 800075a:	613b      	str	r3, [r7, #16]
                          |D3_Pin|D2_Pin|D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075c:	2301      	movs	r3, #1
 800075e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000764:	2302      	movs	r3, #2
 8000766:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	4619      	mov	r1, r3
 800076e:	480d      	ldr	r0, [pc, #52]	; (80007a4 <MX_GPIO_Init+0x104>)
 8000770:	f000 fad2 	bl	8000d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 RS_Pin R_W_Pin E_Pin
                           D4_Pin D0_Pin PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|RS_Pin|R_W_Pin|E_Pin
 8000774:	f64f 03f8 	movw	r3, #63736	; 0xf8f8
 8000778:	613b      	str	r3, [r7, #16]
                          |D4_Pin|D0_Pin|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	2301      	movs	r3, #1
 800077c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2302      	movs	r3, #2
 8000784:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000786:	f107 0310 	add.w	r3, r7, #16
 800078a:	4619      	mov	r1, r3
 800078c:	4806      	ldr	r0, [pc, #24]	; (80007a8 <MX_GPIO_Init+0x108>)
 800078e:	f000 fac3 	bl	8000d18 <HAL_GPIO_Init>

}
 8000792:	bf00      	nop
 8000794:	3720      	adds	r7, #32
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40021000 	.word	0x40021000
 80007a0:	40011000 	.word	0x40011000
 80007a4:	40010800 	.word	0x40010800
 80007a8:	40010c00 	.word	0x40010c00

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <Error_Handler+0x8>
	...

080007b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007be:	4b1d      	ldr	r3, [pc, #116]	; (8000834 <HAL_MspInit+0x7c>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	4a1c      	ldr	r2, [pc, #112]	; (8000834 <HAL_MspInit+0x7c>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6193      	str	r3, [r2, #24]
 80007ca:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <HAL_MspInit+0x7c>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	4b17      	ldr	r3, [pc, #92]	; (8000834 <HAL_MspInit+0x7c>)
 80007d8:	69db      	ldr	r3, [r3, #28]
 80007da:	4a16      	ldr	r2, [pc, #88]	; (8000834 <HAL_MspInit+0x7c>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e0:	61d3      	str	r3, [r2, #28]
 80007e2:	4b14      	ldr	r3, [pc, #80]	; (8000834 <HAL_MspInit+0x7c>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	2005      	movs	r0, #5
 80007f4:	f000 fa59 	bl	8000caa <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80007f8:	2005      	movs	r0, #5
 80007fa:	f000 fa72 	bl	8000ce2 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2100      	movs	r1, #0
 8000802:	2005      	movs	r0, #5
 8000804:	f000 fa51 	bl	8000caa <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000808:	2005      	movs	r0, #5
 800080a:	f000 fa6a 	bl	8000ce2 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800080e:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <HAL_MspInit+0x80>)
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	4a04      	ldr	r2, [pc, #16]	; (8000838 <HAL_MspInit+0x80>)
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082a:	bf00      	nop
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40021000 	.word	0x40021000
 8000838:	40010000 	.word	0x40010000

0800083c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	f107 0310 	add.w	r3, r7, #16
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a1b      	ldr	r2, [pc, #108]	; (80008c4 <HAL_SPI_MspInit+0x88>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d12f      	bne.n	80008bc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800085c:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <HAL_SPI_MspInit+0x8c>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	4a19      	ldr	r2, [pc, #100]	; (80008c8 <HAL_SPI_MspInit+0x8c>)
 8000862:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000866:	6193      	str	r3, [r2, #24]
 8000868:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <HAL_SPI_MspInit+0x8c>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <HAL_SPI_MspInit+0x8c>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	4a13      	ldr	r2, [pc, #76]	; (80008c8 <HAL_SPI_MspInit+0x8c>)
 800087a:	f043 0304 	orr.w	r3, r3, #4
 800087e:	6193      	str	r3, [r2, #24]
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <HAL_SPI_MspInit+0x8c>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f003 0304 	and.w	r3, r3, #4
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800088c:	23a0      	movs	r3, #160	; 0xa0
 800088e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000894:	2303      	movs	r3, #3
 8000896:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000898:	f107 0310 	add.w	r3, r7, #16
 800089c:	4619      	mov	r1, r3
 800089e:	480b      	ldr	r0, [pc, #44]	; (80008cc <HAL_SPI_MspInit+0x90>)
 80008a0:	f000 fa3a 	bl	8000d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008a4:	2340      	movs	r3, #64	; 0x40
 80008a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b0:	f107 0310 	add.w	r3, r7, #16
 80008b4:	4619      	mov	r1, r3
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <HAL_SPI_MspInit+0x90>)
 80008b8:	f000 fa2e 	bl	8000d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008bc:	bf00      	nop
 80008be:	3720      	adds	r7, #32
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40013000 	.word	0x40013000
 80008c8:	40021000 	.word	0x40021000
 80008cc:	40010800 	.word	0x40010800

080008d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <NMI_Handler+0x4>

080008d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <HardFault_Handler+0x4>

080008dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <MemManage_Handler+0x4>

080008e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <BusFault_Handler+0x4>

080008e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <UsageFault_Handler+0x4>

080008ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr

080008fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr

08000906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr

08000912 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000916:	f000 f8b1 	bl	8000a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}

0800091e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr
	...

0800092c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000934:	4a14      	ldr	r2, [pc, #80]	; (8000988 <_sbrk+0x5c>)
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <_sbrk+0x60>)
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000940:	4b13      	ldr	r3, [pc, #76]	; (8000990 <_sbrk+0x64>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d102      	bne.n	800094e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <_sbrk+0x64>)
 800094a:	4a12      	ldr	r2, [pc, #72]	; (8000994 <_sbrk+0x68>)
 800094c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <_sbrk+0x64>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4413      	add	r3, r2
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	429a      	cmp	r2, r3
 800095a:	d207      	bcs.n	800096c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800095c:	f001 fb90 	bl	8002080 <__errno>
 8000960:	4603      	mov	r3, r0
 8000962:	220c      	movs	r2, #12
 8000964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	e009      	b.n	8000980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <_sbrk+0x64>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000972:	4b07      	ldr	r3, [pc, #28]	; (8000990 <_sbrk+0x64>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	4a05      	ldr	r2, [pc, #20]	; (8000990 <_sbrk+0x64>)
 800097c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800097e:	68fb      	ldr	r3, [r7, #12]
}
 8000980:	4618      	mov	r0, r3
 8000982:	3718      	adds	r7, #24
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20005000 	.word	0x20005000
 800098c:	00000400 	.word	0x00000400
 8000990:	20000114 	.word	0x20000114
 8000994:	20000130 	.word	0x20000130

08000998 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr

080009a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a4:	480c      	ldr	r0, [pc, #48]	; (80009d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009a6:	490d      	ldr	r1, [pc, #52]	; (80009dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009a8:	4a0d      	ldr	r2, [pc, #52]	; (80009e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ac:	e002      	b.n	80009b4 <LoopCopyDataInit>

080009ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b2:	3304      	adds	r3, #4

080009b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b8:	d3f9      	bcc.n	80009ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ba:	4a0a      	ldr	r2, [pc, #40]	; (80009e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009bc:	4c0a      	ldr	r4, [pc, #40]	; (80009e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c0:	e001      	b.n	80009c6 <LoopFillZerobss>

080009c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c4:	3204      	adds	r2, #4

080009c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c8:	d3fb      	bcc.n	80009c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009ca:	f7ff ffe5 	bl	8000998 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ce:	f001 fb5d 	bl	800208c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009d2:	f7ff fcff 	bl	80003d4 <main>
  bx lr
 80009d6:	4770      	bx	lr
  ldr r0, =_sdata
 80009d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009dc:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80009e0:	08002c80 	.word	0x08002c80
  ldr r2, =_sbss
 80009e4:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80009e8:	2000012c 	.word	0x2000012c

080009ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009ec:	e7fe      	b.n	80009ec <ADC1_2_IRQHandler>
	...

080009f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <HAL_Init+0x28>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a07      	ldr	r2, [pc, #28]	; (8000a18 <HAL_Init+0x28>)
 80009fa:	f043 0310 	orr.w	r3, r3, #16
 80009fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a00:	2003      	movs	r0, #3
 8000a02:	f000 f947 	bl	8000c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a06:	200f      	movs	r0, #15
 8000a08:	f000 f808 	bl	8000a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a0c:	f7ff fed4 	bl	80007b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40022000 	.word	0x40022000

08000a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <HAL_InitTick+0x54>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <HAL_InitTick+0x58>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 f95f 	bl	8000cfe <HAL_SYSTICK_Config>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
 8000a48:	e00e      	b.n	8000a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b0f      	cmp	r3, #15
 8000a4e:	d80a      	bhi.n	8000a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a50:	2200      	movs	r2, #0
 8000a52:	6879      	ldr	r1, [r7, #4]
 8000a54:	f04f 30ff 	mov.w	r0, #4294967295
 8000a58:	f000 f927 	bl	8000caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a5c:	4a06      	ldr	r2, [pc, #24]	; (8000a78 <HAL_InitTick+0x5c>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a62:	2300      	movs	r3, #0
 8000a64:	e000      	b.n	8000a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000030 	.word	0x20000030
 8000a74:	20000038 	.word	0x20000038
 8000a78:	20000034 	.word	0x20000034

08000a7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <HAL_IncTick+0x1c>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <HAL_IncTick+0x20>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	4a03      	ldr	r2, [pc, #12]	; (8000a9c <HAL_IncTick+0x20>)
 8000a8e:	6013      	str	r3, [r2, #0]
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	20000038 	.word	0x20000038
 8000a9c:	20000118 	.word	0x20000118

08000aa0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa4:	4b02      	ldr	r3, [pc, #8]	; (8000ab0 <HAL_GetTick+0x10>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr
 8000ab0:	20000118 	.word	0x20000118

08000ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000abc:	f7ff fff0 	bl	8000aa0 <HAL_GetTick>
 8000ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000acc:	d005      	beq.n	8000ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <HAL_Delay+0x44>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ada:	bf00      	nop
 8000adc:	f7ff ffe0 	bl	8000aa0 <HAL_GetTick>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d8f7      	bhi.n	8000adc <HAL_Delay+0x28>
  {
  }
}
 8000aec:	bf00      	nop
 8000aee:	bf00      	nop
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000038 	.word	0x20000038

08000afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2e:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	60d3      	str	r3, [r2, #12]
}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <__NVIC_GetPriorityGrouping+0x18>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	f003 0307 	and.w	r3, r3, #7
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	db0b      	blt.n	8000b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	f003 021f 	and.w	r2, r3, #31
 8000b78:	4906      	ldr	r1, [pc, #24]	; (8000b94 <__NVIC_EnableIRQ+0x34>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	095b      	lsrs	r3, r3, #5
 8000b80:	2001      	movs	r0, #1
 8000b82:	fa00 f202 	lsl.w	r2, r0, r2
 8000b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr
 8000b94:	e000e100 	.word	0xe000e100

08000b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db0a      	blt.n	8000bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	490c      	ldr	r1, [pc, #48]	; (8000be4 <__NVIC_SetPriority+0x4c>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc0:	e00a      	b.n	8000bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4908      	ldr	r1, [pc, #32]	; (8000be8 <__NVIC_SetPriority+0x50>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	761a      	strb	r2, [r3, #24]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000e100 	.word	0xe000e100
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	; 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	f1c3 0307 	rsb	r3, r3, #7
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	bf28      	it	cs
 8000c0a:	2304      	movcs	r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3304      	adds	r3, #4
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d902      	bls.n	8000c1c <NVIC_EncodePriority+0x30>
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3b03      	subs	r3, #3
 8000c1a:	e000      	b.n	8000c1e <NVIC_EncodePriority+0x32>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	43d9      	mvns	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	4313      	orrs	r3, r2
         );
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	; 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c60:	d301      	bcc.n	8000c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00f      	b.n	8000c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c66:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <SysTick_Config+0x40>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c6e:	210f      	movs	r1, #15
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f7ff ff90 	bl	8000b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <SysTick_Config+0x40>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c7e:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <SysTick_Config+0x40>)
 8000c80:	2207      	movs	r2, #7
 8000c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	e000e010 	.word	0xe000e010

08000c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff ff2d 	bl	8000afc <__NVIC_SetPriorityGrouping>
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b086      	sub	sp, #24
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
 8000cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cbc:	f7ff ff42 	bl	8000b44 <__NVIC_GetPriorityGrouping>
 8000cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	68b9      	ldr	r1, [r7, #8]
 8000cc6:	6978      	ldr	r0, [r7, #20]
 8000cc8:	f7ff ff90 	bl	8000bec <NVIC_EncodePriority>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ff5f 	bl	8000b98 <__NVIC_SetPriority>
}
 8000cda:	bf00      	nop
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff35 	bl	8000b60 <__NVIC_EnableIRQ>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff ffa2 	bl	8000c50 <SysTick_Config>
 8000d0c:	4603      	mov	r3, r0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b08b      	sub	sp, #44	; 0x2c
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d22:	2300      	movs	r3, #0
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d26:	2300      	movs	r3, #0
 8000d28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d2a:	e169      	b.n	8001000 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	69fa      	ldr	r2, [r7, #28]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	f040 8158 	bne.w	8000ffa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	4a9a      	ldr	r2, [pc, #616]	; (8000fb8 <HAL_GPIO_Init+0x2a0>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d05e      	beq.n	8000e12 <HAL_GPIO_Init+0xfa>
 8000d54:	4a98      	ldr	r2, [pc, #608]	; (8000fb8 <HAL_GPIO_Init+0x2a0>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d875      	bhi.n	8000e46 <HAL_GPIO_Init+0x12e>
 8000d5a:	4a98      	ldr	r2, [pc, #608]	; (8000fbc <HAL_GPIO_Init+0x2a4>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d058      	beq.n	8000e12 <HAL_GPIO_Init+0xfa>
 8000d60:	4a96      	ldr	r2, [pc, #600]	; (8000fbc <HAL_GPIO_Init+0x2a4>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d86f      	bhi.n	8000e46 <HAL_GPIO_Init+0x12e>
 8000d66:	4a96      	ldr	r2, [pc, #600]	; (8000fc0 <HAL_GPIO_Init+0x2a8>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d052      	beq.n	8000e12 <HAL_GPIO_Init+0xfa>
 8000d6c:	4a94      	ldr	r2, [pc, #592]	; (8000fc0 <HAL_GPIO_Init+0x2a8>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d869      	bhi.n	8000e46 <HAL_GPIO_Init+0x12e>
 8000d72:	4a94      	ldr	r2, [pc, #592]	; (8000fc4 <HAL_GPIO_Init+0x2ac>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d04c      	beq.n	8000e12 <HAL_GPIO_Init+0xfa>
 8000d78:	4a92      	ldr	r2, [pc, #584]	; (8000fc4 <HAL_GPIO_Init+0x2ac>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d863      	bhi.n	8000e46 <HAL_GPIO_Init+0x12e>
 8000d7e:	4a92      	ldr	r2, [pc, #584]	; (8000fc8 <HAL_GPIO_Init+0x2b0>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d046      	beq.n	8000e12 <HAL_GPIO_Init+0xfa>
 8000d84:	4a90      	ldr	r2, [pc, #576]	; (8000fc8 <HAL_GPIO_Init+0x2b0>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d85d      	bhi.n	8000e46 <HAL_GPIO_Init+0x12e>
 8000d8a:	2b12      	cmp	r3, #18
 8000d8c:	d82a      	bhi.n	8000de4 <HAL_GPIO_Init+0xcc>
 8000d8e:	2b12      	cmp	r3, #18
 8000d90:	d859      	bhi.n	8000e46 <HAL_GPIO_Init+0x12e>
 8000d92:	a201      	add	r2, pc, #4	; (adr r2, 8000d98 <HAL_GPIO_Init+0x80>)
 8000d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d98:	08000e13 	.word	0x08000e13
 8000d9c:	08000ded 	.word	0x08000ded
 8000da0:	08000dff 	.word	0x08000dff
 8000da4:	08000e41 	.word	0x08000e41
 8000da8:	08000e47 	.word	0x08000e47
 8000dac:	08000e47 	.word	0x08000e47
 8000db0:	08000e47 	.word	0x08000e47
 8000db4:	08000e47 	.word	0x08000e47
 8000db8:	08000e47 	.word	0x08000e47
 8000dbc:	08000e47 	.word	0x08000e47
 8000dc0:	08000e47 	.word	0x08000e47
 8000dc4:	08000e47 	.word	0x08000e47
 8000dc8:	08000e47 	.word	0x08000e47
 8000dcc:	08000e47 	.word	0x08000e47
 8000dd0:	08000e47 	.word	0x08000e47
 8000dd4:	08000e47 	.word	0x08000e47
 8000dd8:	08000e47 	.word	0x08000e47
 8000ddc:	08000df5 	.word	0x08000df5
 8000de0:	08000e09 	.word	0x08000e09
 8000de4:	4a79      	ldr	r2, [pc, #484]	; (8000fcc <HAL_GPIO_Init+0x2b4>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d013      	beq.n	8000e12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dea:	e02c      	b.n	8000e46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	623b      	str	r3, [r7, #32]
          break;
 8000df2:	e029      	b.n	8000e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	623b      	str	r3, [r7, #32]
          break;
 8000dfc:	e024      	b.n	8000e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	3308      	adds	r3, #8
 8000e04:	623b      	str	r3, [r7, #32]
          break;
 8000e06:	e01f      	b.n	8000e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	330c      	adds	r3, #12
 8000e0e:	623b      	str	r3, [r7, #32]
          break;
 8000e10:	e01a      	b.n	8000e48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d102      	bne.n	8000e20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	623b      	str	r3, [r7, #32]
          break;
 8000e1e:	e013      	b.n	8000e48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d105      	bne.n	8000e34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e28:	2308      	movs	r3, #8
 8000e2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	69fa      	ldr	r2, [r7, #28]
 8000e30:	611a      	str	r2, [r3, #16]
          break;
 8000e32:	e009      	b.n	8000e48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e34:	2308      	movs	r3, #8
 8000e36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	69fa      	ldr	r2, [r7, #28]
 8000e3c:	615a      	str	r2, [r3, #20]
          break;
 8000e3e:	e003      	b.n	8000e48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e40:	2300      	movs	r3, #0
 8000e42:	623b      	str	r3, [r7, #32]
          break;
 8000e44:	e000      	b.n	8000e48 <HAL_GPIO_Init+0x130>
          break;
 8000e46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	2bff      	cmp	r3, #255	; 0xff
 8000e4c:	d801      	bhi.n	8000e52 <HAL_GPIO_Init+0x13a>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	e001      	b.n	8000e56 <HAL_GPIO_Init+0x13e>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	3304      	adds	r3, #4
 8000e56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	2bff      	cmp	r3, #255	; 0xff
 8000e5c:	d802      	bhi.n	8000e64 <HAL_GPIO_Init+0x14c>
 8000e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	e002      	b.n	8000e6a <HAL_GPIO_Init+0x152>
 8000e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e66:	3b08      	subs	r3, #8
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	210f      	movs	r1, #15
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	fa01 f303 	lsl.w	r3, r1, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	6a39      	ldr	r1, [r7, #32]
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	fa01 f303 	lsl.w	r3, r1, r3
 8000e84:	431a      	orrs	r2, r3
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	f000 80b1 	beq.w	8000ffa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e98:	4b4d      	ldr	r3, [pc, #308]	; (8000fd0 <HAL_GPIO_Init+0x2b8>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	4a4c      	ldr	r2, [pc, #304]	; (8000fd0 <HAL_GPIO_Init+0x2b8>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	6193      	str	r3, [r2, #24]
 8000ea4:	4b4a      	ldr	r3, [pc, #296]	; (8000fd0 <HAL_GPIO_Init+0x2b8>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000eb0:	4a48      	ldr	r2, [pc, #288]	; (8000fd4 <HAL_GPIO_Init+0x2bc>)
 8000eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb4:	089b      	lsrs	r3, r3, #2
 8000eb6:	3302      	adds	r3, #2
 8000eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ebc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec0:	f003 0303 	and.w	r3, r3, #3
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	220f      	movs	r2, #15
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a40      	ldr	r2, [pc, #256]	; (8000fd8 <HAL_GPIO_Init+0x2c0>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d013      	beq.n	8000f04 <HAL_GPIO_Init+0x1ec>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a3f      	ldr	r2, [pc, #252]	; (8000fdc <HAL_GPIO_Init+0x2c4>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d00d      	beq.n	8000f00 <HAL_GPIO_Init+0x1e8>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a3e      	ldr	r2, [pc, #248]	; (8000fe0 <HAL_GPIO_Init+0x2c8>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d007      	beq.n	8000efc <HAL_GPIO_Init+0x1e4>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a3d      	ldr	r2, [pc, #244]	; (8000fe4 <HAL_GPIO_Init+0x2cc>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d101      	bne.n	8000ef8 <HAL_GPIO_Init+0x1e0>
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	e006      	b.n	8000f06 <HAL_GPIO_Init+0x1ee>
 8000ef8:	2304      	movs	r3, #4
 8000efa:	e004      	b.n	8000f06 <HAL_GPIO_Init+0x1ee>
 8000efc:	2302      	movs	r3, #2
 8000efe:	e002      	b.n	8000f06 <HAL_GPIO_Init+0x1ee>
 8000f00:	2301      	movs	r3, #1
 8000f02:	e000      	b.n	8000f06 <HAL_GPIO_Init+0x1ee>
 8000f04:	2300      	movs	r3, #0
 8000f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f08:	f002 0203 	and.w	r2, r2, #3
 8000f0c:	0092      	lsls	r2, r2, #2
 8000f0e:	4093      	lsls	r3, r2
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f16:	492f      	ldr	r1, [pc, #188]	; (8000fd4 <HAL_GPIO_Init+0x2bc>)
 8000f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d006      	beq.n	8000f3e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f30:	4b2d      	ldr	r3, [pc, #180]	; (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	492c      	ldr	r1, [pc, #176]	; (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	600b      	str	r3, [r1, #0]
 8000f3c:	e006      	b.n	8000f4c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f3e:	4b2a      	ldr	r3, [pc, #168]	; (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	43db      	mvns	r3, r3
 8000f46:	4928      	ldr	r1, [pc, #160]	; (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f48:	4013      	ands	r3, r2
 8000f4a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d006      	beq.n	8000f66 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f58:	4b23      	ldr	r3, [pc, #140]	; (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f5a:	685a      	ldr	r2, [r3, #4]
 8000f5c:	4922      	ldr	r1, [pc, #136]	; (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	604b      	str	r3, [r1, #4]
 8000f64:	e006      	b.n	8000f74 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f66:	4b20      	ldr	r3, [pc, #128]	; (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f68:	685a      	ldr	r2, [r3, #4]
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	491e      	ldr	r1, [pc, #120]	; (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f70:	4013      	ands	r3, r2
 8000f72:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d006      	beq.n	8000f8e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f82:	689a      	ldr	r2, [r3, #8]
 8000f84:	4918      	ldr	r1, [pc, #96]	; (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	608b      	str	r3, [r1, #8]
 8000f8c:	e006      	b.n	8000f9c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f8e:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f90:	689a      	ldr	r2, [r3, #8]
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	43db      	mvns	r3, r3
 8000f96:	4914      	ldr	r1, [pc, #80]	; (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f98:	4013      	ands	r3, r2
 8000f9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d021      	beq.n	8000fec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000faa:	68da      	ldr	r2, [r3, #12]
 8000fac:	490e      	ldr	r1, [pc, #56]	; (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	60cb      	str	r3, [r1, #12]
 8000fb4:	e021      	b.n	8000ffa <HAL_GPIO_Init+0x2e2>
 8000fb6:	bf00      	nop
 8000fb8:	10320000 	.word	0x10320000
 8000fbc:	10310000 	.word	0x10310000
 8000fc0:	10220000 	.word	0x10220000
 8000fc4:	10210000 	.word	0x10210000
 8000fc8:	10120000 	.word	0x10120000
 8000fcc:	10110000 	.word	0x10110000
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40010000 	.word	0x40010000
 8000fd8:	40010800 	.word	0x40010800
 8000fdc:	40010c00 	.word	0x40010c00
 8000fe0:	40011000 	.word	0x40011000
 8000fe4:	40011400 	.word	0x40011400
 8000fe8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fec:	4b0b      	ldr	r3, [pc, #44]	; (800101c <HAL_GPIO_Init+0x304>)
 8000fee:	68da      	ldr	r2, [r3, #12]
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	4909      	ldr	r1, [pc, #36]	; (800101c <HAL_GPIO_Init+0x304>)
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001006:	fa22 f303 	lsr.w	r3, r2, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	f47f ae8e 	bne.w	8000d2c <HAL_GPIO_Init+0x14>
  }
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	372c      	adds	r7, #44	; 0x2c
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	40010400 	.word	0x40010400

08001020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	807b      	strh	r3, [r7, #2]
 800102c:	4613      	mov	r3, r2
 800102e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001030:	787b      	ldrb	r3, [r7, #1]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001036:	887a      	ldrh	r2, [r7, #2]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800103c:	e003      	b.n	8001046 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800103e:	887b      	ldrh	r3, [r7, #2]
 8001040:	041a      	lsls	r2, r3, #16
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	611a      	str	r2, [r3, #16]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr

08001050 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e272      	b.n	8001548 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	2b00      	cmp	r3, #0
 800106c:	f000 8087 	beq.w	800117e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001070:	4b92      	ldr	r3, [pc, #584]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 030c 	and.w	r3, r3, #12
 8001078:	2b04      	cmp	r3, #4
 800107a:	d00c      	beq.n	8001096 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800107c:	4b8f      	ldr	r3, [pc, #572]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 030c 	and.w	r3, r3, #12
 8001084:	2b08      	cmp	r3, #8
 8001086:	d112      	bne.n	80010ae <HAL_RCC_OscConfig+0x5e>
 8001088:	4b8c      	ldr	r3, [pc, #560]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001094:	d10b      	bne.n	80010ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001096:	4b89      	ldr	r3, [pc, #548]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d06c      	beq.n	800117c <HAL_RCC_OscConfig+0x12c>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d168      	bne.n	800117c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e24c      	b.n	8001548 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010b6:	d106      	bne.n	80010c6 <HAL_RCC_OscConfig+0x76>
 80010b8:	4b80      	ldr	r3, [pc, #512]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a7f      	ldr	r2, [pc, #508]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80010be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	e02e      	b.n	8001124 <HAL_RCC_OscConfig+0xd4>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d10c      	bne.n	80010e8 <HAL_RCC_OscConfig+0x98>
 80010ce:	4b7b      	ldr	r3, [pc, #492]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a7a      	ldr	r2, [pc, #488]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80010d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	4b78      	ldr	r3, [pc, #480]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a77      	ldr	r2, [pc, #476]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80010e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	e01d      	b.n	8001124 <HAL_RCC_OscConfig+0xd4>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010f0:	d10c      	bne.n	800110c <HAL_RCC_OscConfig+0xbc>
 80010f2:	4b72      	ldr	r3, [pc, #456]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a71      	ldr	r2, [pc, #452]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80010f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	4b6f      	ldr	r3, [pc, #444]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a6e      	ldr	r2, [pc, #440]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	e00b      	b.n	8001124 <HAL_RCC_OscConfig+0xd4>
 800110c:	4b6b      	ldr	r3, [pc, #428]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a6a      	ldr	r2, [pc, #424]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001116:	6013      	str	r3, [r2, #0]
 8001118:	4b68      	ldr	r3, [pc, #416]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a67      	ldr	r2, [pc, #412]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 800111e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001122:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d013      	beq.n	8001154 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112c:	f7ff fcb8 	bl	8000aa0 <HAL_GetTick>
 8001130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001132:	e008      	b.n	8001146 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001134:	f7ff fcb4 	bl	8000aa0 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b64      	cmp	r3, #100	; 0x64
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e200      	b.n	8001548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001146:	4b5d      	ldr	r3, [pc, #372]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d0f0      	beq.n	8001134 <HAL_RCC_OscConfig+0xe4>
 8001152:	e014      	b.n	800117e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001154:	f7ff fca4 	bl	8000aa0 <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800115c:	f7ff fca0 	bl	8000aa0 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b64      	cmp	r3, #100	; 0x64
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e1ec      	b.n	8001548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800116e:	4b53      	ldr	r3, [pc, #332]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1f0      	bne.n	800115c <HAL_RCC_OscConfig+0x10c>
 800117a:	e000      	b.n	800117e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800117c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d063      	beq.n	8001252 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800118a:	4b4c      	ldr	r3, [pc, #304]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 030c 	and.w	r3, r3, #12
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00b      	beq.n	80011ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001196:	4b49      	ldr	r3, [pc, #292]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 030c 	and.w	r3, r3, #12
 800119e:	2b08      	cmp	r3, #8
 80011a0:	d11c      	bne.n	80011dc <HAL_RCC_OscConfig+0x18c>
 80011a2:	4b46      	ldr	r3, [pc, #280]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d116      	bne.n	80011dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ae:	4b43      	ldr	r3, [pc, #268]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d005      	beq.n	80011c6 <HAL_RCC_OscConfig+0x176>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d001      	beq.n	80011c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e1c0      	b.n	8001548 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c6:	4b3d      	ldr	r3, [pc, #244]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	4939      	ldr	r1, [pc, #228]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80011d6:	4313      	orrs	r3, r2
 80011d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011da:	e03a      	b.n	8001252 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d020      	beq.n	8001226 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011e4:	4b36      	ldr	r3, [pc, #216]	; (80012c0 <HAL_RCC_OscConfig+0x270>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ea:	f7ff fc59 	bl	8000aa0 <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011f2:	f7ff fc55 	bl	8000aa0 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e1a1      	b.n	8001548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001204:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0f0      	beq.n	80011f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001210:	4b2a      	ldr	r3, [pc, #168]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	4927      	ldr	r1, [pc, #156]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001220:	4313      	orrs	r3, r2
 8001222:	600b      	str	r3, [r1, #0]
 8001224:	e015      	b.n	8001252 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001226:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <HAL_RCC_OscConfig+0x270>)
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122c:	f7ff fc38 	bl	8000aa0 <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001234:	f7ff fc34 	bl	8000aa0 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e180      	b.n	8001548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001246:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f0      	bne.n	8001234 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0308 	and.w	r3, r3, #8
 800125a:	2b00      	cmp	r3, #0
 800125c:	d03a      	beq.n	80012d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d019      	beq.n	800129a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001266:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <HAL_RCC_OscConfig+0x274>)
 8001268:	2201      	movs	r2, #1
 800126a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126c:	f7ff fc18 	bl	8000aa0 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001274:	f7ff fc14 	bl	8000aa0 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e160      	b.n	8001548 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001286:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0f0      	beq.n	8001274 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001292:	2001      	movs	r0, #1
 8001294:	f000 faa6 	bl	80017e4 <RCC_Delay>
 8001298:	e01c      	b.n	80012d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800129a:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <HAL_RCC_OscConfig+0x274>)
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a0:	f7ff fbfe 	bl	8000aa0 <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a6:	e00f      	b.n	80012c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a8:	f7ff fbfa 	bl	8000aa0 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d908      	bls.n	80012c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e146      	b.n	8001548 <HAL_RCC_OscConfig+0x4f8>
 80012ba:	bf00      	nop
 80012bc:	40021000 	.word	0x40021000
 80012c0:	42420000 	.word	0x42420000
 80012c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c8:	4b92      	ldr	r3, [pc, #584]	; (8001514 <HAL_RCC_OscConfig+0x4c4>)
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1e9      	bne.n	80012a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f000 80a6 	beq.w	800142e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012e6:	4b8b      	ldr	r3, [pc, #556]	; (8001514 <HAL_RCC_OscConfig+0x4c4>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d10d      	bne.n	800130e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012f2:	4b88      	ldr	r3, [pc, #544]	; (8001514 <HAL_RCC_OscConfig+0x4c4>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	4a87      	ldr	r2, [pc, #540]	; (8001514 <HAL_RCC_OscConfig+0x4c4>)
 80012f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fc:	61d3      	str	r3, [r2, #28]
 80012fe:	4b85      	ldr	r3, [pc, #532]	; (8001514 <HAL_RCC_OscConfig+0x4c4>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800130a:	2301      	movs	r3, #1
 800130c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130e:	4b82      	ldr	r3, [pc, #520]	; (8001518 <HAL_RCC_OscConfig+0x4c8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001316:	2b00      	cmp	r3, #0
 8001318:	d118      	bne.n	800134c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800131a:	4b7f      	ldr	r3, [pc, #508]	; (8001518 <HAL_RCC_OscConfig+0x4c8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a7e      	ldr	r2, [pc, #504]	; (8001518 <HAL_RCC_OscConfig+0x4c8>)
 8001320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001326:	f7ff fbbb 	bl	8000aa0 <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800132e:	f7ff fbb7 	bl	8000aa0 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b64      	cmp	r3, #100	; 0x64
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e103      	b.n	8001548 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001340:	4b75      	ldr	r3, [pc, #468]	; (8001518 <HAL_RCC_OscConfig+0x4c8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0f0      	beq.n	800132e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d106      	bne.n	8001362 <HAL_RCC_OscConfig+0x312>
 8001354:	4b6f      	ldr	r3, [pc, #444]	; (8001514 <HAL_RCC_OscConfig+0x4c4>)
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	4a6e      	ldr	r2, [pc, #440]	; (8001514 <HAL_RCC_OscConfig+0x4c4>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	6213      	str	r3, [r2, #32]
 8001360:	e02d      	b.n	80013be <HAL_RCC_OscConfig+0x36e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d10c      	bne.n	8001384 <HAL_RCC_OscConfig+0x334>
 800136a:	4b6a      	ldr	r3, [pc, #424]	; (8001514 <HAL_RCC_OscConfig+0x4c4>)
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	4a69      	ldr	r2, [pc, #420]	; (8001514 <HAL_RCC_OscConfig+0x4c4>)
 8001370:	f023 0301 	bic.w	r3, r3, #1
 8001374:	6213      	str	r3, [r2, #32]
 8001376:	4b67      	ldr	r3, [pc, #412]	; (8001514 <HAL_RCC_OscConfig+0x4c4>)
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	4a66      	ldr	r2, [pc, #408]	; (8001514 <HAL_RCC_OscConfig+0x4c4>)
 800137c:	f023 0304 	bic.w	r3, r3, #4
 8001380:	6213      	str	r3, [r2, #32]
 8001382:	e01c      	b.n	80013be <HAL_RCC_OscConfig+0x36e>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	2b05      	cmp	r3, #5
 800138a:	d10c      	bne.n	80013a6 <HAL_RCC_OscConfig+0x356>
 800138c:	4b61      	ldr	r3, [pc, #388]	; (8001514 <HAL_RCC_OscConfig+0x4c4>)
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	4a60      	ldr	r2, [pc, #384]	; (8001514 <HAL_RCC_OscConfig+0x4c4>)
 8001392:	f043 0304 	orr.w	r3, r3, #4
 8001396:	6213      	str	r3, [r2, #32]
 8001398:	4b5e      	ldr	r3, [pc, #376]	; (8001514 <HAL_RCC_OscConfig+0x4c4>)
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	4a5d      	ldr	r2, [pc, #372]	; (8001514 <HAL_RCC_OscConfig+0x4c4>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	6213      	str	r3, [r2, #32]
 80013a4:	e00b      	b.n	80013be <HAL_RCC_OscConfig+0x36e>
 80013a6:	4b5b      	ldr	r3, [pc, #364]	; (8001514 <HAL_RCC_OscConfig+0x4c4>)
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	4a5a      	ldr	r2, [pc, #360]	; (8001514 <HAL_RCC_OscConfig+0x4c4>)
 80013ac:	f023 0301 	bic.w	r3, r3, #1
 80013b0:	6213      	str	r3, [r2, #32]
 80013b2:	4b58      	ldr	r3, [pc, #352]	; (8001514 <HAL_RCC_OscConfig+0x4c4>)
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	4a57      	ldr	r2, [pc, #348]	; (8001514 <HAL_RCC_OscConfig+0x4c4>)
 80013b8:	f023 0304 	bic.w	r3, r3, #4
 80013bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d015      	beq.n	80013f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c6:	f7ff fb6b 	bl	8000aa0 <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013cc:	e00a      	b.n	80013e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ce:	f7ff fb67 	bl	8000aa0 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013dc:	4293      	cmp	r3, r2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e0b1      	b.n	8001548 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e4:	4b4b      	ldr	r3, [pc, #300]	; (8001514 <HAL_RCC_OscConfig+0x4c4>)
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0ee      	beq.n	80013ce <HAL_RCC_OscConfig+0x37e>
 80013f0:	e014      	b.n	800141c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f2:	f7ff fb55 	bl	8000aa0 <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013f8:	e00a      	b.n	8001410 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013fa:	f7ff fb51 	bl	8000aa0 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	f241 3288 	movw	r2, #5000	; 0x1388
 8001408:	4293      	cmp	r3, r2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e09b      	b.n	8001548 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001410:	4b40      	ldr	r3, [pc, #256]	; (8001514 <HAL_RCC_OscConfig+0x4c4>)
 8001412:	6a1b      	ldr	r3, [r3, #32]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1ee      	bne.n	80013fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800141c:	7dfb      	ldrb	r3, [r7, #23]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d105      	bne.n	800142e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001422:	4b3c      	ldr	r3, [pc, #240]	; (8001514 <HAL_RCC_OscConfig+0x4c4>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	4a3b      	ldr	r2, [pc, #236]	; (8001514 <HAL_RCC_OscConfig+0x4c4>)
 8001428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800142c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 8087 	beq.w	8001546 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001438:	4b36      	ldr	r3, [pc, #216]	; (8001514 <HAL_RCC_OscConfig+0x4c4>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 030c 	and.w	r3, r3, #12
 8001440:	2b08      	cmp	r3, #8
 8001442:	d061      	beq.n	8001508 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69db      	ldr	r3, [r3, #28]
 8001448:	2b02      	cmp	r3, #2
 800144a:	d146      	bne.n	80014da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800144c:	4b33      	ldr	r3, [pc, #204]	; (800151c <HAL_RCC_OscConfig+0x4cc>)
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001452:	f7ff fb25 	bl	8000aa0 <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800145a:	f7ff fb21 	bl	8000aa0 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e06d      	b.n	8001548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800146c:	4b29      	ldr	r3, [pc, #164]	; (8001514 <HAL_RCC_OscConfig+0x4c4>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1f0      	bne.n	800145a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001480:	d108      	bne.n	8001494 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001482:	4b24      	ldr	r3, [pc, #144]	; (8001514 <HAL_RCC_OscConfig+0x4c4>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	4921      	ldr	r1, [pc, #132]	; (8001514 <HAL_RCC_OscConfig+0x4c4>)
 8001490:	4313      	orrs	r3, r2
 8001492:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001494:	4b1f      	ldr	r3, [pc, #124]	; (8001514 <HAL_RCC_OscConfig+0x4c4>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a19      	ldr	r1, [r3, #32]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	430b      	orrs	r3, r1
 80014a6:	491b      	ldr	r1, [pc, #108]	; (8001514 <HAL_RCC_OscConfig+0x4c4>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014ac:	4b1b      	ldr	r3, [pc, #108]	; (800151c <HAL_RCC_OscConfig+0x4cc>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b2:	f7ff faf5 	bl	8000aa0 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ba:	f7ff faf1 	bl	8000aa0 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e03d      	b.n	8001548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <HAL_RCC_OscConfig+0x4c4>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0x46a>
 80014d8:	e035      	b.n	8001546 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <HAL_RCC_OscConfig+0x4cc>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e0:	f7ff fade 	bl	8000aa0 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e8:	f7ff fada 	bl	8000aa0 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e026      	b.n	8001548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_RCC_OscConfig+0x4c4>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f0      	bne.n	80014e8 <HAL_RCC_OscConfig+0x498>
 8001506:	e01e      	b.n	8001546 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d107      	bne.n	8001520 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e019      	b.n	8001548 <HAL_RCC_OscConfig+0x4f8>
 8001514:	40021000 	.word	0x40021000
 8001518:	40007000 	.word	0x40007000
 800151c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <HAL_RCC_OscConfig+0x500>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	429a      	cmp	r2, r3
 8001532:	d106      	bne.n	8001542 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800153e:	429a      	cmp	r2, r3
 8001540:	d001      	beq.n	8001546 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e000      	b.n	8001548 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40021000 	.word	0x40021000

08001554 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e0d0      	b.n	800170a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001568:	4b6a      	ldr	r3, [pc, #424]	; (8001714 <HAL_RCC_ClockConfig+0x1c0>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	429a      	cmp	r2, r3
 8001574:	d910      	bls.n	8001598 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001576:	4b67      	ldr	r3, [pc, #412]	; (8001714 <HAL_RCC_ClockConfig+0x1c0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f023 0207 	bic.w	r2, r3, #7
 800157e:	4965      	ldr	r1, [pc, #404]	; (8001714 <HAL_RCC_ClockConfig+0x1c0>)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	4313      	orrs	r3, r2
 8001584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001586:	4b63      	ldr	r3, [pc, #396]	; (8001714 <HAL_RCC_ClockConfig+0x1c0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	429a      	cmp	r2, r3
 8001592:	d001      	beq.n	8001598 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e0b8      	b.n	800170a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d020      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d005      	beq.n	80015bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015b0:	4b59      	ldr	r3, [pc, #356]	; (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	4a58      	ldr	r2, [pc, #352]	; (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 80015b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d005      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015c8:	4b53      	ldr	r3, [pc, #332]	; (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	4a52      	ldr	r2, [pc, #328]	; (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 80015ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d4:	4b50      	ldr	r3, [pc, #320]	; (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	494d      	ldr	r1, [pc, #308]	; (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d040      	beq.n	8001674 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d107      	bne.n	800160a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fa:	4b47      	ldr	r3, [pc, #284]	; (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d115      	bne.n	8001632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e07f      	b.n	800170a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b02      	cmp	r3, #2
 8001610:	d107      	bne.n	8001622 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001612:	4b41      	ldr	r3, [pc, #260]	; (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d109      	bne.n	8001632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e073      	b.n	800170a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001622:	4b3d      	ldr	r3, [pc, #244]	; (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e06b      	b.n	800170a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001632:	4b39      	ldr	r3, [pc, #228]	; (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f023 0203 	bic.w	r2, r3, #3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	4936      	ldr	r1, [pc, #216]	; (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001644:	f7ff fa2c 	bl	8000aa0 <HAL_GetTick>
 8001648:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800164a:	e00a      	b.n	8001662 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800164c:	f7ff fa28 	bl	8000aa0 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	f241 3288 	movw	r2, #5000	; 0x1388
 800165a:	4293      	cmp	r3, r2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e053      	b.n	800170a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001662:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f003 020c 	and.w	r2, r3, #12
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	429a      	cmp	r2, r3
 8001672:	d1eb      	bne.n	800164c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001674:	4b27      	ldr	r3, [pc, #156]	; (8001714 <HAL_RCC_ClockConfig+0x1c0>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0307 	and.w	r3, r3, #7
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	429a      	cmp	r2, r3
 8001680:	d210      	bcs.n	80016a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001682:	4b24      	ldr	r3, [pc, #144]	; (8001714 <HAL_RCC_ClockConfig+0x1c0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f023 0207 	bic.w	r2, r3, #7
 800168a:	4922      	ldr	r1, [pc, #136]	; (8001714 <HAL_RCC_ClockConfig+0x1c0>)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	4313      	orrs	r3, r2
 8001690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001692:	4b20      	ldr	r3, [pc, #128]	; (8001714 <HAL_RCC_ClockConfig+0x1c0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	429a      	cmp	r2, r3
 800169e:	d001      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e032      	b.n	800170a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d008      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016b0:	4b19      	ldr	r3, [pc, #100]	; (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	4916      	ldr	r1, [pc, #88]	; (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d009      	beq.n	80016e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016ce:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	490e      	ldr	r1, [pc, #56]	; (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016e2:	f000 f821 	bl	8001728 <HAL_RCC_GetSysClockFreq>
 80016e6:	4602      	mov	r2, r0
 80016e8:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	091b      	lsrs	r3, r3, #4
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	490a      	ldr	r1, [pc, #40]	; (800171c <HAL_RCC_ClockConfig+0x1c8>)
 80016f4:	5ccb      	ldrb	r3, [r1, r3]
 80016f6:	fa22 f303 	lsr.w	r3, r2, r3
 80016fa:	4a09      	ldr	r2, [pc, #36]	; (8001720 <HAL_RCC_ClockConfig+0x1cc>)
 80016fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <HAL_RCC_ClockConfig+0x1d0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff f98a 	bl	8000a1c <HAL_InitTick>

  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40022000 	.word	0x40022000
 8001718:	40021000 	.word	0x40021000
 800171c:	08002b34 	.word	0x08002b34
 8001720:	20000030 	.word	0x20000030
 8001724:	20000034 	.word	0x20000034

08001728 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001728:	b490      	push	{r4, r7}
 800172a:	b08a      	sub	sp, #40	; 0x28
 800172c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800172e:	4b29      	ldr	r3, [pc, #164]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001730:	1d3c      	adds	r4, r7, #4
 8001732:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001734:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001738:	f240 2301 	movw	r3, #513	; 0x201
 800173c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
 8001742:	2300      	movs	r3, #0
 8001744:	61bb      	str	r3, [r7, #24]
 8001746:	2300      	movs	r3, #0
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800174e:	2300      	movs	r3, #0
 8001750:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001752:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f003 030c 	and.w	r3, r3, #12
 800175e:	2b04      	cmp	r3, #4
 8001760:	d002      	beq.n	8001768 <HAL_RCC_GetSysClockFreq+0x40>
 8001762:	2b08      	cmp	r3, #8
 8001764:	d003      	beq.n	800176e <HAL_RCC_GetSysClockFreq+0x46>
 8001766:	e02b      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001768:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800176a:	623b      	str	r3, [r7, #32]
      break;
 800176c:	e02b      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	0c9b      	lsrs	r3, r3, #18
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	3328      	adds	r3, #40	; 0x28
 8001778:	443b      	add	r3, r7
 800177a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800177e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d012      	beq.n	80017b0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800178a:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	0c5b      	lsrs	r3, r3, #17
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	3328      	adds	r3, #40	; 0x28
 8001796:	443b      	add	r3, r7
 8001798:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800179c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80017a2:	fb03 f202 	mul.w	r2, r3, r2
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
 80017ae:	e004      	b.n	80017ba <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	4a0b      	ldr	r2, [pc, #44]	; (80017e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017b4:	fb02 f303 	mul.w	r3, r2, r3
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	623b      	str	r3, [r7, #32]
      break;
 80017be:	e002      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80017c2:	623b      	str	r3, [r7, #32]
      break;
 80017c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017c6:	6a3b      	ldr	r3, [r7, #32]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3728      	adds	r7, #40	; 0x28
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc90      	pop	{r4, r7}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	08002b24 	.word	0x08002b24
 80017d8:	40021000 	.word	0x40021000
 80017dc:	007a1200 	.word	0x007a1200
 80017e0:	003d0900 	.word	0x003d0900

080017e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017ec:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <RCC_Delay+0x34>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a0a      	ldr	r2, [pc, #40]	; (800181c <RCC_Delay+0x38>)
 80017f2:	fba2 2303 	umull	r2, r3, r2, r3
 80017f6:	0a5b      	lsrs	r3, r3, #9
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	fb02 f303 	mul.w	r3, r2, r3
 80017fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001800:	bf00      	nop
  }
  while (Delay --);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	1e5a      	subs	r2, r3, #1
 8001806:	60fa      	str	r2, [r7, #12]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1f9      	bne.n	8001800 <RCC_Delay+0x1c>
}
 800180c:	bf00      	nop
 800180e:	bf00      	nop
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	20000030 	.word	0x20000030
 800181c:	10624dd3 	.word	0x10624dd3

08001820 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e076      	b.n	8001920 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	2b00      	cmp	r3, #0
 8001838:	d108      	bne.n	800184c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001842:	d009      	beq.n	8001858 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	61da      	str	r2, [r3, #28]
 800184a:	e005      	b.n	8001858 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d106      	bne.n	8001878 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7fe ffe2 	bl	800083c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2202      	movs	r2, #2
 800187c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800188e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80018a0:	431a      	orrs	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	431a      	orrs	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018c8:	431a      	orrs	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018d2:	431a      	orrs	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018dc:	ea42 0103 	orr.w	r1, r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	0c1a      	lsrs	r2, r3, #16
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f002 0204 	and.w	r2, r2, #4
 80018fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	69da      	ldr	r2, [r3, #28]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800190e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b088      	sub	sp, #32
 800192c:	af02      	add	r7, sp, #8
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	4613      	mov	r3, r2
 8001936:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001938:	2300      	movs	r3, #0
 800193a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001944:	d112      	bne.n	800196c <HAL_SPI_Receive+0x44>
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10e      	bne.n	800196c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2204      	movs	r2, #4
 8001952:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001956:	88fa      	ldrh	r2, [r7, #6]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	4613      	mov	r3, r2
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 f8f1 	bl	8001b4a <HAL_SPI_TransmitReceive>
 8001968:	4603      	mov	r3, r0
 800196a:	e0ea      	b.n	8001b42 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001972:	2b01      	cmp	r3, #1
 8001974:	d101      	bne.n	800197a <HAL_SPI_Receive+0x52>
 8001976:	2302      	movs	r3, #2
 8001978:	e0e3      	b.n	8001b42 <HAL_SPI_Receive+0x21a>
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001982:	f7ff f88d 	bl	8000aa0 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b01      	cmp	r3, #1
 8001992:	d002      	beq.n	800199a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001994:	2302      	movs	r3, #2
 8001996:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001998:	e0ca      	b.n	8001b30 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d002      	beq.n	80019a6 <HAL_SPI_Receive+0x7e>
 80019a0:	88fb      	ldrh	r3, [r7, #6]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d102      	bne.n	80019ac <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80019aa:	e0c1      	b.n	8001b30 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2204      	movs	r2, #4
 80019b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2200      	movs	r2, #0
 80019b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	68ba      	ldr	r2, [r7, #8]
 80019be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	88fa      	ldrh	r2, [r7, #6]
 80019c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	88fa      	ldrh	r2, [r7, #6]
 80019ca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2200      	movs	r2, #0
 80019d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2200      	movs	r2, #0
 80019d6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2200      	movs	r2, #0
 80019dc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019f2:	d10f      	bne.n	8001a14 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a02:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001a12:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a1e:	2b40      	cmp	r3, #64	; 0x40
 8001a20:	d007      	beq.n	8001a32 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a30:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d162      	bne.n	8001b00 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001a3a:	e02e      	b.n	8001a9a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d115      	bne.n	8001a76 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f103 020c 	add.w	r2, r3, #12
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a56:	7812      	ldrb	r2, [r2, #0]
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a60:	1c5a      	adds	r2, r3, #1
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001a74:	e011      	b.n	8001a9a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a76:	f7ff f813 	bl	8000aa0 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d803      	bhi.n	8001a8e <HAL_SPI_Receive+0x166>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a8c:	d102      	bne.n	8001a94 <HAL_SPI_Receive+0x16c>
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d102      	bne.n	8001a9a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001a98:	e04a      	b.n	8001b30 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1cb      	bne.n	8001a3c <HAL_SPI_Receive+0x114>
 8001aa4:	e031      	b.n	8001b0a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d113      	bne.n	8001adc <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68da      	ldr	r2, [r3, #12]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001abe:	b292      	uxth	r2, r2
 8001ac0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac6:	1c9a      	adds	r2, r3, #2
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001ada:	e011      	b.n	8001b00 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001adc:	f7fe ffe0 	bl	8000aa0 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d803      	bhi.n	8001af4 <HAL_SPI_Receive+0x1cc>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af2:	d102      	bne.n	8001afa <HAL_SPI_Receive+0x1d2>
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d102      	bne.n	8001b00 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001afe:	e017      	b.n	8001b30 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1cd      	bne.n	8001aa6 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	6839      	ldr	r1, [r7, #0]
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f000 fa46 	bl	8001fa0 <SPI_EndRxTransaction>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d002      	beq.n	8001b20 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2220      	movs	r2, #32
 8001b1e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d002      	beq.n	8001b2e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	75fb      	strb	r3, [r7, #23]
 8001b2c:	e000      	b.n	8001b30 <HAL_SPI_Receive+0x208>
  }

error :
 8001b2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b08c      	sub	sp, #48	; 0x30
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	60f8      	str	r0, [r7, #12]
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
 8001b56:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d101      	bne.n	8001b70 <HAL_SPI_TransmitReceive+0x26>
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	e18a      	b.n	8001e86 <HAL_SPI_TransmitReceive+0x33c>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b78:	f7fe ff92 	bl	8000aa0 <HAL_GetTick>
 8001b7c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001b8e:	887b      	ldrh	r3, [r7, #2]
 8001b90:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001b92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d00f      	beq.n	8001bba <HAL_SPI_TransmitReceive+0x70>
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ba0:	d107      	bne.n	8001bb2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d103      	bne.n	8001bb2 <HAL_SPI_TransmitReceive+0x68>
 8001baa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	d003      	beq.n	8001bba <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001bb8:	e15b      	b.n	8001e72 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d005      	beq.n	8001bcc <HAL_SPI_TransmitReceive+0x82>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d002      	beq.n	8001bcc <HAL_SPI_TransmitReceive+0x82>
 8001bc6:	887b      	ldrh	r3, [r7, #2]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d103      	bne.n	8001bd4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001bd2:	e14e      	b.n	8001e72 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d003      	beq.n	8001be8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2205      	movs	r2, #5
 8001be4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	887a      	ldrh	r2, [r7, #2]
 8001bf8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	887a      	ldrh	r2, [r7, #2]
 8001bfe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	887a      	ldrh	r2, [r7, #2]
 8001c0a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	887a      	ldrh	r2, [r7, #2]
 8001c10:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c28:	2b40      	cmp	r3, #64	; 0x40
 8001c2a:	d007      	beq.n	8001c3c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c44:	d178      	bne.n	8001d38 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d002      	beq.n	8001c54 <HAL_SPI_TransmitReceive+0x10a>
 8001c4e:	8b7b      	ldrh	r3, [r7, #26]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d166      	bne.n	8001d22 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c58:	881a      	ldrh	r2, [r3, #0]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c64:	1c9a      	adds	r2, r3, #2
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	3b01      	subs	r3, #1
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c78:	e053      	b.n	8001d22 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d11b      	bne.n	8001cc0 <HAL_SPI_TransmitReceive+0x176>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d016      	beq.n	8001cc0 <HAL_SPI_TransmitReceive+0x176>
 8001c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d113      	bne.n	8001cc0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9c:	881a      	ldrh	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca8:	1c9a      	adds	r2, r3, #2
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d119      	bne.n	8001d02 <HAL_SPI_TransmitReceive+0x1b8>
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d014      	beq.n	8001d02 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce2:	b292      	uxth	r2, r2
 8001ce4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cea:	1c9a      	adds	r2, r3, #2
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001d02:	f7fe fecd 	bl	8000aa0 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d807      	bhi.n	8001d22 <HAL_SPI_TransmitReceive+0x1d8>
 8001d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d18:	d003      	beq.n	8001d22 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001d20:	e0a7      	b.n	8001e72 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1a6      	bne.n	8001c7a <HAL_SPI_TransmitReceive+0x130>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1a1      	bne.n	8001c7a <HAL_SPI_TransmitReceive+0x130>
 8001d36:	e07c      	b.n	8001e32 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d002      	beq.n	8001d46 <HAL_SPI_TransmitReceive+0x1fc>
 8001d40:	8b7b      	ldrh	r3, [r7, #26]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d16b      	bne.n	8001e1e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	330c      	adds	r3, #12
 8001d50:	7812      	ldrb	r2, [r2, #0]
 8001d52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d58:	1c5a      	adds	r2, r3, #1
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	3b01      	subs	r3, #1
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d6c:	e057      	b.n	8001e1e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d11c      	bne.n	8001db6 <HAL_SPI_TransmitReceive+0x26c>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d017      	beq.n	8001db6 <HAL_SPI_TransmitReceive+0x26c>
 8001d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d114      	bne.n	8001db6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	330c      	adds	r3, #12
 8001d96:	7812      	ldrb	r2, [r2, #0]
 8001d98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	1c5a      	adds	r2, r3, #1
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	3b01      	subs	r3, #1
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d119      	bne.n	8001df8 <HAL_SPI_TransmitReceive+0x2ae>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d014      	beq.n	8001df8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68da      	ldr	r2, [r3, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de0:	1c5a      	adds	r2, r3, #1
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	3b01      	subs	r3, #1
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001df4:	2301      	movs	r3, #1
 8001df6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001df8:	f7fe fe52 	bl	8000aa0 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d803      	bhi.n	8001e10 <HAL_SPI_TransmitReceive+0x2c6>
 8001e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e0e:	d102      	bne.n	8001e16 <HAL_SPI_TransmitReceive+0x2cc>
 8001e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d103      	bne.n	8001e1e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001e1c:	e029      	b.n	8001e72 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1a2      	bne.n	8001d6e <HAL_SPI_TransmitReceive+0x224>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d19d      	bne.n	8001d6e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 f904 	bl	8002044 <SPI_EndRxTxTransaction>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d006      	beq.n	8001e50 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001e4e:	e010      	b.n	8001e72 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10b      	bne.n	8001e70 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	e000      	b.n	8001e72 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001e70:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001e82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3730      	adds	r7, #48	; 0x30
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b088      	sub	sp, #32
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001ea0:	f7fe fdfe 	bl	8000aa0 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea8:	1a9b      	subs	r3, r3, r2
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	4413      	add	r3, r2
 8001eae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001eb0:	f7fe fdf6 	bl	8000aa0 <HAL_GetTick>
 8001eb4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001eb6:	4b39      	ldr	r3, [pc, #228]	; (8001f9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	015b      	lsls	r3, r3, #5
 8001ebc:	0d1b      	lsrs	r3, r3, #20
 8001ebe:	69fa      	ldr	r2, [r7, #28]
 8001ec0:	fb02 f303 	mul.w	r3, r2, r3
 8001ec4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ec6:	e054      	b.n	8001f72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ece:	d050      	beq.n	8001f72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001ed0:	f7fe fde6 	bl	8000aa0 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	69fa      	ldr	r2, [r7, #28]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d902      	bls.n	8001ee6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d13d      	bne.n	8001f62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001ef4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001efe:	d111      	bne.n	8001f24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f08:	d004      	beq.n	8001f14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f12:	d107      	bne.n	8001f24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f2c:	d10f      	bne.n	8001f4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e017      	b.n	8001f92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	68ba      	ldr	r2, [r7, #8]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	bf0c      	ite	eq
 8001f82:	2301      	moveq	r3, #1
 8001f84:	2300      	movne	r3, #0
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	461a      	mov	r2, r3
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d19b      	bne.n	8001ec8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3720      	adds	r7, #32
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000030 	.word	0x20000030

08001fa0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af02      	add	r7, sp, #8
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fb4:	d111      	bne.n	8001fda <SPI_EndRxTransaction+0x3a>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fbe:	d004      	beq.n	8001fca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fc8:	d107      	bne.n	8001fda <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fd8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fe2:	d117      	bne.n	8002014 <SPI_EndRxTransaction+0x74>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fec:	d112      	bne.n	8002014 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f7ff ff49 	bl	8001e90 <SPI_WaitFlagStateUntilTimeout>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d01a      	beq.n	800203a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002008:	f043 0220 	orr.w	r2, r3, #32
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e013      	b.n	800203c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2200      	movs	r2, #0
 800201c:	2180      	movs	r1, #128	; 0x80
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f7ff ff36 	bl	8001e90 <SPI_WaitFlagStateUntilTimeout>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d007      	beq.n	800203a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202e:	f043 0220 	orr.w	r2, r3, #32
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e000      	b.n	800203c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af02      	add	r7, sp, #8
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2200      	movs	r2, #0
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f7ff ff18 	bl	8001e90 <SPI_WaitFlagStateUntilTimeout>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d007      	beq.n	8002076 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206a:	f043 0220 	orr.w	r2, r3, #32
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e000      	b.n	8002078 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <__errno>:
 8002080:	4b01      	ldr	r3, [pc, #4]	; (8002088 <__errno+0x8>)
 8002082:	6818      	ldr	r0, [r3, #0]
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	2000003c 	.word	0x2000003c

0800208c <__libc_init_array>:
 800208c:	b570      	push	{r4, r5, r6, lr}
 800208e:	2600      	movs	r6, #0
 8002090:	4d0c      	ldr	r5, [pc, #48]	; (80020c4 <__libc_init_array+0x38>)
 8002092:	4c0d      	ldr	r4, [pc, #52]	; (80020c8 <__libc_init_array+0x3c>)
 8002094:	1b64      	subs	r4, r4, r5
 8002096:	10a4      	asrs	r4, r4, #2
 8002098:	42a6      	cmp	r6, r4
 800209a:	d109      	bne.n	80020b0 <__libc_init_array+0x24>
 800209c:	f000 fd22 	bl	8002ae4 <_init>
 80020a0:	2600      	movs	r6, #0
 80020a2:	4d0a      	ldr	r5, [pc, #40]	; (80020cc <__libc_init_array+0x40>)
 80020a4:	4c0a      	ldr	r4, [pc, #40]	; (80020d0 <__libc_init_array+0x44>)
 80020a6:	1b64      	subs	r4, r4, r5
 80020a8:	10a4      	asrs	r4, r4, #2
 80020aa:	42a6      	cmp	r6, r4
 80020ac:	d105      	bne.n	80020ba <__libc_init_array+0x2e>
 80020ae:	bd70      	pop	{r4, r5, r6, pc}
 80020b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80020b4:	4798      	blx	r3
 80020b6:	3601      	adds	r6, #1
 80020b8:	e7ee      	b.n	8002098 <__libc_init_array+0xc>
 80020ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80020be:	4798      	blx	r3
 80020c0:	3601      	adds	r6, #1
 80020c2:	e7f2      	b.n	80020aa <__libc_init_array+0x1e>
 80020c4:	08002c78 	.word	0x08002c78
 80020c8:	08002c78 	.word	0x08002c78
 80020cc:	08002c78 	.word	0x08002c78
 80020d0:	08002c7c 	.word	0x08002c7c

080020d4 <memset>:
 80020d4:	4603      	mov	r3, r0
 80020d6:	4402      	add	r2, r0
 80020d8:	4293      	cmp	r3, r2
 80020da:	d100      	bne.n	80020de <memset+0xa>
 80020dc:	4770      	bx	lr
 80020de:	f803 1b01 	strb.w	r1, [r3], #1
 80020e2:	e7f9      	b.n	80020d8 <memset+0x4>

080020e4 <siprintf>:
 80020e4:	b40e      	push	{r1, r2, r3}
 80020e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80020ea:	b500      	push	{lr}
 80020ec:	b09c      	sub	sp, #112	; 0x70
 80020ee:	ab1d      	add	r3, sp, #116	; 0x74
 80020f0:	9002      	str	r0, [sp, #8]
 80020f2:	9006      	str	r0, [sp, #24]
 80020f4:	9107      	str	r1, [sp, #28]
 80020f6:	9104      	str	r1, [sp, #16]
 80020f8:	4808      	ldr	r0, [pc, #32]	; (800211c <siprintf+0x38>)
 80020fa:	4909      	ldr	r1, [pc, #36]	; (8002120 <siprintf+0x3c>)
 80020fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002100:	9105      	str	r1, [sp, #20]
 8002102:	6800      	ldr	r0, [r0, #0]
 8002104:	a902      	add	r1, sp, #8
 8002106:	9301      	str	r3, [sp, #4]
 8002108:	f000 f8ee 	bl	80022e8 <_svfiprintf_r>
 800210c:	2200      	movs	r2, #0
 800210e:	9b02      	ldr	r3, [sp, #8]
 8002110:	701a      	strb	r2, [r3, #0]
 8002112:	b01c      	add	sp, #112	; 0x70
 8002114:	f85d eb04 	ldr.w	lr, [sp], #4
 8002118:	b003      	add	sp, #12
 800211a:	4770      	bx	lr
 800211c:	2000003c 	.word	0x2000003c
 8002120:	ffff0208 	.word	0xffff0208

08002124 <_strtol_l.constprop.0>:
 8002124:	2b01      	cmp	r3, #1
 8002126:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800212a:	4680      	mov	r8, r0
 800212c:	d001      	beq.n	8002132 <_strtol_l.constprop.0+0xe>
 800212e:	2b24      	cmp	r3, #36	; 0x24
 8002130:	d906      	bls.n	8002140 <_strtol_l.constprop.0+0x1c>
 8002132:	f7ff ffa5 	bl	8002080 <__errno>
 8002136:	2316      	movs	r3, #22
 8002138:	6003      	str	r3, [r0, #0]
 800213a:	2000      	movs	r0, #0
 800213c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002140:	460d      	mov	r5, r1
 8002142:	4f35      	ldr	r7, [pc, #212]	; (8002218 <_strtol_l.constprop.0+0xf4>)
 8002144:	4628      	mov	r0, r5
 8002146:	f815 4b01 	ldrb.w	r4, [r5], #1
 800214a:	5de6      	ldrb	r6, [r4, r7]
 800214c:	f016 0608 	ands.w	r6, r6, #8
 8002150:	d1f8      	bne.n	8002144 <_strtol_l.constprop.0+0x20>
 8002152:	2c2d      	cmp	r4, #45	; 0x2d
 8002154:	d12f      	bne.n	80021b6 <_strtol_l.constprop.0+0x92>
 8002156:	2601      	movs	r6, #1
 8002158:	782c      	ldrb	r4, [r5, #0]
 800215a:	1c85      	adds	r5, r0, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d057      	beq.n	8002210 <_strtol_l.constprop.0+0xec>
 8002160:	2b10      	cmp	r3, #16
 8002162:	d109      	bne.n	8002178 <_strtol_l.constprop.0+0x54>
 8002164:	2c30      	cmp	r4, #48	; 0x30
 8002166:	d107      	bne.n	8002178 <_strtol_l.constprop.0+0x54>
 8002168:	7828      	ldrb	r0, [r5, #0]
 800216a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800216e:	2858      	cmp	r0, #88	; 0x58
 8002170:	d149      	bne.n	8002206 <_strtol_l.constprop.0+0xe2>
 8002172:	2310      	movs	r3, #16
 8002174:	786c      	ldrb	r4, [r5, #1]
 8002176:	3502      	adds	r5, #2
 8002178:	2700      	movs	r7, #0
 800217a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800217e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8002182:	fbbe f9f3 	udiv	r9, lr, r3
 8002186:	4638      	mov	r0, r7
 8002188:	fb03 ea19 	mls	sl, r3, r9, lr
 800218c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8002190:	f1bc 0f09 	cmp.w	ip, #9
 8002194:	d814      	bhi.n	80021c0 <_strtol_l.constprop.0+0x9c>
 8002196:	4664      	mov	r4, ip
 8002198:	42a3      	cmp	r3, r4
 800219a:	dd22      	ble.n	80021e2 <_strtol_l.constprop.0+0xbe>
 800219c:	2f00      	cmp	r7, #0
 800219e:	db1d      	blt.n	80021dc <_strtol_l.constprop.0+0xb8>
 80021a0:	4581      	cmp	r9, r0
 80021a2:	d31b      	bcc.n	80021dc <_strtol_l.constprop.0+0xb8>
 80021a4:	d101      	bne.n	80021aa <_strtol_l.constprop.0+0x86>
 80021a6:	45a2      	cmp	sl, r4
 80021a8:	db18      	blt.n	80021dc <_strtol_l.constprop.0+0xb8>
 80021aa:	2701      	movs	r7, #1
 80021ac:	fb00 4003 	mla	r0, r0, r3, r4
 80021b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80021b4:	e7ea      	b.n	800218c <_strtol_l.constprop.0+0x68>
 80021b6:	2c2b      	cmp	r4, #43	; 0x2b
 80021b8:	bf04      	itt	eq
 80021ba:	782c      	ldrbeq	r4, [r5, #0]
 80021bc:	1c85      	addeq	r5, r0, #2
 80021be:	e7cd      	b.n	800215c <_strtol_l.constprop.0+0x38>
 80021c0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80021c4:	f1bc 0f19 	cmp.w	ip, #25
 80021c8:	d801      	bhi.n	80021ce <_strtol_l.constprop.0+0xaa>
 80021ca:	3c37      	subs	r4, #55	; 0x37
 80021cc:	e7e4      	b.n	8002198 <_strtol_l.constprop.0+0x74>
 80021ce:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80021d2:	f1bc 0f19 	cmp.w	ip, #25
 80021d6:	d804      	bhi.n	80021e2 <_strtol_l.constprop.0+0xbe>
 80021d8:	3c57      	subs	r4, #87	; 0x57
 80021da:	e7dd      	b.n	8002198 <_strtol_l.constprop.0+0x74>
 80021dc:	f04f 37ff 	mov.w	r7, #4294967295
 80021e0:	e7e6      	b.n	80021b0 <_strtol_l.constprop.0+0x8c>
 80021e2:	2f00      	cmp	r7, #0
 80021e4:	da07      	bge.n	80021f6 <_strtol_l.constprop.0+0xd2>
 80021e6:	2322      	movs	r3, #34	; 0x22
 80021e8:	4670      	mov	r0, lr
 80021ea:	f8c8 3000 	str.w	r3, [r8]
 80021ee:	2a00      	cmp	r2, #0
 80021f0:	d0a4      	beq.n	800213c <_strtol_l.constprop.0+0x18>
 80021f2:	1e69      	subs	r1, r5, #1
 80021f4:	e005      	b.n	8002202 <_strtol_l.constprop.0+0xde>
 80021f6:	b106      	cbz	r6, 80021fa <_strtol_l.constprop.0+0xd6>
 80021f8:	4240      	negs	r0, r0
 80021fa:	2a00      	cmp	r2, #0
 80021fc:	d09e      	beq.n	800213c <_strtol_l.constprop.0+0x18>
 80021fe:	2f00      	cmp	r7, #0
 8002200:	d1f7      	bne.n	80021f2 <_strtol_l.constprop.0+0xce>
 8002202:	6011      	str	r1, [r2, #0]
 8002204:	e79a      	b.n	800213c <_strtol_l.constprop.0+0x18>
 8002206:	2430      	movs	r4, #48	; 0x30
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1b5      	bne.n	8002178 <_strtol_l.constprop.0+0x54>
 800220c:	2308      	movs	r3, #8
 800220e:	e7b3      	b.n	8002178 <_strtol_l.constprop.0+0x54>
 8002210:	2c30      	cmp	r4, #48	; 0x30
 8002212:	d0a9      	beq.n	8002168 <_strtol_l.constprop.0+0x44>
 8002214:	230a      	movs	r3, #10
 8002216:	e7af      	b.n	8002178 <_strtol_l.constprop.0+0x54>
 8002218:	08002b45 	.word	0x08002b45

0800221c <strtol>:
 800221c:	4613      	mov	r3, r2
 800221e:	460a      	mov	r2, r1
 8002220:	4601      	mov	r1, r0
 8002222:	4802      	ldr	r0, [pc, #8]	; (800222c <strtol+0x10>)
 8002224:	6800      	ldr	r0, [r0, #0]
 8002226:	f7ff bf7d 	b.w	8002124 <_strtol_l.constprop.0>
 800222a:	bf00      	nop
 800222c:	2000003c 	.word	0x2000003c

08002230 <__ssputs_r>:
 8002230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002234:	688e      	ldr	r6, [r1, #8]
 8002236:	4682      	mov	sl, r0
 8002238:	429e      	cmp	r6, r3
 800223a:	460c      	mov	r4, r1
 800223c:	4690      	mov	r8, r2
 800223e:	461f      	mov	r7, r3
 8002240:	d838      	bhi.n	80022b4 <__ssputs_r+0x84>
 8002242:	898a      	ldrh	r2, [r1, #12]
 8002244:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002248:	d032      	beq.n	80022b0 <__ssputs_r+0x80>
 800224a:	6825      	ldr	r5, [r4, #0]
 800224c:	6909      	ldr	r1, [r1, #16]
 800224e:	3301      	adds	r3, #1
 8002250:	eba5 0901 	sub.w	r9, r5, r1
 8002254:	6965      	ldr	r5, [r4, #20]
 8002256:	444b      	add	r3, r9
 8002258:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800225c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002260:	106d      	asrs	r5, r5, #1
 8002262:	429d      	cmp	r5, r3
 8002264:	bf38      	it	cc
 8002266:	461d      	movcc	r5, r3
 8002268:	0553      	lsls	r3, r2, #21
 800226a:	d531      	bpl.n	80022d0 <__ssputs_r+0xa0>
 800226c:	4629      	mov	r1, r5
 800226e:	f000 fb6f 	bl	8002950 <_malloc_r>
 8002272:	4606      	mov	r6, r0
 8002274:	b950      	cbnz	r0, 800228c <__ssputs_r+0x5c>
 8002276:	230c      	movs	r3, #12
 8002278:	f04f 30ff 	mov.w	r0, #4294967295
 800227c:	f8ca 3000 	str.w	r3, [sl]
 8002280:	89a3      	ldrh	r3, [r4, #12]
 8002282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002286:	81a3      	strh	r3, [r4, #12]
 8002288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800228c:	464a      	mov	r2, r9
 800228e:	6921      	ldr	r1, [r4, #16]
 8002290:	f000 face 	bl	8002830 <memcpy>
 8002294:	89a3      	ldrh	r3, [r4, #12]
 8002296:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800229a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800229e:	81a3      	strh	r3, [r4, #12]
 80022a0:	6126      	str	r6, [r4, #16]
 80022a2:	444e      	add	r6, r9
 80022a4:	6026      	str	r6, [r4, #0]
 80022a6:	463e      	mov	r6, r7
 80022a8:	6165      	str	r5, [r4, #20]
 80022aa:	eba5 0509 	sub.w	r5, r5, r9
 80022ae:	60a5      	str	r5, [r4, #8]
 80022b0:	42be      	cmp	r6, r7
 80022b2:	d900      	bls.n	80022b6 <__ssputs_r+0x86>
 80022b4:	463e      	mov	r6, r7
 80022b6:	4632      	mov	r2, r6
 80022b8:	4641      	mov	r1, r8
 80022ba:	6820      	ldr	r0, [r4, #0]
 80022bc:	f000 fac6 	bl	800284c <memmove>
 80022c0:	68a3      	ldr	r3, [r4, #8]
 80022c2:	2000      	movs	r0, #0
 80022c4:	1b9b      	subs	r3, r3, r6
 80022c6:	60a3      	str	r3, [r4, #8]
 80022c8:	6823      	ldr	r3, [r4, #0]
 80022ca:	4433      	add	r3, r6
 80022cc:	6023      	str	r3, [r4, #0]
 80022ce:	e7db      	b.n	8002288 <__ssputs_r+0x58>
 80022d0:	462a      	mov	r2, r5
 80022d2:	f000 fbb1 	bl	8002a38 <_realloc_r>
 80022d6:	4606      	mov	r6, r0
 80022d8:	2800      	cmp	r0, #0
 80022da:	d1e1      	bne.n	80022a0 <__ssputs_r+0x70>
 80022dc:	4650      	mov	r0, sl
 80022de:	6921      	ldr	r1, [r4, #16]
 80022e0:	f000 face 	bl	8002880 <_free_r>
 80022e4:	e7c7      	b.n	8002276 <__ssputs_r+0x46>
	...

080022e8 <_svfiprintf_r>:
 80022e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022ec:	4698      	mov	r8, r3
 80022ee:	898b      	ldrh	r3, [r1, #12]
 80022f0:	4607      	mov	r7, r0
 80022f2:	061b      	lsls	r3, r3, #24
 80022f4:	460d      	mov	r5, r1
 80022f6:	4614      	mov	r4, r2
 80022f8:	b09d      	sub	sp, #116	; 0x74
 80022fa:	d50e      	bpl.n	800231a <_svfiprintf_r+0x32>
 80022fc:	690b      	ldr	r3, [r1, #16]
 80022fe:	b963      	cbnz	r3, 800231a <_svfiprintf_r+0x32>
 8002300:	2140      	movs	r1, #64	; 0x40
 8002302:	f000 fb25 	bl	8002950 <_malloc_r>
 8002306:	6028      	str	r0, [r5, #0]
 8002308:	6128      	str	r0, [r5, #16]
 800230a:	b920      	cbnz	r0, 8002316 <_svfiprintf_r+0x2e>
 800230c:	230c      	movs	r3, #12
 800230e:	603b      	str	r3, [r7, #0]
 8002310:	f04f 30ff 	mov.w	r0, #4294967295
 8002314:	e0d1      	b.n	80024ba <_svfiprintf_r+0x1d2>
 8002316:	2340      	movs	r3, #64	; 0x40
 8002318:	616b      	str	r3, [r5, #20]
 800231a:	2300      	movs	r3, #0
 800231c:	9309      	str	r3, [sp, #36]	; 0x24
 800231e:	2320      	movs	r3, #32
 8002320:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002324:	2330      	movs	r3, #48	; 0x30
 8002326:	f04f 0901 	mov.w	r9, #1
 800232a:	f8cd 800c 	str.w	r8, [sp, #12]
 800232e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80024d4 <_svfiprintf_r+0x1ec>
 8002332:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002336:	4623      	mov	r3, r4
 8002338:	469a      	mov	sl, r3
 800233a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800233e:	b10a      	cbz	r2, 8002344 <_svfiprintf_r+0x5c>
 8002340:	2a25      	cmp	r2, #37	; 0x25
 8002342:	d1f9      	bne.n	8002338 <_svfiprintf_r+0x50>
 8002344:	ebba 0b04 	subs.w	fp, sl, r4
 8002348:	d00b      	beq.n	8002362 <_svfiprintf_r+0x7a>
 800234a:	465b      	mov	r3, fp
 800234c:	4622      	mov	r2, r4
 800234e:	4629      	mov	r1, r5
 8002350:	4638      	mov	r0, r7
 8002352:	f7ff ff6d 	bl	8002230 <__ssputs_r>
 8002356:	3001      	adds	r0, #1
 8002358:	f000 80aa 	beq.w	80024b0 <_svfiprintf_r+0x1c8>
 800235c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800235e:	445a      	add	r2, fp
 8002360:	9209      	str	r2, [sp, #36]	; 0x24
 8002362:	f89a 3000 	ldrb.w	r3, [sl]
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 80a2 	beq.w	80024b0 <_svfiprintf_r+0x1c8>
 800236c:	2300      	movs	r3, #0
 800236e:	f04f 32ff 	mov.w	r2, #4294967295
 8002372:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002376:	f10a 0a01 	add.w	sl, sl, #1
 800237a:	9304      	str	r3, [sp, #16]
 800237c:	9307      	str	r3, [sp, #28]
 800237e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002382:	931a      	str	r3, [sp, #104]	; 0x68
 8002384:	4654      	mov	r4, sl
 8002386:	2205      	movs	r2, #5
 8002388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800238c:	4851      	ldr	r0, [pc, #324]	; (80024d4 <_svfiprintf_r+0x1ec>)
 800238e:	f000 fa41 	bl	8002814 <memchr>
 8002392:	9a04      	ldr	r2, [sp, #16]
 8002394:	b9d8      	cbnz	r0, 80023ce <_svfiprintf_r+0xe6>
 8002396:	06d0      	lsls	r0, r2, #27
 8002398:	bf44      	itt	mi
 800239a:	2320      	movmi	r3, #32
 800239c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80023a0:	0711      	lsls	r1, r2, #28
 80023a2:	bf44      	itt	mi
 80023a4:	232b      	movmi	r3, #43	; 0x2b
 80023a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80023aa:	f89a 3000 	ldrb.w	r3, [sl]
 80023ae:	2b2a      	cmp	r3, #42	; 0x2a
 80023b0:	d015      	beq.n	80023de <_svfiprintf_r+0xf6>
 80023b2:	4654      	mov	r4, sl
 80023b4:	2000      	movs	r0, #0
 80023b6:	f04f 0c0a 	mov.w	ip, #10
 80023ba:	9a07      	ldr	r2, [sp, #28]
 80023bc:	4621      	mov	r1, r4
 80023be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80023c2:	3b30      	subs	r3, #48	; 0x30
 80023c4:	2b09      	cmp	r3, #9
 80023c6:	d94e      	bls.n	8002466 <_svfiprintf_r+0x17e>
 80023c8:	b1b0      	cbz	r0, 80023f8 <_svfiprintf_r+0x110>
 80023ca:	9207      	str	r2, [sp, #28]
 80023cc:	e014      	b.n	80023f8 <_svfiprintf_r+0x110>
 80023ce:	eba0 0308 	sub.w	r3, r0, r8
 80023d2:	fa09 f303 	lsl.w	r3, r9, r3
 80023d6:	4313      	orrs	r3, r2
 80023d8:	46a2      	mov	sl, r4
 80023da:	9304      	str	r3, [sp, #16]
 80023dc:	e7d2      	b.n	8002384 <_svfiprintf_r+0x9c>
 80023de:	9b03      	ldr	r3, [sp, #12]
 80023e0:	1d19      	adds	r1, r3, #4
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	9103      	str	r1, [sp, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	bfbb      	ittet	lt
 80023ea:	425b      	neglt	r3, r3
 80023ec:	f042 0202 	orrlt.w	r2, r2, #2
 80023f0:	9307      	strge	r3, [sp, #28]
 80023f2:	9307      	strlt	r3, [sp, #28]
 80023f4:	bfb8      	it	lt
 80023f6:	9204      	strlt	r2, [sp, #16]
 80023f8:	7823      	ldrb	r3, [r4, #0]
 80023fa:	2b2e      	cmp	r3, #46	; 0x2e
 80023fc:	d10c      	bne.n	8002418 <_svfiprintf_r+0x130>
 80023fe:	7863      	ldrb	r3, [r4, #1]
 8002400:	2b2a      	cmp	r3, #42	; 0x2a
 8002402:	d135      	bne.n	8002470 <_svfiprintf_r+0x188>
 8002404:	9b03      	ldr	r3, [sp, #12]
 8002406:	3402      	adds	r4, #2
 8002408:	1d1a      	adds	r2, r3, #4
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	9203      	str	r2, [sp, #12]
 800240e:	2b00      	cmp	r3, #0
 8002410:	bfb8      	it	lt
 8002412:	f04f 33ff 	movlt.w	r3, #4294967295
 8002416:	9305      	str	r3, [sp, #20]
 8002418:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80024d8 <_svfiprintf_r+0x1f0>
 800241c:	2203      	movs	r2, #3
 800241e:	4650      	mov	r0, sl
 8002420:	7821      	ldrb	r1, [r4, #0]
 8002422:	f000 f9f7 	bl	8002814 <memchr>
 8002426:	b140      	cbz	r0, 800243a <_svfiprintf_r+0x152>
 8002428:	2340      	movs	r3, #64	; 0x40
 800242a:	eba0 000a 	sub.w	r0, r0, sl
 800242e:	fa03 f000 	lsl.w	r0, r3, r0
 8002432:	9b04      	ldr	r3, [sp, #16]
 8002434:	3401      	adds	r4, #1
 8002436:	4303      	orrs	r3, r0
 8002438:	9304      	str	r3, [sp, #16]
 800243a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800243e:	2206      	movs	r2, #6
 8002440:	4826      	ldr	r0, [pc, #152]	; (80024dc <_svfiprintf_r+0x1f4>)
 8002442:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002446:	f000 f9e5 	bl	8002814 <memchr>
 800244a:	2800      	cmp	r0, #0
 800244c:	d038      	beq.n	80024c0 <_svfiprintf_r+0x1d8>
 800244e:	4b24      	ldr	r3, [pc, #144]	; (80024e0 <_svfiprintf_r+0x1f8>)
 8002450:	bb1b      	cbnz	r3, 800249a <_svfiprintf_r+0x1b2>
 8002452:	9b03      	ldr	r3, [sp, #12]
 8002454:	3307      	adds	r3, #7
 8002456:	f023 0307 	bic.w	r3, r3, #7
 800245a:	3308      	adds	r3, #8
 800245c:	9303      	str	r3, [sp, #12]
 800245e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002460:	4433      	add	r3, r6
 8002462:	9309      	str	r3, [sp, #36]	; 0x24
 8002464:	e767      	b.n	8002336 <_svfiprintf_r+0x4e>
 8002466:	460c      	mov	r4, r1
 8002468:	2001      	movs	r0, #1
 800246a:	fb0c 3202 	mla	r2, ip, r2, r3
 800246e:	e7a5      	b.n	80023bc <_svfiprintf_r+0xd4>
 8002470:	2300      	movs	r3, #0
 8002472:	f04f 0c0a 	mov.w	ip, #10
 8002476:	4619      	mov	r1, r3
 8002478:	3401      	adds	r4, #1
 800247a:	9305      	str	r3, [sp, #20]
 800247c:	4620      	mov	r0, r4
 800247e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002482:	3a30      	subs	r2, #48	; 0x30
 8002484:	2a09      	cmp	r2, #9
 8002486:	d903      	bls.n	8002490 <_svfiprintf_r+0x1a8>
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0c5      	beq.n	8002418 <_svfiprintf_r+0x130>
 800248c:	9105      	str	r1, [sp, #20]
 800248e:	e7c3      	b.n	8002418 <_svfiprintf_r+0x130>
 8002490:	4604      	mov	r4, r0
 8002492:	2301      	movs	r3, #1
 8002494:	fb0c 2101 	mla	r1, ip, r1, r2
 8002498:	e7f0      	b.n	800247c <_svfiprintf_r+0x194>
 800249a:	ab03      	add	r3, sp, #12
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	462a      	mov	r2, r5
 80024a0:	4638      	mov	r0, r7
 80024a2:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <_svfiprintf_r+0x1fc>)
 80024a4:	a904      	add	r1, sp, #16
 80024a6:	f3af 8000 	nop.w
 80024aa:	1c42      	adds	r2, r0, #1
 80024ac:	4606      	mov	r6, r0
 80024ae:	d1d6      	bne.n	800245e <_svfiprintf_r+0x176>
 80024b0:	89ab      	ldrh	r3, [r5, #12]
 80024b2:	065b      	lsls	r3, r3, #25
 80024b4:	f53f af2c 	bmi.w	8002310 <_svfiprintf_r+0x28>
 80024b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80024ba:	b01d      	add	sp, #116	; 0x74
 80024bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024c0:	ab03      	add	r3, sp, #12
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	462a      	mov	r2, r5
 80024c6:	4638      	mov	r0, r7
 80024c8:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <_svfiprintf_r+0x1fc>)
 80024ca:	a904      	add	r1, sp, #16
 80024cc:	f000 f87c 	bl	80025c8 <_printf_i>
 80024d0:	e7eb      	b.n	80024aa <_svfiprintf_r+0x1c2>
 80024d2:	bf00      	nop
 80024d4:	08002c45 	.word	0x08002c45
 80024d8:	08002c4b 	.word	0x08002c4b
 80024dc:	08002c4f 	.word	0x08002c4f
 80024e0:	00000000 	.word	0x00000000
 80024e4:	08002231 	.word	0x08002231

080024e8 <_printf_common>:
 80024e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024ec:	4616      	mov	r6, r2
 80024ee:	4699      	mov	r9, r3
 80024f0:	688a      	ldr	r2, [r1, #8]
 80024f2:	690b      	ldr	r3, [r1, #16]
 80024f4:	4607      	mov	r7, r0
 80024f6:	4293      	cmp	r3, r2
 80024f8:	bfb8      	it	lt
 80024fa:	4613      	movlt	r3, r2
 80024fc:	6033      	str	r3, [r6, #0]
 80024fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002502:	460c      	mov	r4, r1
 8002504:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002508:	b10a      	cbz	r2, 800250e <_printf_common+0x26>
 800250a:	3301      	adds	r3, #1
 800250c:	6033      	str	r3, [r6, #0]
 800250e:	6823      	ldr	r3, [r4, #0]
 8002510:	0699      	lsls	r1, r3, #26
 8002512:	bf42      	ittt	mi
 8002514:	6833      	ldrmi	r3, [r6, #0]
 8002516:	3302      	addmi	r3, #2
 8002518:	6033      	strmi	r3, [r6, #0]
 800251a:	6825      	ldr	r5, [r4, #0]
 800251c:	f015 0506 	ands.w	r5, r5, #6
 8002520:	d106      	bne.n	8002530 <_printf_common+0x48>
 8002522:	f104 0a19 	add.w	sl, r4, #25
 8002526:	68e3      	ldr	r3, [r4, #12]
 8002528:	6832      	ldr	r2, [r6, #0]
 800252a:	1a9b      	subs	r3, r3, r2
 800252c:	42ab      	cmp	r3, r5
 800252e:	dc28      	bgt.n	8002582 <_printf_common+0x9a>
 8002530:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002534:	1e13      	subs	r3, r2, #0
 8002536:	6822      	ldr	r2, [r4, #0]
 8002538:	bf18      	it	ne
 800253a:	2301      	movne	r3, #1
 800253c:	0692      	lsls	r2, r2, #26
 800253e:	d42d      	bmi.n	800259c <_printf_common+0xb4>
 8002540:	4649      	mov	r1, r9
 8002542:	4638      	mov	r0, r7
 8002544:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002548:	47c0      	blx	r8
 800254a:	3001      	adds	r0, #1
 800254c:	d020      	beq.n	8002590 <_printf_common+0xa8>
 800254e:	6823      	ldr	r3, [r4, #0]
 8002550:	68e5      	ldr	r5, [r4, #12]
 8002552:	f003 0306 	and.w	r3, r3, #6
 8002556:	2b04      	cmp	r3, #4
 8002558:	bf18      	it	ne
 800255a:	2500      	movne	r5, #0
 800255c:	6832      	ldr	r2, [r6, #0]
 800255e:	f04f 0600 	mov.w	r6, #0
 8002562:	68a3      	ldr	r3, [r4, #8]
 8002564:	bf08      	it	eq
 8002566:	1aad      	subeq	r5, r5, r2
 8002568:	6922      	ldr	r2, [r4, #16]
 800256a:	bf08      	it	eq
 800256c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002570:	4293      	cmp	r3, r2
 8002572:	bfc4      	itt	gt
 8002574:	1a9b      	subgt	r3, r3, r2
 8002576:	18ed      	addgt	r5, r5, r3
 8002578:	341a      	adds	r4, #26
 800257a:	42b5      	cmp	r5, r6
 800257c:	d11a      	bne.n	80025b4 <_printf_common+0xcc>
 800257e:	2000      	movs	r0, #0
 8002580:	e008      	b.n	8002594 <_printf_common+0xac>
 8002582:	2301      	movs	r3, #1
 8002584:	4652      	mov	r2, sl
 8002586:	4649      	mov	r1, r9
 8002588:	4638      	mov	r0, r7
 800258a:	47c0      	blx	r8
 800258c:	3001      	adds	r0, #1
 800258e:	d103      	bne.n	8002598 <_printf_common+0xb0>
 8002590:	f04f 30ff 	mov.w	r0, #4294967295
 8002594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002598:	3501      	adds	r5, #1
 800259a:	e7c4      	b.n	8002526 <_printf_common+0x3e>
 800259c:	2030      	movs	r0, #48	; 0x30
 800259e:	18e1      	adds	r1, r4, r3
 80025a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80025aa:	4422      	add	r2, r4
 80025ac:	3302      	adds	r3, #2
 80025ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80025b2:	e7c5      	b.n	8002540 <_printf_common+0x58>
 80025b4:	2301      	movs	r3, #1
 80025b6:	4622      	mov	r2, r4
 80025b8:	4649      	mov	r1, r9
 80025ba:	4638      	mov	r0, r7
 80025bc:	47c0      	blx	r8
 80025be:	3001      	adds	r0, #1
 80025c0:	d0e6      	beq.n	8002590 <_printf_common+0xa8>
 80025c2:	3601      	adds	r6, #1
 80025c4:	e7d9      	b.n	800257a <_printf_common+0x92>
	...

080025c8 <_printf_i>:
 80025c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80025cc:	7e0f      	ldrb	r7, [r1, #24]
 80025ce:	4691      	mov	r9, r2
 80025d0:	2f78      	cmp	r7, #120	; 0x78
 80025d2:	4680      	mov	r8, r0
 80025d4:	460c      	mov	r4, r1
 80025d6:	469a      	mov	sl, r3
 80025d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80025da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80025de:	d807      	bhi.n	80025f0 <_printf_i+0x28>
 80025e0:	2f62      	cmp	r7, #98	; 0x62
 80025e2:	d80a      	bhi.n	80025fa <_printf_i+0x32>
 80025e4:	2f00      	cmp	r7, #0
 80025e6:	f000 80d9 	beq.w	800279c <_printf_i+0x1d4>
 80025ea:	2f58      	cmp	r7, #88	; 0x58
 80025ec:	f000 80a4 	beq.w	8002738 <_printf_i+0x170>
 80025f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80025f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80025f8:	e03a      	b.n	8002670 <_printf_i+0xa8>
 80025fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80025fe:	2b15      	cmp	r3, #21
 8002600:	d8f6      	bhi.n	80025f0 <_printf_i+0x28>
 8002602:	a101      	add	r1, pc, #4	; (adr r1, 8002608 <_printf_i+0x40>)
 8002604:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002608:	08002661 	.word	0x08002661
 800260c:	08002675 	.word	0x08002675
 8002610:	080025f1 	.word	0x080025f1
 8002614:	080025f1 	.word	0x080025f1
 8002618:	080025f1 	.word	0x080025f1
 800261c:	080025f1 	.word	0x080025f1
 8002620:	08002675 	.word	0x08002675
 8002624:	080025f1 	.word	0x080025f1
 8002628:	080025f1 	.word	0x080025f1
 800262c:	080025f1 	.word	0x080025f1
 8002630:	080025f1 	.word	0x080025f1
 8002634:	08002783 	.word	0x08002783
 8002638:	080026a5 	.word	0x080026a5
 800263c:	08002765 	.word	0x08002765
 8002640:	080025f1 	.word	0x080025f1
 8002644:	080025f1 	.word	0x080025f1
 8002648:	080027a5 	.word	0x080027a5
 800264c:	080025f1 	.word	0x080025f1
 8002650:	080026a5 	.word	0x080026a5
 8002654:	080025f1 	.word	0x080025f1
 8002658:	080025f1 	.word	0x080025f1
 800265c:	0800276d 	.word	0x0800276d
 8002660:	682b      	ldr	r3, [r5, #0]
 8002662:	1d1a      	adds	r2, r3, #4
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	602a      	str	r2, [r5, #0]
 8002668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800266c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002670:	2301      	movs	r3, #1
 8002672:	e0a4      	b.n	80027be <_printf_i+0x1f6>
 8002674:	6820      	ldr	r0, [r4, #0]
 8002676:	6829      	ldr	r1, [r5, #0]
 8002678:	0606      	lsls	r6, r0, #24
 800267a:	f101 0304 	add.w	r3, r1, #4
 800267e:	d50a      	bpl.n	8002696 <_printf_i+0xce>
 8002680:	680e      	ldr	r6, [r1, #0]
 8002682:	602b      	str	r3, [r5, #0]
 8002684:	2e00      	cmp	r6, #0
 8002686:	da03      	bge.n	8002690 <_printf_i+0xc8>
 8002688:	232d      	movs	r3, #45	; 0x2d
 800268a:	4276      	negs	r6, r6
 800268c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002690:	230a      	movs	r3, #10
 8002692:	485e      	ldr	r0, [pc, #376]	; (800280c <_printf_i+0x244>)
 8002694:	e019      	b.n	80026ca <_printf_i+0x102>
 8002696:	680e      	ldr	r6, [r1, #0]
 8002698:	f010 0f40 	tst.w	r0, #64	; 0x40
 800269c:	602b      	str	r3, [r5, #0]
 800269e:	bf18      	it	ne
 80026a0:	b236      	sxthne	r6, r6
 80026a2:	e7ef      	b.n	8002684 <_printf_i+0xbc>
 80026a4:	682b      	ldr	r3, [r5, #0]
 80026a6:	6820      	ldr	r0, [r4, #0]
 80026a8:	1d19      	adds	r1, r3, #4
 80026aa:	6029      	str	r1, [r5, #0]
 80026ac:	0601      	lsls	r1, r0, #24
 80026ae:	d501      	bpl.n	80026b4 <_printf_i+0xec>
 80026b0:	681e      	ldr	r6, [r3, #0]
 80026b2:	e002      	b.n	80026ba <_printf_i+0xf2>
 80026b4:	0646      	lsls	r6, r0, #25
 80026b6:	d5fb      	bpl.n	80026b0 <_printf_i+0xe8>
 80026b8:	881e      	ldrh	r6, [r3, #0]
 80026ba:	2f6f      	cmp	r7, #111	; 0x6f
 80026bc:	bf0c      	ite	eq
 80026be:	2308      	moveq	r3, #8
 80026c0:	230a      	movne	r3, #10
 80026c2:	4852      	ldr	r0, [pc, #328]	; (800280c <_printf_i+0x244>)
 80026c4:	2100      	movs	r1, #0
 80026c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80026ca:	6865      	ldr	r5, [r4, #4]
 80026cc:	2d00      	cmp	r5, #0
 80026ce:	bfa8      	it	ge
 80026d0:	6821      	ldrge	r1, [r4, #0]
 80026d2:	60a5      	str	r5, [r4, #8]
 80026d4:	bfa4      	itt	ge
 80026d6:	f021 0104 	bicge.w	r1, r1, #4
 80026da:	6021      	strge	r1, [r4, #0]
 80026dc:	b90e      	cbnz	r6, 80026e2 <_printf_i+0x11a>
 80026de:	2d00      	cmp	r5, #0
 80026e0:	d04d      	beq.n	800277e <_printf_i+0x1b6>
 80026e2:	4615      	mov	r5, r2
 80026e4:	fbb6 f1f3 	udiv	r1, r6, r3
 80026e8:	fb03 6711 	mls	r7, r3, r1, r6
 80026ec:	5dc7      	ldrb	r7, [r0, r7]
 80026ee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80026f2:	4637      	mov	r7, r6
 80026f4:	42bb      	cmp	r3, r7
 80026f6:	460e      	mov	r6, r1
 80026f8:	d9f4      	bls.n	80026e4 <_printf_i+0x11c>
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d10b      	bne.n	8002716 <_printf_i+0x14e>
 80026fe:	6823      	ldr	r3, [r4, #0]
 8002700:	07de      	lsls	r6, r3, #31
 8002702:	d508      	bpl.n	8002716 <_printf_i+0x14e>
 8002704:	6923      	ldr	r3, [r4, #16]
 8002706:	6861      	ldr	r1, [r4, #4]
 8002708:	4299      	cmp	r1, r3
 800270a:	bfde      	ittt	le
 800270c:	2330      	movle	r3, #48	; 0x30
 800270e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002712:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002716:	1b52      	subs	r2, r2, r5
 8002718:	6122      	str	r2, [r4, #16]
 800271a:	464b      	mov	r3, r9
 800271c:	4621      	mov	r1, r4
 800271e:	4640      	mov	r0, r8
 8002720:	f8cd a000 	str.w	sl, [sp]
 8002724:	aa03      	add	r2, sp, #12
 8002726:	f7ff fedf 	bl	80024e8 <_printf_common>
 800272a:	3001      	adds	r0, #1
 800272c:	d14c      	bne.n	80027c8 <_printf_i+0x200>
 800272e:	f04f 30ff 	mov.w	r0, #4294967295
 8002732:	b004      	add	sp, #16
 8002734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002738:	4834      	ldr	r0, [pc, #208]	; (800280c <_printf_i+0x244>)
 800273a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800273e:	6829      	ldr	r1, [r5, #0]
 8002740:	6823      	ldr	r3, [r4, #0]
 8002742:	f851 6b04 	ldr.w	r6, [r1], #4
 8002746:	6029      	str	r1, [r5, #0]
 8002748:	061d      	lsls	r5, r3, #24
 800274a:	d514      	bpl.n	8002776 <_printf_i+0x1ae>
 800274c:	07df      	lsls	r7, r3, #31
 800274e:	bf44      	itt	mi
 8002750:	f043 0320 	orrmi.w	r3, r3, #32
 8002754:	6023      	strmi	r3, [r4, #0]
 8002756:	b91e      	cbnz	r6, 8002760 <_printf_i+0x198>
 8002758:	6823      	ldr	r3, [r4, #0]
 800275a:	f023 0320 	bic.w	r3, r3, #32
 800275e:	6023      	str	r3, [r4, #0]
 8002760:	2310      	movs	r3, #16
 8002762:	e7af      	b.n	80026c4 <_printf_i+0xfc>
 8002764:	6823      	ldr	r3, [r4, #0]
 8002766:	f043 0320 	orr.w	r3, r3, #32
 800276a:	6023      	str	r3, [r4, #0]
 800276c:	2378      	movs	r3, #120	; 0x78
 800276e:	4828      	ldr	r0, [pc, #160]	; (8002810 <_printf_i+0x248>)
 8002770:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002774:	e7e3      	b.n	800273e <_printf_i+0x176>
 8002776:	0659      	lsls	r1, r3, #25
 8002778:	bf48      	it	mi
 800277a:	b2b6      	uxthmi	r6, r6
 800277c:	e7e6      	b.n	800274c <_printf_i+0x184>
 800277e:	4615      	mov	r5, r2
 8002780:	e7bb      	b.n	80026fa <_printf_i+0x132>
 8002782:	682b      	ldr	r3, [r5, #0]
 8002784:	6826      	ldr	r6, [r4, #0]
 8002786:	1d18      	adds	r0, r3, #4
 8002788:	6961      	ldr	r1, [r4, #20]
 800278a:	6028      	str	r0, [r5, #0]
 800278c:	0635      	lsls	r5, r6, #24
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	d501      	bpl.n	8002796 <_printf_i+0x1ce>
 8002792:	6019      	str	r1, [r3, #0]
 8002794:	e002      	b.n	800279c <_printf_i+0x1d4>
 8002796:	0670      	lsls	r0, r6, #25
 8002798:	d5fb      	bpl.n	8002792 <_printf_i+0x1ca>
 800279a:	8019      	strh	r1, [r3, #0]
 800279c:	2300      	movs	r3, #0
 800279e:	4615      	mov	r5, r2
 80027a0:	6123      	str	r3, [r4, #16]
 80027a2:	e7ba      	b.n	800271a <_printf_i+0x152>
 80027a4:	682b      	ldr	r3, [r5, #0]
 80027a6:	2100      	movs	r1, #0
 80027a8:	1d1a      	adds	r2, r3, #4
 80027aa:	602a      	str	r2, [r5, #0]
 80027ac:	681d      	ldr	r5, [r3, #0]
 80027ae:	6862      	ldr	r2, [r4, #4]
 80027b0:	4628      	mov	r0, r5
 80027b2:	f000 f82f 	bl	8002814 <memchr>
 80027b6:	b108      	cbz	r0, 80027bc <_printf_i+0x1f4>
 80027b8:	1b40      	subs	r0, r0, r5
 80027ba:	6060      	str	r0, [r4, #4]
 80027bc:	6863      	ldr	r3, [r4, #4]
 80027be:	6123      	str	r3, [r4, #16]
 80027c0:	2300      	movs	r3, #0
 80027c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80027c6:	e7a8      	b.n	800271a <_printf_i+0x152>
 80027c8:	462a      	mov	r2, r5
 80027ca:	4649      	mov	r1, r9
 80027cc:	4640      	mov	r0, r8
 80027ce:	6923      	ldr	r3, [r4, #16]
 80027d0:	47d0      	blx	sl
 80027d2:	3001      	adds	r0, #1
 80027d4:	d0ab      	beq.n	800272e <_printf_i+0x166>
 80027d6:	6823      	ldr	r3, [r4, #0]
 80027d8:	079b      	lsls	r3, r3, #30
 80027da:	d413      	bmi.n	8002804 <_printf_i+0x23c>
 80027dc:	68e0      	ldr	r0, [r4, #12]
 80027de:	9b03      	ldr	r3, [sp, #12]
 80027e0:	4298      	cmp	r0, r3
 80027e2:	bfb8      	it	lt
 80027e4:	4618      	movlt	r0, r3
 80027e6:	e7a4      	b.n	8002732 <_printf_i+0x16a>
 80027e8:	2301      	movs	r3, #1
 80027ea:	4632      	mov	r2, r6
 80027ec:	4649      	mov	r1, r9
 80027ee:	4640      	mov	r0, r8
 80027f0:	47d0      	blx	sl
 80027f2:	3001      	adds	r0, #1
 80027f4:	d09b      	beq.n	800272e <_printf_i+0x166>
 80027f6:	3501      	adds	r5, #1
 80027f8:	68e3      	ldr	r3, [r4, #12]
 80027fa:	9903      	ldr	r1, [sp, #12]
 80027fc:	1a5b      	subs	r3, r3, r1
 80027fe:	42ab      	cmp	r3, r5
 8002800:	dcf2      	bgt.n	80027e8 <_printf_i+0x220>
 8002802:	e7eb      	b.n	80027dc <_printf_i+0x214>
 8002804:	2500      	movs	r5, #0
 8002806:	f104 0619 	add.w	r6, r4, #25
 800280a:	e7f5      	b.n	80027f8 <_printf_i+0x230>
 800280c:	08002c56 	.word	0x08002c56
 8002810:	08002c67 	.word	0x08002c67

08002814 <memchr>:
 8002814:	4603      	mov	r3, r0
 8002816:	b510      	push	{r4, lr}
 8002818:	b2c9      	uxtb	r1, r1
 800281a:	4402      	add	r2, r0
 800281c:	4293      	cmp	r3, r2
 800281e:	4618      	mov	r0, r3
 8002820:	d101      	bne.n	8002826 <memchr+0x12>
 8002822:	2000      	movs	r0, #0
 8002824:	e003      	b.n	800282e <memchr+0x1a>
 8002826:	7804      	ldrb	r4, [r0, #0]
 8002828:	3301      	adds	r3, #1
 800282a:	428c      	cmp	r4, r1
 800282c:	d1f6      	bne.n	800281c <memchr+0x8>
 800282e:	bd10      	pop	{r4, pc}

08002830 <memcpy>:
 8002830:	440a      	add	r2, r1
 8002832:	4291      	cmp	r1, r2
 8002834:	f100 33ff 	add.w	r3, r0, #4294967295
 8002838:	d100      	bne.n	800283c <memcpy+0xc>
 800283a:	4770      	bx	lr
 800283c:	b510      	push	{r4, lr}
 800283e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002842:	4291      	cmp	r1, r2
 8002844:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002848:	d1f9      	bne.n	800283e <memcpy+0xe>
 800284a:	bd10      	pop	{r4, pc}

0800284c <memmove>:
 800284c:	4288      	cmp	r0, r1
 800284e:	b510      	push	{r4, lr}
 8002850:	eb01 0402 	add.w	r4, r1, r2
 8002854:	d902      	bls.n	800285c <memmove+0x10>
 8002856:	4284      	cmp	r4, r0
 8002858:	4623      	mov	r3, r4
 800285a:	d807      	bhi.n	800286c <memmove+0x20>
 800285c:	1e43      	subs	r3, r0, #1
 800285e:	42a1      	cmp	r1, r4
 8002860:	d008      	beq.n	8002874 <memmove+0x28>
 8002862:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002866:	f803 2f01 	strb.w	r2, [r3, #1]!
 800286a:	e7f8      	b.n	800285e <memmove+0x12>
 800286c:	4601      	mov	r1, r0
 800286e:	4402      	add	r2, r0
 8002870:	428a      	cmp	r2, r1
 8002872:	d100      	bne.n	8002876 <memmove+0x2a>
 8002874:	bd10      	pop	{r4, pc}
 8002876:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800287a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800287e:	e7f7      	b.n	8002870 <memmove+0x24>

08002880 <_free_r>:
 8002880:	b538      	push	{r3, r4, r5, lr}
 8002882:	4605      	mov	r5, r0
 8002884:	2900      	cmp	r1, #0
 8002886:	d040      	beq.n	800290a <_free_r+0x8a>
 8002888:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800288c:	1f0c      	subs	r4, r1, #4
 800288e:	2b00      	cmp	r3, #0
 8002890:	bfb8      	it	lt
 8002892:	18e4      	addlt	r4, r4, r3
 8002894:	f000 f910 	bl	8002ab8 <__malloc_lock>
 8002898:	4a1c      	ldr	r2, [pc, #112]	; (800290c <_free_r+0x8c>)
 800289a:	6813      	ldr	r3, [r2, #0]
 800289c:	b933      	cbnz	r3, 80028ac <_free_r+0x2c>
 800289e:	6063      	str	r3, [r4, #4]
 80028a0:	6014      	str	r4, [r2, #0]
 80028a2:	4628      	mov	r0, r5
 80028a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80028a8:	f000 b90c 	b.w	8002ac4 <__malloc_unlock>
 80028ac:	42a3      	cmp	r3, r4
 80028ae:	d908      	bls.n	80028c2 <_free_r+0x42>
 80028b0:	6820      	ldr	r0, [r4, #0]
 80028b2:	1821      	adds	r1, r4, r0
 80028b4:	428b      	cmp	r3, r1
 80028b6:	bf01      	itttt	eq
 80028b8:	6819      	ldreq	r1, [r3, #0]
 80028ba:	685b      	ldreq	r3, [r3, #4]
 80028bc:	1809      	addeq	r1, r1, r0
 80028be:	6021      	streq	r1, [r4, #0]
 80028c0:	e7ed      	b.n	800289e <_free_r+0x1e>
 80028c2:	461a      	mov	r2, r3
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	b10b      	cbz	r3, 80028cc <_free_r+0x4c>
 80028c8:	42a3      	cmp	r3, r4
 80028ca:	d9fa      	bls.n	80028c2 <_free_r+0x42>
 80028cc:	6811      	ldr	r1, [r2, #0]
 80028ce:	1850      	adds	r0, r2, r1
 80028d0:	42a0      	cmp	r0, r4
 80028d2:	d10b      	bne.n	80028ec <_free_r+0x6c>
 80028d4:	6820      	ldr	r0, [r4, #0]
 80028d6:	4401      	add	r1, r0
 80028d8:	1850      	adds	r0, r2, r1
 80028da:	4283      	cmp	r3, r0
 80028dc:	6011      	str	r1, [r2, #0]
 80028de:	d1e0      	bne.n	80028a2 <_free_r+0x22>
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	4401      	add	r1, r0
 80028e6:	6011      	str	r1, [r2, #0]
 80028e8:	6053      	str	r3, [r2, #4]
 80028ea:	e7da      	b.n	80028a2 <_free_r+0x22>
 80028ec:	d902      	bls.n	80028f4 <_free_r+0x74>
 80028ee:	230c      	movs	r3, #12
 80028f0:	602b      	str	r3, [r5, #0]
 80028f2:	e7d6      	b.n	80028a2 <_free_r+0x22>
 80028f4:	6820      	ldr	r0, [r4, #0]
 80028f6:	1821      	adds	r1, r4, r0
 80028f8:	428b      	cmp	r3, r1
 80028fa:	bf01      	itttt	eq
 80028fc:	6819      	ldreq	r1, [r3, #0]
 80028fe:	685b      	ldreq	r3, [r3, #4]
 8002900:	1809      	addeq	r1, r1, r0
 8002902:	6021      	streq	r1, [r4, #0]
 8002904:	6063      	str	r3, [r4, #4]
 8002906:	6054      	str	r4, [r2, #4]
 8002908:	e7cb      	b.n	80028a2 <_free_r+0x22>
 800290a:	bd38      	pop	{r3, r4, r5, pc}
 800290c:	2000011c 	.word	0x2000011c

08002910 <sbrk_aligned>:
 8002910:	b570      	push	{r4, r5, r6, lr}
 8002912:	4e0e      	ldr	r6, [pc, #56]	; (800294c <sbrk_aligned+0x3c>)
 8002914:	460c      	mov	r4, r1
 8002916:	6831      	ldr	r1, [r6, #0]
 8002918:	4605      	mov	r5, r0
 800291a:	b911      	cbnz	r1, 8002922 <sbrk_aligned+0x12>
 800291c:	f000 f8bc 	bl	8002a98 <_sbrk_r>
 8002920:	6030      	str	r0, [r6, #0]
 8002922:	4621      	mov	r1, r4
 8002924:	4628      	mov	r0, r5
 8002926:	f000 f8b7 	bl	8002a98 <_sbrk_r>
 800292a:	1c43      	adds	r3, r0, #1
 800292c:	d00a      	beq.n	8002944 <sbrk_aligned+0x34>
 800292e:	1cc4      	adds	r4, r0, #3
 8002930:	f024 0403 	bic.w	r4, r4, #3
 8002934:	42a0      	cmp	r0, r4
 8002936:	d007      	beq.n	8002948 <sbrk_aligned+0x38>
 8002938:	1a21      	subs	r1, r4, r0
 800293a:	4628      	mov	r0, r5
 800293c:	f000 f8ac 	bl	8002a98 <_sbrk_r>
 8002940:	3001      	adds	r0, #1
 8002942:	d101      	bne.n	8002948 <sbrk_aligned+0x38>
 8002944:	f04f 34ff 	mov.w	r4, #4294967295
 8002948:	4620      	mov	r0, r4
 800294a:	bd70      	pop	{r4, r5, r6, pc}
 800294c:	20000120 	.word	0x20000120

08002950 <_malloc_r>:
 8002950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002954:	1ccd      	adds	r5, r1, #3
 8002956:	f025 0503 	bic.w	r5, r5, #3
 800295a:	3508      	adds	r5, #8
 800295c:	2d0c      	cmp	r5, #12
 800295e:	bf38      	it	cc
 8002960:	250c      	movcc	r5, #12
 8002962:	2d00      	cmp	r5, #0
 8002964:	4607      	mov	r7, r0
 8002966:	db01      	blt.n	800296c <_malloc_r+0x1c>
 8002968:	42a9      	cmp	r1, r5
 800296a:	d905      	bls.n	8002978 <_malloc_r+0x28>
 800296c:	230c      	movs	r3, #12
 800296e:	2600      	movs	r6, #0
 8002970:	603b      	str	r3, [r7, #0]
 8002972:	4630      	mov	r0, r6
 8002974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002978:	4e2e      	ldr	r6, [pc, #184]	; (8002a34 <_malloc_r+0xe4>)
 800297a:	f000 f89d 	bl	8002ab8 <__malloc_lock>
 800297e:	6833      	ldr	r3, [r6, #0]
 8002980:	461c      	mov	r4, r3
 8002982:	bb34      	cbnz	r4, 80029d2 <_malloc_r+0x82>
 8002984:	4629      	mov	r1, r5
 8002986:	4638      	mov	r0, r7
 8002988:	f7ff ffc2 	bl	8002910 <sbrk_aligned>
 800298c:	1c43      	adds	r3, r0, #1
 800298e:	4604      	mov	r4, r0
 8002990:	d14d      	bne.n	8002a2e <_malloc_r+0xde>
 8002992:	6834      	ldr	r4, [r6, #0]
 8002994:	4626      	mov	r6, r4
 8002996:	2e00      	cmp	r6, #0
 8002998:	d140      	bne.n	8002a1c <_malloc_r+0xcc>
 800299a:	6823      	ldr	r3, [r4, #0]
 800299c:	4631      	mov	r1, r6
 800299e:	4638      	mov	r0, r7
 80029a0:	eb04 0803 	add.w	r8, r4, r3
 80029a4:	f000 f878 	bl	8002a98 <_sbrk_r>
 80029a8:	4580      	cmp	r8, r0
 80029aa:	d13a      	bne.n	8002a22 <_malloc_r+0xd2>
 80029ac:	6821      	ldr	r1, [r4, #0]
 80029ae:	3503      	adds	r5, #3
 80029b0:	1a6d      	subs	r5, r5, r1
 80029b2:	f025 0503 	bic.w	r5, r5, #3
 80029b6:	3508      	adds	r5, #8
 80029b8:	2d0c      	cmp	r5, #12
 80029ba:	bf38      	it	cc
 80029bc:	250c      	movcc	r5, #12
 80029be:	4638      	mov	r0, r7
 80029c0:	4629      	mov	r1, r5
 80029c2:	f7ff ffa5 	bl	8002910 <sbrk_aligned>
 80029c6:	3001      	adds	r0, #1
 80029c8:	d02b      	beq.n	8002a22 <_malloc_r+0xd2>
 80029ca:	6823      	ldr	r3, [r4, #0]
 80029cc:	442b      	add	r3, r5
 80029ce:	6023      	str	r3, [r4, #0]
 80029d0:	e00e      	b.n	80029f0 <_malloc_r+0xa0>
 80029d2:	6822      	ldr	r2, [r4, #0]
 80029d4:	1b52      	subs	r2, r2, r5
 80029d6:	d41e      	bmi.n	8002a16 <_malloc_r+0xc6>
 80029d8:	2a0b      	cmp	r2, #11
 80029da:	d916      	bls.n	8002a0a <_malloc_r+0xba>
 80029dc:	1961      	adds	r1, r4, r5
 80029de:	42a3      	cmp	r3, r4
 80029e0:	6025      	str	r5, [r4, #0]
 80029e2:	bf18      	it	ne
 80029e4:	6059      	strne	r1, [r3, #4]
 80029e6:	6863      	ldr	r3, [r4, #4]
 80029e8:	bf08      	it	eq
 80029ea:	6031      	streq	r1, [r6, #0]
 80029ec:	5162      	str	r2, [r4, r5]
 80029ee:	604b      	str	r3, [r1, #4]
 80029f0:	4638      	mov	r0, r7
 80029f2:	f104 060b 	add.w	r6, r4, #11
 80029f6:	f000 f865 	bl	8002ac4 <__malloc_unlock>
 80029fa:	f026 0607 	bic.w	r6, r6, #7
 80029fe:	1d23      	adds	r3, r4, #4
 8002a00:	1af2      	subs	r2, r6, r3
 8002a02:	d0b6      	beq.n	8002972 <_malloc_r+0x22>
 8002a04:	1b9b      	subs	r3, r3, r6
 8002a06:	50a3      	str	r3, [r4, r2]
 8002a08:	e7b3      	b.n	8002972 <_malloc_r+0x22>
 8002a0a:	6862      	ldr	r2, [r4, #4]
 8002a0c:	42a3      	cmp	r3, r4
 8002a0e:	bf0c      	ite	eq
 8002a10:	6032      	streq	r2, [r6, #0]
 8002a12:	605a      	strne	r2, [r3, #4]
 8002a14:	e7ec      	b.n	80029f0 <_malloc_r+0xa0>
 8002a16:	4623      	mov	r3, r4
 8002a18:	6864      	ldr	r4, [r4, #4]
 8002a1a:	e7b2      	b.n	8002982 <_malloc_r+0x32>
 8002a1c:	4634      	mov	r4, r6
 8002a1e:	6876      	ldr	r6, [r6, #4]
 8002a20:	e7b9      	b.n	8002996 <_malloc_r+0x46>
 8002a22:	230c      	movs	r3, #12
 8002a24:	4638      	mov	r0, r7
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	f000 f84c 	bl	8002ac4 <__malloc_unlock>
 8002a2c:	e7a1      	b.n	8002972 <_malloc_r+0x22>
 8002a2e:	6025      	str	r5, [r4, #0]
 8002a30:	e7de      	b.n	80029f0 <_malloc_r+0xa0>
 8002a32:	bf00      	nop
 8002a34:	2000011c 	.word	0x2000011c

08002a38 <_realloc_r>:
 8002a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a3c:	4680      	mov	r8, r0
 8002a3e:	4614      	mov	r4, r2
 8002a40:	460e      	mov	r6, r1
 8002a42:	b921      	cbnz	r1, 8002a4e <_realloc_r+0x16>
 8002a44:	4611      	mov	r1, r2
 8002a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a4a:	f7ff bf81 	b.w	8002950 <_malloc_r>
 8002a4e:	b92a      	cbnz	r2, 8002a5c <_realloc_r+0x24>
 8002a50:	f7ff ff16 	bl	8002880 <_free_r>
 8002a54:	4625      	mov	r5, r4
 8002a56:	4628      	mov	r0, r5
 8002a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a5c:	f000 f838 	bl	8002ad0 <_malloc_usable_size_r>
 8002a60:	4284      	cmp	r4, r0
 8002a62:	4607      	mov	r7, r0
 8002a64:	d802      	bhi.n	8002a6c <_realloc_r+0x34>
 8002a66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002a6a:	d812      	bhi.n	8002a92 <_realloc_r+0x5a>
 8002a6c:	4621      	mov	r1, r4
 8002a6e:	4640      	mov	r0, r8
 8002a70:	f7ff ff6e 	bl	8002950 <_malloc_r>
 8002a74:	4605      	mov	r5, r0
 8002a76:	2800      	cmp	r0, #0
 8002a78:	d0ed      	beq.n	8002a56 <_realloc_r+0x1e>
 8002a7a:	42bc      	cmp	r4, r7
 8002a7c:	4622      	mov	r2, r4
 8002a7e:	4631      	mov	r1, r6
 8002a80:	bf28      	it	cs
 8002a82:	463a      	movcs	r2, r7
 8002a84:	f7ff fed4 	bl	8002830 <memcpy>
 8002a88:	4631      	mov	r1, r6
 8002a8a:	4640      	mov	r0, r8
 8002a8c:	f7ff fef8 	bl	8002880 <_free_r>
 8002a90:	e7e1      	b.n	8002a56 <_realloc_r+0x1e>
 8002a92:	4635      	mov	r5, r6
 8002a94:	e7df      	b.n	8002a56 <_realloc_r+0x1e>
	...

08002a98 <_sbrk_r>:
 8002a98:	b538      	push	{r3, r4, r5, lr}
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	4d05      	ldr	r5, [pc, #20]	; (8002ab4 <_sbrk_r+0x1c>)
 8002a9e:	4604      	mov	r4, r0
 8002aa0:	4608      	mov	r0, r1
 8002aa2:	602b      	str	r3, [r5, #0]
 8002aa4:	f7fd ff42 	bl	800092c <_sbrk>
 8002aa8:	1c43      	adds	r3, r0, #1
 8002aaa:	d102      	bne.n	8002ab2 <_sbrk_r+0x1a>
 8002aac:	682b      	ldr	r3, [r5, #0]
 8002aae:	b103      	cbz	r3, 8002ab2 <_sbrk_r+0x1a>
 8002ab0:	6023      	str	r3, [r4, #0]
 8002ab2:	bd38      	pop	{r3, r4, r5, pc}
 8002ab4:	20000124 	.word	0x20000124

08002ab8 <__malloc_lock>:
 8002ab8:	4801      	ldr	r0, [pc, #4]	; (8002ac0 <__malloc_lock+0x8>)
 8002aba:	f000 b811 	b.w	8002ae0 <__retarget_lock_acquire_recursive>
 8002abe:	bf00      	nop
 8002ac0:	20000128 	.word	0x20000128

08002ac4 <__malloc_unlock>:
 8002ac4:	4801      	ldr	r0, [pc, #4]	; (8002acc <__malloc_unlock+0x8>)
 8002ac6:	f000 b80c 	b.w	8002ae2 <__retarget_lock_release_recursive>
 8002aca:	bf00      	nop
 8002acc:	20000128 	.word	0x20000128

08002ad0 <_malloc_usable_size_r>:
 8002ad0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ad4:	1f18      	subs	r0, r3, #4
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	bfbc      	itt	lt
 8002ada:	580b      	ldrlt	r3, [r1, r0]
 8002adc:	18c0      	addlt	r0, r0, r3
 8002ade:	4770      	bx	lr

08002ae0 <__retarget_lock_acquire_recursive>:
 8002ae0:	4770      	bx	lr

08002ae2 <__retarget_lock_release_recursive>:
 8002ae2:	4770      	bx	lr

08002ae4 <_init>:
 8002ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ae6:	bf00      	nop
 8002ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aea:	bc08      	pop	{r3}
 8002aec:	469e      	mov	lr, r3
 8002aee:	4770      	bx	lr

08002af0 <_fini>:
 8002af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af2:	bf00      	nop
 8002af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002af6:	bc08      	pop	{r3}
 8002af8:	469e      	mov	lr, r3
 8002afa:	4770      	bx	lr
