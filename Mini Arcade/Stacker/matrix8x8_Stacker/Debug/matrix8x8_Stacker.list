
matrix8x8_Stacker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023cc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080024d8  080024d8  000124d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024f8  080024f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080024f8  080024f8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024f8  080024f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024f8  080024f8  000124f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024fc  080024fc  000124fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  0800250c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  0800250c  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002de5  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e29  00000000  00000000  00022e1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003d0  00000000  00000000  00023c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000348  00000000  00000000  00024018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001597a  00000000  00000000  00024360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000047ef  00000000  00000000  00039cda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007bc6b  00000000  00000000  0003e4c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ba134  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e3c  00000000  00000000  000ba184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080024c0 	.word	0x080024c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080024c0 	.word	0x080024c0

0800014c <__aeabi_dmul>:
 800014c:	b570      	push	{r4, r5, r6, lr}
 800014e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000152:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000156:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015a:	bf1d      	ittte	ne
 800015c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000160:	ea94 0f0c 	teqne	r4, ip
 8000164:	ea95 0f0c 	teqne	r5, ip
 8000168:	f000 f8de 	bleq	8000328 <__aeabi_dmul+0x1dc>
 800016c:	442c      	add	r4, r5
 800016e:	ea81 0603 	eor.w	r6, r1, r3
 8000172:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000176:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800017e:	bf18      	it	ne
 8000180:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000184:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000188:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800018c:	d038      	beq.n	8000200 <__aeabi_dmul+0xb4>
 800018e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000192:	f04f 0500 	mov.w	r5, #0
 8000196:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800019e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a2:	f04f 0600 	mov.w	r6, #0
 80001a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001aa:	f09c 0f00 	teq	ip, #0
 80001ae:	bf18      	it	ne
 80001b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c0:	d204      	bcs.n	80001cc <__aeabi_dmul+0x80>
 80001c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001c6:	416d      	adcs	r5, r5
 80001c8:	eb46 0606 	adc.w	r6, r6, r6
 80001cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e4:	bf88      	it	hi
 80001e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ea:	d81e      	bhi.n	800022a <__aeabi_dmul+0xde>
 80001ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f0:	bf08      	it	eq
 80001f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001f6:	f150 0000 	adcs.w	r0, r0, #0
 80001fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80001fe:	bd70      	pop	{r4, r5, r6, pc}
 8000200:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000204:	ea46 0101 	orr.w	r1, r6, r1
 8000208:	ea40 0002 	orr.w	r0, r0, r2
 800020c:	ea81 0103 	eor.w	r1, r1, r3
 8000210:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000214:	bfc2      	ittt	gt
 8000216:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800021e:	bd70      	popgt	{r4, r5, r6, pc}
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000224:	f04f 0e00 	mov.w	lr, #0
 8000228:	3c01      	subs	r4, #1
 800022a:	f300 80ab 	bgt.w	8000384 <__aeabi_dmul+0x238>
 800022e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000232:	bfde      	ittt	le
 8000234:	2000      	movle	r0, #0
 8000236:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023a:	bd70      	pople	{r4, r5, r6, pc}
 800023c:	f1c4 0400 	rsb	r4, r4, #0
 8000240:	3c20      	subs	r4, #32
 8000242:	da35      	bge.n	80002b0 <__aeabi_dmul+0x164>
 8000244:	340c      	adds	r4, #12
 8000246:	dc1b      	bgt.n	8000280 <__aeabi_dmul+0x134>
 8000248:	f104 0414 	add.w	r4, r4, #20
 800024c:	f1c4 0520 	rsb	r5, r4, #32
 8000250:	fa00 f305 	lsl.w	r3, r0, r5
 8000254:	fa20 f004 	lsr.w	r0, r0, r4
 8000258:	fa01 f205 	lsl.w	r2, r1, r5
 800025c:	ea40 0002 	orr.w	r0, r0, r2
 8000260:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000264:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000268:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800026c:	fa21 f604 	lsr.w	r6, r1, r4
 8000270:	eb42 0106 	adc.w	r1, r2, r6
 8000274:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000278:	bf08      	it	eq
 800027a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800027e:	bd70      	pop	{r4, r5, r6, pc}
 8000280:	f1c4 040c 	rsb	r4, r4, #12
 8000284:	f1c4 0520 	rsb	r5, r4, #32
 8000288:	fa00 f304 	lsl.w	r3, r0, r4
 800028c:	fa20 f005 	lsr.w	r0, r0, r5
 8000290:	fa01 f204 	lsl.w	r2, r1, r4
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800029c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a0:	f141 0100 	adc.w	r1, r1, #0
 80002a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002a8:	bf08      	it	eq
 80002aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ae:	bd70      	pop	{r4, r5, r6, pc}
 80002b0:	f1c4 0520 	rsb	r5, r4, #32
 80002b4:	fa00 f205 	lsl.w	r2, r0, r5
 80002b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80002bc:	fa20 f304 	lsr.w	r3, r0, r4
 80002c0:	fa01 f205 	lsl.w	r2, r1, r5
 80002c4:	ea43 0302 	orr.w	r3, r3, r2
 80002c8:	fa21 f004 	lsr.w	r0, r1, r4
 80002cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d0:	fa21 f204 	lsr.w	r2, r1, r4
 80002d4:	ea20 0002 	bic.w	r0, r0, r2
 80002d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e0:	bf08      	it	eq
 80002e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002e6:	bd70      	pop	{r4, r5, r6, pc}
 80002e8:	f094 0f00 	teq	r4, #0
 80002ec:	d10f      	bne.n	800030e <__aeabi_dmul+0x1c2>
 80002ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f2:	0040      	lsls	r0, r0, #1
 80002f4:	eb41 0101 	adc.w	r1, r1, r1
 80002f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002fc:	bf08      	it	eq
 80002fe:	3c01      	subeq	r4, #1
 8000300:	d0f7      	beq.n	80002f2 <__aeabi_dmul+0x1a6>
 8000302:	ea41 0106 	orr.w	r1, r1, r6
 8000306:	f095 0f00 	teq	r5, #0
 800030a:	bf18      	it	ne
 800030c:	4770      	bxne	lr
 800030e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000312:	0052      	lsls	r2, r2, #1
 8000314:	eb43 0303 	adc.w	r3, r3, r3
 8000318:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800031c:	bf08      	it	eq
 800031e:	3d01      	subeq	r5, #1
 8000320:	d0f7      	beq.n	8000312 <__aeabi_dmul+0x1c6>
 8000322:	ea43 0306 	orr.w	r3, r3, r6
 8000326:	4770      	bx	lr
 8000328:	ea94 0f0c 	teq	r4, ip
 800032c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000330:	bf18      	it	ne
 8000332:	ea95 0f0c 	teqne	r5, ip
 8000336:	d00c      	beq.n	8000352 <__aeabi_dmul+0x206>
 8000338:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800033c:	bf18      	it	ne
 800033e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000342:	d1d1      	bne.n	80002e8 <__aeabi_dmul+0x19c>
 8000344:	ea81 0103 	eor.w	r1, r1, r3
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	f04f 0000 	mov.w	r0, #0
 8000350:	bd70      	pop	{r4, r5, r6, pc}
 8000352:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000356:	bf06      	itte	eq
 8000358:	4610      	moveq	r0, r2
 800035a:	4619      	moveq	r1, r3
 800035c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000360:	d019      	beq.n	8000396 <__aeabi_dmul+0x24a>
 8000362:	ea94 0f0c 	teq	r4, ip
 8000366:	d102      	bne.n	800036e <__aeabi_dmul+0x222>
 8000368:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800036c:	d113      	bne.n	8000396 <__aeabi_dmul+0x24a>
 800036e:	ea95 0f0c 	teq	r5, ip
 8000372:	d105      	bne.n	8000380 <__aeabi_dmul+0x234>
 8000374:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000378:	bf1c      	itt	ne
 800037a:	4610      	movne	r0, r2
 800037c:	4619      	movne	r1, r3
 800037e:	d10a      	bne.n	8000396 <__aeabi_dmul+0x24a>
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000388:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800038c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000390:	f04f 0000 	mov.w	r0, #0
 8000394:	bd70      	pop	{r4, r5, r6, pc}
 8000396:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800039e:	bd70      	pop	{r4, r5, r6, pc}

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	; 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_d2iz>:
 8000718:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800071c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000720:	d215      	bcs.n	800074e <__aeabi_d2iz+0x36>
 8000722:	d511      	bpl.n	8000748 <__aeabi_d2iz+0x30>
 8000724:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000728:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800072c:	d912      	bls.n	8000754 <__aeabi_d2iz+0x3c>
 800072e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000732:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000736:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	bf18      	it	ne
 8000744:	4240      	negne	r0, r0
 8000746:	4770      	bx	lr
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	4770      	bx	lr
 800074e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000752:	d105      	bne.n	8000760 <__aeabi_d2iz+0x48>
 8000754:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000758:	bf08      	it	eq
 800075a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800075e:	4770      	bx	lr
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop

08000768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b0ba      	sub	sp, #232	; 0xe8
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076e:	f000 ff75 	bl	800165c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000772:	f000 fe3d 	bl	80013f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000776:	f000 fe77 	bl	8001468 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  GPIO_PinState col[8][8];
  GPIO_PinState stack[8][8];

  int row_cnt = -1;
 800077a:	f04f 33ff 	mov.w	r3, #4294967295
 800077e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  int size = 3;
 8000782:	2303      	movs	r3, #3
 8000784:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  int speed = 125;
 8000788:	237d      	movs	r3, #125	; 0x7d
 800078a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  int butt = 1;
 800078e:	2301      	movs	r3, #1
 8000790:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  int count = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  int offset = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  int dir = 1;
 80007a0:	2301      	movs	r3, #1
 80007a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  int deb_cnt = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  int deb = 25;
 80007ac:	2319      	movs	r3, #25
 80007ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  int end_cnt = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  int pause_cnt = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

  for (int i=0; i<8; i++){
 80007be:	2300      	movs	r3, #0
 80007c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80007c4:	e01c      	b.n	8000800 <main+0x98>
	  for (int j=0; j<8; j++){
 80007c6:	2300      	movs	r3, #0
 80007c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80007cc:	e00f      	b.n	80007ee <main+0x86>
	  col[i][j] = GPIO_PIN_RESET;
 80007ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	33e8      	adds	r3, #232	; 0xe8
 80007d6:	19da      	adds	r2, r3, r7
 80007d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80007dc:	4413      	add	r3, r2
 80007de:	3ba8      	subs	r3, #168	; 0xa8
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
	  for (int j=0; j<8; j++){
 80007e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80007e8:	3301      	adds	r3, #1
 80007ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80007ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80007f2:	2b07      	cmp	r3, #7
 80007f4:	ddeb      	ble.n	80007ce <main+0x66>
  for (int i=0; i<8; i++){
 80007f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80007fa:	3301      	adds	r3, #1
 80007fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000800:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000804:	2b07      	cmp	r3, #7
 8000806:	ddde      	ble.n	80007c6 <main+0x5e>
	  }
  }

  for (int i=0; i<8; i++){
 8000808:	2300      	movs	r3, #0
 800080a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800080e:	e01c      	b.n	800084a <main+0xe2>
  	  for (int j=0; j<8; j++){
 8000810:	2300      	movs	r3, #0
 8000812:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000816:	e00f      	b.n	8000838 <main+0xd0>
  	  stack[i][j] = GPIO_PIN_RESET;
 8000818:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	33e8      	adds	r3, #232	; 0xe8
 8000820:	19da      	adds	r2, r3, r7
 8000822:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000826:	4413      	add	r3, r2
 8000828:	3be8      	subs	r3, #232	; 0xe8
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
  	  for (int j=0; j<8; j++){
 800082e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000832:	3301      	adds	r3, #1
 8000834:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000838:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800083c:	2b07      	cmp	r3, #7
 800083e:	ddeb      	ble.n	8000818 <main+0xb0>
  for (int i=0; i<8; i++){
 8000840:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000844:	3301      	adds	r3, #1
 8000846:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800084a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800084e:	2b07      	cmp	r3, #7
 8000850:	ddde      	ble.n	8000810 <main+0xa8>
  	  }
    }

  col[4][4] = GPIO_PIN_SET;
 8000852:	2301      	movs	r3, #1
 8000854:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	2101      	movs	r1, #1
 800085c:	48d9      	ldr	r0, [pc, #868]	; (8000bc4 <main+0x45c>)
 800085e:	f001 fa02 	bl	8001c66 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	2102      	movs	r1, #2
 8000866:	48d7      	ldr	r0, [pc, #860]	; (8000bc4 <main+0x45c>)
 8000868:	f001 f9fd 	bl	8001c66 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800086c:	2201      	movs	r2, #1
 800086e:	2108      	movs	r1, #8
 8000870:	48d4      	ldr	r0, [pc, #848]	; (8000bc4 <main+0x45c>)
 8000872:	f001 f9f8 	bl	8001c66 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000876:	2201      	movs	r2, #1
 8000878:	2110      	movs	r1, #16
 800087a:	48d2      	ldr	r0, [pc, #840]	; (8000bc4 <main+0x45c>)
 800087c:	f001 f9f3 	bl	8001c66 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000880:	2201      	movs	r2, #1
 8000882:	2120      	movs	r1, #32
 8000884:	48cf      	ldr	r0, [pc, #828]	; (8000bc4 <main+0x45c>)
 8000886:	f001 f9ee 	bl	8001c66 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800088a:	2201      	movs	r2, #1
 800088c:	2140      	movs	r1, #64	; 0x40
 800088e:	48cd      	ldr	r0, [pc, #820]	; (8000bc4 <main+0x45c>)
 8000890:	f001 f9e9 	bl	8001c66 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	2180      	movs	r1, #128	; 0x80
 8000898:	48ca      	ldr	r0, [pc, #808]	; (8000bc4 <main+0x45c>)
 800089a:	f001 f9e4 	bl	8001c66 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800089e:	2201      	movs	r2, #1
 80008a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a4:	48c7      	ldr	r0, [pc, #796]	; (8000bc4 <main+0x45c>)
 80008a6:	f001 f9de 	bl	8001c66 <HAL_GPIO_WritePin>
  while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == GPIO_PIN_SET)
 80008aa:	bf00      	nop
 80008ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008b0:	48c4      	ldr	r0, [pc, #784]	; (8000bc4 <main+0x45c>)
 80008b2:	f001 f9c1 	bl	8001c38 <HAL_GPIO_ReadPin>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	f040 8591 	bne.w	80013e0 <main+0xc78>
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);	//row 0 scan
 80008be:	2200      	movs	r2, #0
 80008c0:	2101      	movs	r1, #1
 80008c2:	48c0      	ldr	r0, [pc, #768]	; (8000bc4 <main+0x45c>)
 80008c4:	f001 f9cf 	bl	8001c66 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, col[0][0]);
 80008c8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80008cc:	461a      	mov	r2, r3
 80008ce:	2101      	movs	r1, #1
 80008d0:	48bd      	ldr	r0, [pc, #756]	; (8000bc8 <main+0x460>)
 80008d2:	f001 f9c8 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, col[0][1]);
 80008d6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80008da:	461a      	mov	r2, r3
 80008dc:	2102      	movs	r1, #2
 80008de:	48ba      	ldr	r0, [pc, #744]	; (8000bc8 <main+0x460>)
 80008e0:	f001 f9c1 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, col[0][2]);
 80008e4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80008e8:	461a      	mov	r2, r3
 80008ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ee:	48b6      	ldr	r0, [pc, #728]	; (8000bc8 <main+0x460>)
 80008f0:	f001 f9b9 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, col[0][3]);
 80008f4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80008f8:	461a      	mov	r2, r3
 80008fa:	2108      	movs	r1, #8
 80008fc:	48b2      	ldr	r0, [pc, #712]	; (8000bc8 <main+0x460>)
 80008fe:	f001 f9b2 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, col[0][4]);
 8000902:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000906:	461a      	mov	r2, r3
 8000908:	2110      	movs	r1, #16
 800090a:	48af      	ldr	r0, [pc, #700]	; (8000bc8 <main+0x460>)
 800090c:	f001 f9ab 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, col[0][5]);
 8000910:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000914:	461a      	mov	r2, r3
 8000916:	2120      	movs	r1, #32
 8000918:	48ab      	ldr	r0, [pc, #684]	; (8000bc8 <main+0x460>)
 800091a:	f001 f9a4 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, col[0][6]);
 800091e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000922:	461a      	mov	r2, r3
 8000924:	2140      	movs	r1, #64	; 0x40
 8000926:	48a8      	ldr	r0, [pc, #672]	; (8000bc8 <main+0x460>)
 8000928:	f001 f99d 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, col[0][7]);
 800092c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000930:	461a      	mov	r2, r3
 8000932:	2180      	movs	r1, #128	; 0x80
 8000934:	48a4      	ldr	r0, [pc, #656]	; (8000bc8 <main+0x460>)
 8000936:	f001 f996 	bl	8001c66 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2101      	movs	r1, #1
 800093e:	48a2      	ldr	r0, [pc, #648]	; (8000bc8 <main+0x460>)
 8000940:	f001 f991 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	2102      	movs	r1, #2
 8000948:	489f      	ldr	r0, [pc, #636]	; (8000bc8 <main+0x460>)
 800094a:	f001 f98c 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000954:	489c      	ldr	r0, [pc, #624]	; (8000bc8 <main+0x460>)
 8000956:	f001 f986 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	2108      	movs	r1, #8
 800095e:	489a      	ldr	r0, [pc, #616]	; (8000bc8 <main+0x460>)
 8000960:	f001 f981 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	2110      	movs	r1, #16
 8000968:	4897      	ldr	r0, [pc, #604]	; (8000bc8 <main+0x460>)
 800096a:	f001 f97c 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2120      	movs	r1, #32
 8000972:	4895      	ldr	r0, [pc, #596]	; (8000bc8 <main+0x460>)
 8000974:	f001 f977 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	2140      	movs	r1, #64	; 0x40
 800097c:	4892      	ldr	r0, [pc, #584]	; (8000bc8 <main+0x460>)
 800097e:	f001 f972 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2180      	movs	r1, #128	; 0x80
 8000986:	4890      	ldr	r0, [pc, #576]	; (8000bc8 <main+0x460>)
 8000988:	f001 f96d 	bl	8001c66 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800098c:	2201      	movs	r2, #1
 800098e:	2101      	movs	r1, #1
 8000990:	488c      	ldr	r0, [pc, #560]	; (8000bc4 <main+0x45c>)
 8000992:	f001 f968 	bl	8001c66 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);	//row 1 scan
 8000996:	2200      	movs	r2, #0
 8000998:	2102      	movs	r1, #2
 800099a:	488a      	ldr	r0, [pc, #552]	; (8000bc4 <main+0x45c>)
 800099c:	f001 f963 	bl	8001c66 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, col[1][0]);
 80009a0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80009a4:	461a      	mov	r2, r3
 80009a6:	2101      	movs	r1, #1
 80009a8:	4887      	ldr	r0, [pc, #540]	; (8000bc8 <main+0x460>)
 80009aa:	f001 f95c 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, col[1][1]);
 80009ae:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80009b2:	461a      	mov	r2, r3
 80009b4:	2102      	movs	r1, #2
 80009b6:	4884      	ldr	r0, [pc, #528]	; (8000bc8 <main+0x460>)
 80009b8:	f001 f955 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, col[1][2]);
 80009bc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80009c0:	461a      	mov	r2, r3
 80009c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009c6:	4880      	ldr	r0, [pc, #512]	; (8000bc8 <main+0x460>)
 80009c8:	f001 f94d 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, col[1][3]);
 80009cc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80009d0:	461a      	mov	r2, r3
 80009d2:	2108      	movs	r1, #8
 80009d4:	487c      	ldr	r0, [pc, #496]	; (8000bc8 <main+0x460>)
 80009d6:	f001 f946 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, col[1][4]);
 80009da:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80009de:	461a      	mov	r2, r3
 80009e0:	2110      	movs	r1, #16
 80009e2:	4879      	ldr	r0, [pc, #484]	; (8000bc8 <main+0x460>)
 80009e4:	f001 f93f 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, col[1][5]);
 80009e8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80009ec:	461a      	mov	r2, r3
 80009ee:	2120      	movs	r1, #32
 80009f0:	4875      	ldr	r0, [pc, #468]	; (8000bc8 <main+0x460>)
 80009f2:	f001 f938 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, col[1][6]);
 80009f6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80009fa:	461a      	mov	r2, r3
 80009fc:	2140      	movs	r1, #64	; 0x40
 80009fe:	4872      	ldr	r0, [pc, #456]	; (8000bc8 <main+0x460>)
 8000a00:	f001 f931 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, col[1][7]);
 8000a04:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000a08:	461a      	mov	r2, r3
 8000a0a:	2180      	movs	r1, #128	; 0x80
 8000a0c:	486e      	ldr	r0, [pc, #440]	; (8000bc8 <main+0x460>)
 8000a0e:	f001 f92a 	bl	8001c66 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2101      	movs	r1, #1
 8000a16:	486c      	ldr	r0, [pc, #432]	; (8000bc8 <main+0x460>)
 8000a18:	f001 f925 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2102      	movs	r1, #2
 8000a20:	4869      	ldr	r0, [pc, #420]	; (8000bc8 <main+0x460>)
 8000a22:	f001 f920 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a2c:	4866      	ldr	r0, [pc, #408]	; (8000bc8 <main+0x460>)
 8000a2e:	f001 f91a 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2108      	movs	r1, #8
 8000a36:	4864      	ldr	r0, [pc, #400]	; (8000bc8 <main+0x460>)
 8000a38:	f001 f915 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2110      	movs	r1, #16
 8000a40:	4861      	ldr	r0, [pc, #388]	; (8000bc8 <main+0x460>)
 8000a42:	f001 f910 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2120      	movs	r1, #32
 8000a4a:	485f      	ldr	r0, [pc, #380]	; (8000bc8 <main+0x460>)
 8000a4c:	f001 f90b 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2140      	movs	r1, #64	; 0x40
 8000a54:	485c      	ldr	r0, [pc, #368]	; (8000bc8 <main+0x460>)
 8000a56:	f001 f906 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2180      	movs	r1, #128	; 0x80
 8000a5e:	485a      	ldr	r0, [pc, #360]	; (8000bc8 <main+0x460>)
 8000a60:	f001 f901 	bl	8001c66 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2102      	movs	r1, #2
 8000a68:	4856      	ldr	r0, [pc, #344]	; (8000bc4 <main+0x45c>)
 8000a6a:	f001 f8fc 	bl	8001c66 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);	//row 2 scan
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2104      	movs	r1, #4
 8000a72:	4854      	ldr	r0, [pc, #336]	; (8000bc4 <main+0x45c>)
 8000a74:	f001 f8f7 	bl	8001c66 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, col[2][0]);
 8000a78:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	2101      	movs	r1, #1
 8000a80:	4851      	ldr	r0, [pc, #324]	; (8000bc8 <main+0x460>)
 8000a82:	f001 f8f0 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, col[2][1]);
 8000a86:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	2102      	movs	r1, #2
 8000a8e:	484e      	ldr	r0, [pc, #312]	; (8000bc8 <main+0x460>)
 8000a90:	f001 f8e9 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, col[2][2]);
 8000a94:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8000a98:	461a      	mov	r2, r3
 8000a9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a9e:	484a      	ldr	r0, [pc, #296]	; (8000bc8 <main+0x460>)
 8000aa0:	f001 f8e1 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, col[2][3]);
 8000aa4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	2108      	movs	r1, #8
 8000aac:	4846      	ldr	r0, [pc, #280]	; (8000bc8 <main+0x460>)
 8000aae:	f001 f8da 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, col[2][4]);
 8000ab2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	2110      	movs	r1, #16
 8000aba:	4843      	ldr	r0, [pc, #268]	; (8000bc8 <main+0x460>)
 8000abc:	f001 f8d3 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, col[2][5]);
 8000ac0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	2120      	movs	r1, #32
 8000ac8:	483f      	ldr	r0, [pc, #252]	; (8000bc8 <main+0x460>)
 8000aca:	f001 f8cc 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, col[2][6]);
 8000ace:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	2140      	movs	r1, #64	; 0x40
 8000ad6:	483c      	ldr	r0, [pc, #240]	; (8000bc8 <main+0x460>)
 8000ad8:	f001 f8c5 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, col[2][7]);
 8000adc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	2180      	movs	r1, #128	; 0x80
 8000ae4:	4838      	ldr	r0, [pc, #224]	; (8000bc8 <main+0x460>)
 8000ae6:	f001 f8be 	bl	8001c66 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2101      	movs	r1, #1
 8000aee:	4836      	ldr	r0, [pc, #216]	; (8000bc8 <main+0x460>)
 8000af0:	f001 f8b9 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2102      	movs	r1, #2
 8000af8:	4833      	ldr	r0, [pc, #204]	; (8000bc8 <main+0x460>)
 8000afa:	f001 f8b4 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b04:	4830      	ldr	r0, [pc, #192]	; (8000bc8 <main+0x460>)
 8000b06:	f001 f8ae 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2108      	movs	r1, #8
 8000b0e:	482e      	ldr	r0, [pc, #184]	; (8000bc8 <main+0x460>)
 8000b10:	f001 f8a9 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2110      	movs	r1, #16
 8000b18:	482b      	ldr	r0, [pc, #172]	; (8000bc8 <main+0x460>)
 8000b1a:	f001 f8a4 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2120      	movs	r1, #32
 8000b22:	4829      	ldr	r0, [pc, #164]	; (8000bc8 <main+0x460>)
 8000b24:	f001 f89f 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2140      	movs	r1, #64	; 0x40
 8000b2c:	4826      	ldr	r0, [pc, #152]	; (8000bc8 <main+0x460>)
 8000b2e:	f001 f89a 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2180      	movs	r1, #128	; 0x80
 8000b36:	4824      	ldr	r0, [pc, #144]	; (8000bc8 <main+0x460>)
 8000b38:	f001 f895 	bl	8001c66 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	2104      	movs	r1, #4
 8000b40:	4820      	ldr	r0, [pc, #128]	; (8000bc4 <main+0x45c>)
 8000b42:	f001 f890 	bl	8001c66 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);	//row 3 scan
 8000b46:	2200      	movs	r2, #0
 8000b48:	2108      	movs	r1, #8
 8000b4a:	481e      	ldr	r0, [pc, #120]	; (8000bc4 <main+0x45c>)
 8000b4c:	f001 f88b 	bl	8001c66 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, col[3][0]);
 8000b50:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8000b54:	461a      	mov	r2, r3
 8000b56:	2101      	movs	r1, #1
 8000b58:	481b      	ldr	r0, [pc, #108]	; (8000bc8 <main+0x460>)
 8000b5a:	f001 f884 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, col[3][1]);
 8000b5e:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8000b62:	461a      	mov	r2, r3
 8000b64:	2102      	movs	r1, #2
 8000b66:	4818      	ldr	r0, [pc, #96]	; (8000bc8 <main+0x460>)
 8000b68:	f001 f87d 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, col[3][2]);
 8000b6c:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8000b70:	461a      	mov	r2, r3
 8000b72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b76:	4814      	ldr	r0, [pc, #80]	; (8000bc8 <main+0x460>)
 8000b78:	f001 f875 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, col[3][3]);
 8000b7c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000b80:	461a      	mov	r2, r3
 8000b82:	2108      	movs	r1, #8
 8000b84:	4810      	ldr	r0, [pc, #64]	; (8000bc8 <main+0x460>)
 8000b86:	f001 f86e 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, col[3][4]);
 8000b8a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000b8e:	461a      	mov	r2, r3
 8000b90:	2110      	movs	r1, #16
 8000b92:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <main+0x460>)
 8000b94:	f001 f867 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, col[3][5]);
 8000b98:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	2120      	movs	r1, #32
 8000ba0:	4809      	ldr	r0, [pc, #36]	; (8000bc8 <main+0x460>)
 8000ba2:	f001 f860 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, col[3][6]);
 8000ba6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8000baa:	461a      	mov	r2, r3
 8000bac:	2140      	movs	r1, #64	; 0x40
 8000bae:	4806      	ldr	r0, [pc, #24]	; (8000bc8 <main+0x460>)
 8000bb0:	f001 f859 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, col[3][7]);
 8000bb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000bb8:	461a      	mov	r2, r3
 8000bba:	2180      	movs	r1, #128	; 0x80
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <main+0x460>)
 8000bbe:	f001 f852 	bl	8001c66 <HAL_GPIO_WritePin>
 8000bc2:	e003      	b.n	8000bcc <main+0x464>
 8000bc4:	40010800 	.word	0x40010800
 8000bc8:	40010c00 	.word	0x40010c00

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2101      	movs	r1, #1
 8000bd0:	48d9      	ldr	r0, [pc, #868]	; (8000f38 <main+0x7d0>)
 8000bd2:	f001 f848 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2102      	movs	r1, #2
 8000bda:	48d7      	ldr	r0, [pc, #860]	; (8000f38 <main+0x7d0>)
 8000bdc:	f001 f843 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000be6:	48d4      	ldr	r0, [pc, #848]	; (8000f38 <main+0x7d0>)
 8000be8:	f001 f83d 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2108      	movs	r1, #8
 8000bf0:	48d1      	ldr	r0, [pc, #836]	; (8000f38 <main+0x7d0>)
 8000bf2:	f001 f838 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2110      	movs	r1, #16
 8000bfa:	48cf      	ldr	r0, [pc, #828]	; (8000f38 <main+0x7d0>)
 8000bfc:	f001 f833 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2120      	movs	r1, #32
 8000c04:	48cc      	ldr	r0, [pc, #816]	; (8000f38 <main+0x7d0>)
 8000c06:	f001 f82e 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2140      	movs	r1, #64	; 0x40
 8000c0e:	48ca      	ldr	r0, [pc, #808]	; (8000f38 <main+0x7d0>)
 8000c10:	f001 f829 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2180      	movs	r1, #128	; 0x80
 8000c18:	48c7      	ldr	r0, [pc, #796]	; (8000f38 <main+0x7d0>)
 8000c1a:	f001 f824 	bl	8001c66 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000c1e:	2201      	movs	r2, #1
 8000c20:	2108      	movs	r1, #8
 8000c22:	48c6      	ldr	r0, [pc, #792]	; (8000f3c <main+0x7d4>)
 8000c24:	f001 f81f 	bl	8001c66 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);	//row 4 scan
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2110      	movs	r1, #16
 8000c2c:	48c3      	ldr	r0, [pc, #780]	; (8000f3c <main+0x7d4>)
 8000c2e:	f001 f81a 	bl	8001c66 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, col[4][0]);
 8000c32:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000c36:	461a      	mov	r2, r3
 8000c38:	2101      	movs	r1, #1
 8000c3a:	48bf      	ldr	r0, [pc, #764]	; (8000f38 <main+0x7d0>)
 8000c3c:	f001 f813 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, col[4][1]);
 8000c40:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000c44:	461a      	mov	r2, r3
 8000c46:	2102      	movs	r1, #2
 8000c48:	48bb      	ldr	r0, [pc, #748]	; (8000f38 <main+0x7d0>)
 8000c4a:	f001 f80c 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, col[4][2]);
 8000c4e:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8000c52:	461a      	mov	r2, r3
 8000c54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c58:	48b7      	ldr	r0, [pc, #732]	; (8000f38 <main+0x7d0>)
 8000c5a:	f001 f804 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, col[4][3]);
 8000c5e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000c62:	461a      	mov	r2, r3
 8000c64:	2108      	movs	r1, #8
 8000c66:	48b4      	ldr	r0, [pc, #720]	; (8000f38 <main+0x7d0>)
 8000c68:	f000 fffd 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, col[4][4]);
 8000c6c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000c70:	461a      	mov	r2, r3
 8000c72:	2110      	movs	r1, #16
 8000c74:	48b0      	ldr	r0, [pc, #704]	; (8000f38 <main+0x7d0>)
 8000c76:	f000 fff6 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, col[4][5]);
 8000c7a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8000c7e:	461a      	mov	r2, r3
 8000c80:	2120      	movs	r1, #32
 8000c82:	48ad      	ldr	r0, [pc, #692]	; (8000f38 <main+0x7d0>)
 8000c84:	f000 ffef 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, col[4][6]);
 8000c88:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	2140      	movs	r1, #64	; 0x40
 8000c90:	48a9      	ldr	r0, [pc, #676]	; (8000f38 <main+0x7d0>)
 8000c92:	f000 ffe8 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, col[4][7]);
 8000c96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	2180      	movs	r1, #128	; 0x80
 8000c9e:	48a6      	ldr	r0, [pc, #664]	; (8000f38 <main+0x7d0>)
 8000ca0:	f000 ffe1 	bl	8001c66 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	48a3      	ldr	r0, [pc, #652]	; (8000f38 <main+0x7d0>)
 8000caa:	f000 ffdc 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2102      	movs	r1, #2
 8000cb2:	48a1      	ldr	r0, [pc, #644]	; (8000f38 <main+0x7d0>)
 8000cb4:	f000 ffd7 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cbe:	489e      	ldr	r0, [pc, #632]	; (8000f38 <main+0x7d0>)
 8000cc0:	f000 ffd1 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2108      	movs	r1, #8
 8000cc8:	489b      	ldr	r0, [pc, #620]	; (8000f38 <main+0x7d0>)
 8000cca:	f000 ffcc 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2110      	movs	r1, #16
 8000cd2:	4899      	ldr	r0, [pc, #612]	; (8000f38 <main+0x7d0>)
 8000cd4:	f000 ffc7 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2120      	movs	r1, #32
 8000cdc:	4896      	ldr	r0, [pc, #600]	; (8000f38 <main+0x7d0>)
 8000cde:	f000 ffc2 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2140      	movs	r1, #64	; 0x40
 8000ce6:	4894      	ldr	r0, [pc, #592]	; (8000f38 <main+0x7d0>)
 8000ce8:	f000 ffbd 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2180      	movs	r1, #128	; 0x80
 8000cf0:	4891      	ldr	r0, [pc, #580]	; (8000f38 <main+0x7d0>)
 8000cf2:	f000 ffb8 	bl	8001c66 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	2110      	movs	r1, #16
 8000cfa:	4890      	ldr	r0, [pc, #576]	; (8000f3c <main+0x7d4>)
 8000cfc:	f000 ffb3 	bl	8001c66 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);	//row 5 scan
 8000d00:	2200      	movs	r2, #0
 8000d02:	2120      	movs	r1, #32
 8000d04:	488d      	ldr	r0, [pc, #564]	; (8000f3c <main+0x7d4>)
 8000d06:	f000 ffae 	bl	8001c66 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, col[5][0]);
 8000d0a:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000d0e:	461a      	mov	r2, r3
 8000d10:	2101      	movs	r1, #1
 8000d12:	4889      	ldr	r0, [pc, #548]	; (8000f38 <main+0x7d0>)
 8000d14:	f000 ffa7 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, col[5][1]);
 8000d18:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	2102      	movs	r1, #2
 8000d20:	4885      	ldr	r0, [pc, #532]	; (8000f38 <main+0x7d0>)
 8000d22:	f000 ffa0 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, col[5][2]);
 8000d26:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d30:	4881      	ldr	r0, [pc, #516]	; (8000f38 <main+0x7d0>)
 8000d32:	f000 ff98 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, col[5][3]);
 8000d36:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	2108      	movs	r1, #8
 8000d3e:	487e      	ldr	r0, [pc, #504]	; (8000f38 <main+0x7d0>)
 8000d40:	f000 ff91 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, col[5][4]);
 8000d44:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8000d48:	461a      	mov	r2, r3
 8000d4a:	2110      	movs	r1, #16
 8000d4c:	487a      	ldr	r0, [pc, #488]	; (8000f38 <main+0x7d0>)
 8000d4e:	f000 ff8a 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, col[5][5]);
 8000d52:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8000d56:	461a      	mov	r2, r3
 8000d58:	2120      	movs	r1, #32
 8000d5a:	4877      	ldr	r0, [pc, #476]	; (8000f38 <main+0x7d0>)
 8000d5c:	f000 ff83 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, col[5][6]);
 8000d60:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000d64:	461a      	mov	r2, r3
 8000d66:	2140      	movs	r1, #64	; 0x40
 8000d68:	4873      	ldr	r0, [pc, #460]	; (8000f38 <main+0x7d0>)
 8000d6a:	f000 ff7c 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, col[5][7]);
 8000d6e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d72:	461a      	mov	r2, r3
 8000d74:	2180      	movs	r1, #128	; 0x80
 8000d76:	4870      	ldr	r0, [pc, #448]	; (8000f38 <main+0x7d0>)
 8000d78:	f000 ff75 	bl	8001c66 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2101      	movs	r1, #1
 8000d80:	486d      	ldr	r0, [pc, #436]	; (8000f38 <main+0x7d0>)
 8000d82:	f000 ff70 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2102      	movs	r1, #2
 8000d8a:	486b      	ldr	r0, [pc, #428]	; (8000f38 <main+0x7d0>)
 8000d8c:	f000 ff6b 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d96:	4868      	ldr	r0, [pc, #416]	; (8000f38 <main+0x7d0>)
 8000d98:	f000 ff65 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2108      	movs	r1, #8
 8000da0:	4865      	ldr	r0, [pc, #404]	; (8000f38 <main+0x7d0>)
 8000da2:	f000 ff60 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2110      	movs	r1, #16
 8000daa:	4863      	ldr	r0, [pc, #396]	; (8000f38 <main+0x7d0>)
 8000dac:	f000 ff5b 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2120      	movs	r1, #32
 8000db4:	4860      	ldr	r0, [pc, #384]	; (8000f38 <main+0x7d0>)
 8000db6:	f000 ff56 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2140      	movs	r1, #64	; 0x40
 8000dbe:	485e      	ldr	r0, [pc, #376]	; (8000f38 <main+0x7d0>)
 8000dc0:	f000 ff51 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2180      	movs	r1, #128	; 0x80
 8000dc8:	485b      	ldr	r0, [pc, #364]	; (8000f38 <main+0x7d0>)
 8000dca:	f000 ff4c 	bl	8001c66 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2120      	movs	r1, #32
 8000dd2:	485a      	ldr	r0, [pc, #360]	; (8000f3c <main+0x7d4>)
 8000dd4:	f000 ff47 	bl	8001c66 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);	//row 6 scan
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2140      	movs	r1, #64	; 0x40
 8000ddc:	4857      	ldr	r0, [pc, #348]	; (8000f3c <main+0x7d4>)
 8000dde:	f000 ff42 	bl	8001c66 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, col[6][0]);
 8000de2:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000de6:	461a      	mov	r2, r3
 8000de8:	2101      	movs	r1, #1
 8000dea:	4853      	ldr	r0, [pc, #332]	; (8000f38 <main+0x7d0>)
 8000dec:	f000 ff3b 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, col[6][1]);
 8000df0:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8000df4:	461a      	mov	r2, r3
 8000df6:	2102      	movs	r1, #2
 8000df8:	484f      	ldr	r0, [pc, #316]	; (8000f38 <main+0x7d0>)
 8000dfa:	f000 ff34 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, col[6][2]);
 8000dfe:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8000e02:	461a      	mov	r2, r3
 8000e04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e08:	484b      	ldr	r0, [pc, #300]	; (8000f38 <main+0x7d0>)
 8000e0a:	f000 ff2c 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, col[6][3]);
 8000e0e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000e12:	461a      	mov	r2, r3
 8000e14:	2108      	movs	r1, #8
 8000e16:	4848      	ldr	r0, [pc, #288]	; (8000f38 <main+0x7d0>)
 8000e18:	f000 ff25 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, col[6][4]);
 8000e1c:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8000e20:	461a      	mov	r2, r3
 8000e22:	2110      	movs	r1, #16
 8000e24:	4844      	ldr	r0, [pc, #272]	; (8000f38 <main+0x7d0>)
 8000e26:	f000 ff1e 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, col[6][5]);
 8000e2a:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000e2e:	461a      	mov	r2, r3
 8000e30:	2120      	movs	r1, #32
 8000e32:	4841      	ldr	r0, [pc, #260]	; (8000f38 <main+0x7d0>)
 8000e34:	f000 ff17 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, col[6][6]);
 8000e38:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	2140      	movs	r1, #64	; 0x40
 8000e40:	483d      	ldr	r0, [pc, #244]	; (8000f38 <main+0x7d0>)
 8000e42:	f000 ff10 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, col[6][7]);
 8000e46:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	2180      	movs	r1, #128	; 0x80
 8000e4e:	483a      	ldr	r0, [pc, #232]	; (8000f38 <main+0x7d0>)
 8000e50:	f000 ff09 	bl	8001c66 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2101      	movs	r1, #1
 8000e58:	4837      	ldr	r0, [pc, #220]	; (8000f38 <main+0x7d0>)
 8000e5a:	f000 ff04 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2102      	movs	r1, #2
 8000e62:	4835      	ldr	r0, [pc, #212]	; (8000f38 <main+0x7d0>)
 8000e64:	f000 feff 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e6e:	4832      	ldr	r0, [pc, #200]	; (8000f38 <main+0x7d0>)
 8000e70:	f000 fef9 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2108      	movs	r1, #8
 8000e78:	482f      	ldr	r0, [pc, #188]	; (8000f38 <main+0x7d0>)
 8000e7a:	f000 fef4 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2110      	movs	r1, #16
 8000e82:	482d      	ldr	r0, [pc, #180]	; (8000f38 <main+0x7d0>)
 8000e84:	f000 feef 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2120      	movs	r1, #32
 8000e8c:	482a      	ldr	r0, [pc, #168]	; (8000f38 <main+0x7d0>)
 8000e8e:	f000 feea 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2140      	movs	r1, #64	; 0x40
 8000e96:	4828      	ldr	r0, [pc, #160]	; (8000f38 <main+0x7d0>)
 8000e98:	f000 fee5 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2180      	movs	r1, #128	; 0x80
 8000ea0:	4825      	ldr	r0, [pc, #148]	; (8000f38 <main+0x7d0>)
 8000ea2:	f000 fee0 	bl	8001c66 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	2140      	movs	r1, #64	; 0x40
 8000eaa:	4824      	ldr	r0, [pc, #144]	; (8000f3c <main+0x7d4>)
 8000eac:	f000 fedb 	bl	8001c66 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);	//row 7 scan
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2180      	movs	r1, #128	; 0x80
 8000eb4:	4821      	ldr	r0, [pc, #132]	; (8000f3c <main+0x7d4>)
 8000eb6:	f000 fed6 	bl	8001c66 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, col[7][0]);
 8000eba:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	481d      	ldr	r0, [pc, #116]	; (8000f38 <main+0x7d0>)
 8000ec4:	f000 fecf 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, col[7][1]);
 8000ec8:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8000ecc:	461a      	mov	r2, r3
 8000ece:	2102      	movs	r1, #2
 8000ed0:	4819      	ldr	r0, [pc, #100]	; (8000f38 <main+0x7d0>)
 8000ed2:	f000 fec8 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, col[7][2]);
 8000ed6:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8000eda:	461a      	mov	r2, r3
 8000edc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee0:	4815      	ldr	r0, [pc, #84]	; (8000f38 <main+0x7d0>)
 8000ee2:	f000 fec0 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, col[7][3]);
 8000ee6:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8000eea:	461a      	mov	r2, r3
 8000eec:	2108      	movs	r1, #8
 8000eee:	4812      	ldr	r0, [pc, #72]	; (8000f38 <main+0x7d0>)
 8000ef0:	f000 feb9 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, col[7][4]);
 8000ef4:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8000ef8:	461a      	mov	r2, r3
 8000efa:	2110      	movs	r1, #16
 8000efc:	480e      	ldr	r0, [pc, #56]	; (8000f38 <main+0x7d0>)
 8000efe:	f000 feb2 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, col[7][5]);
 8000f02:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8000f06:	461a      	mov	r2, r3
 8000f08:	2120      	movs	r1, #32
 8000f0a:	480b      	ldr	r0, [pc, #44]	; (8000f38 <main+0x7d0>)
 8000f0c:	f000 feab 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, col[7][6]);
 8000f10:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8000f14:	461a      	mov	r2, r3
 8000f16:	2140      	movs	r1, #64	; 0x40
 8000f18:	4807      	ldr	r0, [pc, #28]	; (8000f38 <main+0x7d0>)
 8000f1a:	f000 fea4 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, col[7][7]);
 8000f1e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000f22:	461a      	mov	r2, r3
 8000f24:	2180      	movs	r1, #128	; 0x80
 8000f26:	4804      	ldr	r0, [pc, #16]	; (8000f38 <main+0x7d0>)
 8000f28:	f000 fe9d 	bl	8001c66 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2101      	movs	r1, #1
 8000f30:	4801      	ldr	r0, [pc, #4]	; (8000f38 <main+0x7d0>)
 8000f32:	f000 fe98 	bl	8001c66 <HAL_GPIO_WritePin>
 8000f36:	e003      	b.n	8000f40 <main+0x7d8>
 8000f38:	40010c00 	.word	0x40010c00
 8000f3c:	40010800 	.word	0x40010800
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2102      	movs	r1, #2
 8000f44:	48c9      	ldr	r0, [pc, #804]	; (800126c <main+0xb04>)
 8000f46:	f000 fe8e 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f50:	48c6      	ldr	r0, [pc, #792]	; (800126c <main+0xb04>)
 8000f52:	f000 fe88 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2108      	movs	r1, #8
 8000f5a:	48c4      	ldr	r0, [pc, #784]	; (800126c <main+0xb04>)
 8000f5c:	f000 fe83 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2110      	movs	r1, #16
 8000f64:	48c1      	ldr	r0, [pc, #772]	; (800126c <main+0xb04>)
 8000f66:	f000 fe7e 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2120      	movs	r1, #32
 8000f6e:	48bf      	ldr	r0, [pc, #764]	; (800126c <main+0xb04>)
 8000f70:	f000 fe79 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2140      	movs	r1, #64	; 0x40
 8000f78:	48bc      	ldr	r0, [pc, #752]	; (800126c <main+0xb04>)
 8000f7a:	f000 fe74 	bl	8001c66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2180      	movs	r1, #128	; 0x80
 8000f82:	48ba      	ldr	r0, [pc, #744]	; (800126c <main+0xb04>)
 8000f84:	f000 fe6f 	bl	8001c66 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2180      	movs	r1, #128	; 0x80
 8000f8c:	48b8      	ldr	r0, [pc, #736]	; (8001270 <main+0xb08>)
 8000f8e:	f000 fe6a 	bl	8001c66 <HAL_GPIO_WritePin>

	  HAL_Delay(1);
 8000f92:	2001      	movs	r0, #1
 8000f94:	f000 fbc4 	bl	8001720 <HAL_Delay>

	  //START
	  if (row_cnt == -1){
 8000f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa0:	d132      	bne.n	8001008 <main+0x8a0>
		  for (int i=0; i<8; i++){
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000fa8:	e01c      	b.n	8000fe4 <main+0x87c>
			  for (int j=0; j<8; j++){
 8000faa:	2300      	movs	r3, #0
 8000fac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000fb0:	e00f      	b.n	8000fd2 <main+0x86a>
					  col[i][j] = GPIO_PIN_SET;
 8000fb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	33e8      	adds	r3, #232	; 0xe8
 8000fba:	19da      	adds	r2, r3, r7
 8000fbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000fc0:	4413      	add	r3, r2
 8000fc2:	3ba8      	subs	r3, #168	; 0xa8
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	701a      	strb	r2, [r3, #0]
			  for (int j=0; j<8; j++){
 8000fc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000fcc:	3301      	adds	r3, #1
 8000fce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000fd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000fd6:	2b07      	cmp	r3, #7
 8000fd8:	ddeb      	ble.n	8000fb2 <main+0x84a>
		  for (int i=0; i<8; i++){
 8000fda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000fde:	3301      	adds	r3, #1
 8000fe0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000fe4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000fe8:	2b07      	cmp	r3, #7
 8000fea:	ddde      	ble.n	8000faa <main+0x842>
			  }
		  }
		  if (butt == 0){
 8000fec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f040 81b9 	bne.w	8001368 <main+0xc00>
			  row_cnt++;
 8000ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
			  butt = 2;
 8001000:	2302      	movs	r3, #2
 8001002:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001006:	e1af      	b.n	8001368 <main+0xc00>
		  }
	  }

	  //PAUSE & UPDATE ROW
	  else if (row_cnt > 10){
 8001008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800100c:	2b0a      	cmp	r3, #10
 800100e:	f340 809b 	ble.w	8001148 <main+0x9e0>
		  if (pause_cnt == 750){
 8001012:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001016:	f240 22ee 	movw	r2, #750	; 0x2ee
 800101a:	4293      	cmp	r3, r2
 800101c:	f040 808e 	bne.w	800113c <main+0x9d4>
			  row_cnt += -20;
 8001020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001024:	3b14      	subs	r3, #20
 8001026:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
			  pause_cnt = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			  for (int i=0; i<8; i++){
 8001030:	2300      	movs	r3, #0
 8001032:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001036:	e031      	b.n	800109c <main+0x934>
				  if (row_cnt > 0 && col[row_cnt][i] == GPIO_PIN_SET && col[row_cnt-1][i] == GPIO_PIN_RESET){
 8001038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800103c:	2b00      	cmp	r3, #0
 800103e:	dd28      	ble.n	8001092 <main+0x92a>
 8001040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	33e8      	adds	r3, #232	; 0xe8
 8001048:	19da      	adds	r2, r3, r7
 800104a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800104e:	4413      	add	r3, r2
 8001050:	3ba8      	subs	r3, #168	; 0xa8
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d11c      	bne.n	8001092 <main+0x92a>
 8001058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800105c:	3b01      	subs	r3, #1
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	33e8      	adds	r3, #232	; 0xe8
 8001062:	19da      	adds	r2, r3, r7
 8001064:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001068:	4413      	add	r3, r2
 800106a:	3ba8      	subs	r3, #168	; 0xa8
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d10f      	bne.n	8001092 <main+0x92a>
					  size -= 1;
 8001072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001076:	3b01      	subs	r3, #1
 8001078:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
					  col[row_cnt][i] = GPIO_PIN_RESET;
 800107c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	33e8      	adds	r3, #232	; 0xe8
 8001084:	19da      	adds	r2, r3, r7
 8001086:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800108a:	4413      	add	r3, r2
 800108c:	3ba8      	subs	r3, #168	; 0xa8
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]
			  for (int i=0; i<8; i++){
 8001092:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001096:	3301      	adds	r3, #1
 8001098:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800109c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80010a0:	2b07      	cmp	r3, #7
 80010a2:	ddc9      	ble.n	8001038 <main+0x8d0>
				  }
			  }
			  for (int i=0; i<8; i++){
 80010a4:	2300      	movs	r3, #0
 80010a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80010aa:	e026      	b.n	80010fa <main+0x992>
				  for (int j=0; j<8; j++){
 80010ac:	2300      	movs	r3, #0
 80010ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80010b2:	e019      	b.n	80010e8 <main+0x980>
						  stack[i][j] = col[i][j];
 80010b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	33e8      	adds	r3, #232	; 0xe8
 80010bc:	19da      	adds	r2, r3, r7
 80010be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80010c2:	4413      	add	r3, r2
 80010c4:	3ba8      	subs	r3, #168	; 0xa8
 80010c6:	7819      	ldrb	r1, [r3, #0]
 80010c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	33e8      	adds	r3, #232	; 0xe8
 80010d0:	19da      	adds	r2, r3, r7
 80010d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80010d6:	4413      	add	r3, r2
 80010d8:	3be8      	subs	r3, #232	; 0xe8
 80010da:	460a      	mov	r2, r1
 80010dc:	701a      	strb	r2, [r3, #0]
				  for (int j=0; j<8; j++){
 80010de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80010e2:	3301      	adds	r3, #1
 80010e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80010e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80010ec:	2b07      	cmp	r3, #7
 80010ee:	dde1      	ble.n	80010b4 <main+0x94c>
			  for (int i=0; i<8; i++){
 80010f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80010f4:	3301      	adds	r3, #1
 80010f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80010fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80010fe:	2b07      	cmp	r3, #7
 8001100:	ddd4      	ble.n	80010ac <main+0x944>
				  }
			  }
			  count = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
			  offset = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			  speed *= 0.75;
 800110e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001112:	f7ff fa97 	bl	8000644 <__aeabi_i2d>
 8001116:	f04f 0200 	mov.w	r2, #0
 800111a:	4b56      	ldr	r3, [pc, #344]	; (8001274 <main+0xb0c>)
 800111c:	f7ff f816 	bl	800014c <__aeabi_dmul>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4610      	mov	r0, r2
 8001126:	4619      	mov	r1, r3
 8001128:	f7ff faf6 	bl	8000718 <__aeabi_d2iz>
 800112c:	4603      	mov	r3, r0
 800112e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			  row_cnt++;
 8001132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001136:	3301      	adds	r3, #1
 8001138:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		  }
		  pause_cnt++;
 800113c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001140:	3301      	adds	r3, #1
 8001142:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001146:	e10f      	b.n	8001368 <main+0xc00>
	  }

	  //END
	  else if (row_cnt == 8){
 8001148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800114c:	2b08      	cmp	r3, #8
 800114e:	d17e      	bne.n	800124e <main+0xae6>
		  if (size == 0){
 8001150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d101      	bne.n	800115c <main+0x9f4>
			  main();
 8001158:	f7ff fb06 	bl	8000768 <main>
		  }
		  if (end_cnt > 1250){
 800115c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001160:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001164:	4293      	cmp	r3, r2
 8001166:	dd6c      	ble.n	8001242 <main+0xada>
			  speed = 60;
 8001168:	233c      	movs	r3, #60	; 0x3c
 800116a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			  for (int i=0; i<8; i++){
 800116e:	2300      	movs	r3, #0
 8001170:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001174:	e01c      	b.n	80011b0 <main+0xa48>
				  for (int j=0; j<8; j++){
 8001176:	2300      	movs	r3, #0
 8001178:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800117c:	e00f      	b.n	800119e <main+0xa36>
						  col[i][j] = GPIO_PIN_RESET;
 800117e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	33e8      	adds	r3, #232	; 0xe8
 8001186:	19da      	adds	r2, r3, r7
 8001188:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800118c:	4413      	add	r3, r2
 800118e:	3ba8      	subs	r3, #168	; 0xa8
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
				  for (int j=0; j<8; j++){
 8001194:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001198:	3301      	adds	r3, #1
 800119a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800119e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80011a2:	2b07      	cmp	r3, #7
 80011a4:	ddeb      	ble.n	800117e <main+0xa16>
			  for (int i=0; i<8; i++){
 80011a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80011aa:	3301      	adds	r3, #1
 80011ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80011b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80011b4:	2b07      	cmp	r3, #7
 80011b6:	ddde      	ble.n	8001176 <main+0xa0e>
				  }
			  }
			  if (offset == 7){
 80011b8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80011bc:	2b07      	cmp	r3, #7
 80011be:	d103      	bne.n	80011c8 <main+0xa60>
				  dir = -1;
 80011c0:	f04f 33ff 	mov.w	r3, #4294967295
 80011c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
			  }
			  if (offset == 0){
 80011c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d102      	bne.n	80011d6 <main+0xa6e>
				  dir = 1;
 80011d0:	2301      	movs	r3, #1
 80011d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
			  }
			  if (count == speed){
 80011d6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80011da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80011de:	429a      	cmp	r2, r3
 80011e0:	d109      	bne.n	80011f6 <main+0xa8e>
				  offset += dir;
 80011e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80011e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80011ea:	4413      	add	r3, r2
 80011ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
				  count = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
			  }
			  for (int i=0; i<8; i++){
 80011f6:	2300      	movs	r3, #0
 80011f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80011fc:	e00f      	b.n	800121e <main+0xab6>
				  col[offset][i] = GPIO_PIN_SET;
 80011fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	33e8      	adds	r3, #232	; 0xe8
 8001206:	19da      	adds	r2, r3, r7
 8001208:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800120c:	4413      	add	r3, r2
 800120e:	3ba8      	subs	r3, #168	; 0xa8
 8001210:	2201      	movs	r2, #1
 8001212:	701a      	strb	r2, [r3, #0]
			  for (int i=0; i<8; i++){
 8001214:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001218:	3301      	adds	r3, #1
 800121a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800121e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001222:	2b07      	cmp	r3, #7
 8001224:	ddeb      	ble.n	80011fe <main+0xa96>
			  }
			  count++;
 8001226:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800122a:	3301      	adds	r3, #1
 800122c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
			  if (butt == 0){
 8001230:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001234:	2b00      	cmp	r3, #0
 8001236:	d104      	bne.n	8001242 <main+0xada>
				  butt = 2;
 8001238:	2302      	movs	r3, #2
 800123a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
				  main();
 800123e:	f7ff fa93 	bl	8000768 <main>
			  }
		  }
		  end_cnt++;
 8001242:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001246:	3301      	adds	r3, #1
 8001248:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800124c:	e08c      	b.n	8001368 <main+0xc00>
	  }

	  //GAMING
	  else{
		  if (size == 0){
 800124e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <main+0xaf2>
			  main();
 8001256:	f7ff fa87 	bl	8000768 <main>
		  }
		  for (int i=0; i<8; i++){
 800125a:	2300      	movs	r3, #0
 800125c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001260:	e02d      	b.n	80012be <main+0xb56>
			  for (int j=0; j<8; j++){
 8001262:	2300      	movs	r3, #0
 8001264:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001268:	e020      	b.n	80012ac <main+0xb44>
 800126a:	bf00      	nop
 800126c:	40010c00 	.word	0x40010c00
 8001270:	40010800 	.word	0x40010800
 8001274:	3fe80000 	.word	0x3fe80000
					  col[i][j] = stack[i][j];
 8001278:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	33e8      	adds	r3, #232	; 0xe8
 8001280:	19da      	adds	r2, r3, r7
 8001282:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001286:	4413      	add	r3, r2
 8001288:	3be8      	subs	r3, #232	; 0xe8
 800128a:	7819      	ldrb	r1, [r3, #0]
 800128c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	33e8      	adds	r3, #232	; 0xe8
 8001294:	19da      	adds	r2, r3, r7
 8001296:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800129a:	4413      	add	r3, r2
 800129c:	3ba8      	subs	r3, #168	; 0xa8
 800129e:	460a      	mov	r2, r1
 80012a0:	701a      	strb	r2, [r3, #0]
			  for (int j=0; j<8; j++){
 80012a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80012a6:	3301      	adds	r3, #1
 80012a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80012ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80012b0:	2b07      	cmp	r3, #7
 80012b2:	dde1      	ble.n	8001278 <main+0xb10>
		  for (int i=0; i<8; i++){
 80012b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012b8:	3301      	adds	r3, #1
 80012ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80012be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012c2:	2b07      	cmp	r3, #7
 80012c4:	ddcd      	ble.n	8001262 <main+0xafa>
			  }
		  }
		  if (offset+size > 7){
 80012c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80012ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80012ce:	4413      	add	r3, r2
 80012d0:	2b07      	cmp	r3, #7
 80012d2:	dd03      	ble.n	80012dc <main+0xb74>
			  dir = -1;
 80012d4:	f04f 33ff 	mov.w	r3, #4294967295
 80012d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		  }
		  if (offset == 0){
 80012dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d102      	bne.n	80012ea <main+0xb82>
			  dir = 1;
 80012e4:	2301      	movs	r3, #1
 80012e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		  }
		  for (int i=offset; i<size+offset; i++){
 80012ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80012ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80012f2:	e00f      	b.n	8001314 <main+0xbac>
			  col[row_cnt][i] = GPIO_PIN_SET;
 80012f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	33e8      	adds	r3, #232	; 0xe8
 80012fc:	19da      	adds	r2, r3, r7
 80012fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001302:	4413      	add	r3, r2
 8001304:	3ba8      	subs	r3, #168	; 0xa8
 8001306:	2201      	movs	r2, #1
 8001308:	701a      	strb	r2, [r3, #0]
		  for (int i=offset; i<size+offset; i++){
 800130a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800130e:	3301      	adds	r3, #1
 8001310:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001314:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001318:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800131c:	4413      	add	r3, r2
 800131e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001322:	429a      	cmp	r2, r3
 8001324:	dbe6      	blt.n	80012f4 <main+0xb8c>
		  }
		  count++;
 8001326:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800132a:	3301      	adds	r3, #1
 800132c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		  if (count == speed){
 8001330:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001338:	429a      	cmp	r2, r3
 800133a:	d109      	bne.n	8001350 <main+0xbe8>
			  offset+=dir;
 800133c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001340:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001344:	4413      	add	r3, r2
 8001346:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			  count = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		  }
		  if (butt == 0){
 8001350:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001354:	2b00      	cmp	r3, #0
 8001356:	d107      	bne.n	8001368 <main+0xc00>
			  butt = 2;
 8001358:	2302      	movs	r3, #2
 800135a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
			  row_cnt += 20;
 800135e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001362:	3314      	adds	r3, #20
 8001364:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		  }
	  }


	  //BUTTON CHECK
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == GPIO_PIN_RESET && butt == 1){
 8001368:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800136c:	481f      	ldr	r0, [pc, #124]	; (80013ec <main+0xc84>)
 800136e:	f000 fc63 	bl	8001c38 <HAL_GPIO_ReadPin>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d107      	bne.n	8001388 <main+0xc20>
 8001378:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800137c:	2b01      	cmp	r3, #1
 800137e:	d103      	bne.n	8001388 <main+0xc20>
		  butt = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001386:	e00e      	b.n	80013a6 <main+0xc3e>
	  }

	  else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == GPIO_PIN_RESET && butt == 0){
 8001388:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800138c:	4817      	ldr	r0, [pc, #92]	; (80013ec <main+0xc84>)
 800138e:	f000 fc53 	bl	8001c38 <HAL_GPIO_ReadPin>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d106      	bne.n	80013a6 <main+0xc3e>
 8001398:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <main+0xc3e>
		  butt = 2;
 80013a0:	2302      	movs	r3, #2
 80013a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	  }

	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == GPIO_PIN_SET){
 80013a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013aa:	4810      	ldr	r0, [pc, #64]	; (80013ec <main+0xc84>)
 80013ac:	f000 fc44 	bl	8001c38 <HAL_GPIO_ReadPin>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	f47f aa83 	bne.w	80008be <main+0x156>
		  deb_cnt++;
 80013b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80013bc:	3301      	adds	r3, #1
 80013be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
		  if (deb_cnt == deb){
 80013c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80013c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013ca:	429a      	cmp	r2, r3
 80013cc:	f47f aa77 	bne.w	80008be <main+0x156>
			  butt = 1;
 80013d0:	2301      	movs	r3, #1
 80013d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
			  deb_cnt = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);	//row 0 scan
 80013dc:	f7ff ba6f 	b.w	80008be <main+0x156>
 80013e0:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	37e8      	adds	r7, #232	; 0xe8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40010800 	.word	0x40010800

080013f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b090      	sub	sp, #64	; 0x40
 80013f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f6:	f107 0318 	add.w	r3, r7, #24
 80013fa:	2228      	movs	r2, #40	; 0x28
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f001 f856 	bl	80024b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001412:	2302      	movs	r3, #2
 8001414:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001416:	2301      	movs	r3, #1
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800141a:	2310      	movs	r3, #16
 800141c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800141e:	2300      	movs	r3, #0
 8001420:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001422:	f107 0318 	add.w	r3, r7, #24
 8001426:	4618      	mov	r0, r3
 8001428:	f000 fc36 	bl	8001c98 <HAL_RCC_OscConfig>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001432:	f000 f887 	bl	8001544 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001436:	230f      	movs	r3, #15
 8001438:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800143a:	2300      	movs	r3, #0
 800143c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f000 fea4 	bl	800219c <HAL_RCC_ClockConfig>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800145a:	f000 f873 	bl	8001544 <Error_Handler>
  }
}
 800145e:	bf00      	nop
 8001460:	3740      	adds	r7, #64	; 0x40
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146e:	f107 0308 	add.w	r3, r7, #8
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147c:	4b2e      	ldr	r3, [pc, #184]	; (8001538 <MX_GPIO_Init+0xd0>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	4a2d      	ldr	r2, [pc, #180]	; (8001538 <MX_GPIO_Init+0xd0>)
 8001482:	f043 0304 	orr.w	r3, r3, #4
 8001486:	6193      	str	r3, [r2, #24]
 8001488:	4b2b      	ldr	r3, [pc, #172]	; (8001538 <MX_GPIO_Init+0xd0>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001494:	4b28      	ldr	r3, [pc, #160]	; (8001538 <MX_GPIO_Init+0xd0>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	4a27      	ldr	r2, [pc, #156]	; (8001538 <MX_GPIO_Init+0xd0>)
 800149a:	f043 0308 	orr.w	r3, r3, #8
 800149e:	6193      	str	r3, [r2, #24]
 80014a0:	4b25      	ldr	r3, [pc, #148]	; (8001538 <MX_GPIO_Init+0xd0>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	f003 0308 	and.w	r3, r3, #8
 80014a8:	603b      	str	r3, [r7, #0]
 80014aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R0_Pin|R1_Pin|R2_Pin|R3_Pin
 80014ac:	2200      	movs	r2, #0
 80014ae:	21ff      	movs	r1, #255	; 0xff
 80014b0:	4822      	ldr	r0, [pc, #136]	; (800153c <MX_GPIO_Init+0xd4>)
 80014b2:	f000 fbd8 	bl	8001c66 <HAL_GPIO_WritePin>
                          |R4_Pin|R5_Pin|R6_Pin|R7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, C0_Pin|C1_Pin|C2_Pin|C3_Pin
 80014b6:	2200      	movs	r2, #0
 80014b8:	f240 41fb 	movw	r1, #1275	; 0x4fb
 80014bc:	4820      	ldr	r0, [pc, #128]	; (8001540 <MX_GPIO_Init+0xd8>)
 80014be:	f000 fbd2 	bl	8001c66 <HAL_GPIO_WritePin>
                          |C4_Pin|C5_Pin|C6_Pin|C7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : R0_Pin R1_Pin R2_Pin R3_Pin
                           R4_Pin R5_Pin R6_Pin R7_Pin */
  GPIO_InitStruct.Pin = R0_Pin|R1_Pin|R2_Pin|R3_Pin
 80014c2:	23ff      	movs	r3, #255	; 0xff
 80014c4:	60bb      	str	r3, [r7, #8]
                          |R4_Pin|R5_Pin|R6_Pin|R7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c6:	2301      	movs	r3, #1
 80014c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2302      	movs	r3, #2
 80014d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 0308 	add.w	r3, r7, #8
 80014d6:	4619      	mov	r1, r3
 80014d8:	4818      	ldr	r0, [pc, #96]	; (800153c <MX_GPIO_Init+0xd4>)
 80014da:	f000 fa29 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pins : C0_Pin C1_Pin C2_Pin C3_Pin
                           C4_Pin C5_Pin C6_Pin C7_Pin */
  GPIO_InitStruct.Pin = C0_Pin|C1_Pin|C2_Pin|C3_Pin
 80014de:	f240 43fb 	movw	r3, #1275	; 0x4fb
 80014e2:	60bb      	str	r3, [r7, #8]
                          |C4_Pin|C5_Pin|C6_Pin|C7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e4:	2301      	movs	r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2302      	movs	r3, #2
 80014ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f0:	f107 0308 	add.w	r3, r7, #8
 80014f4:	4619      	mov	r1, r3
 80014f6:	4812      	ldr	r0, [pc, #72]	; (8001540 <MX_GPIO_Init+0xd8>)
 80014f8:	f000 fa1a 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80014fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001500:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150a:	f107 0308 	add.w	r3, r7, #8
 800150e:	4619      	mov	r1, r3
 8001510:	480b      	ldr	r0, [pc, #44]	; (8001540 <MX_GPIO_Init+0xd8>)
 8001512:	f000 fa0d 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800151a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001524:	f107 0308 	add.w	r3, r7, #8
 8001528:	4619      	mov	r1, r3
 800152a:	4804      	ldr	r0, [pc, #16]	; (800153c <MX_GPIO_Init+0xd4>)
 800152c:	f000 fa00 	bl	8001930 <HAL_GPIO_Init>

}
 8001530:	bf00      	nop
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40021000 	.word	0x40021000
 800153c:	40010800 	.word	0x40010800
 8001540:	40010c00 	.word	0x40010c00

08001544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001548:	b672      	cpsid	i
}
 800154a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800154c:	e7fe      	b.n	800154c <Error_Handler+0x8>
	...

08001550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <HAL_MspInit+0x5c>)
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	4a14      	ldr	r2, [pc, #80]	; (80015ac <HAL_MspInit+0x5c>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6193      	str	r3, [r2, #24]
 8001562:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_MspInit+0x5c>)
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <HAL_MspInit+0x5c>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <HAL_MspInit+0x5c>)
 8001574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001578:	61d3      	str	r3, [r2, #28]
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <HAL_MspInit+0x5c>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001586:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <HAL_MspInit+0x60>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <HAL_MspInit+0x60>)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a2:	bf00      	nop
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40010000 	.word	0x40010000

080015b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <NMI_Handler+0x4>

080015ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015be:	e7fe      	b.n	80015be <HardFault_Handler+0x4>

080015c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <MemManage_Handler+0x4>

080015c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <BusFault_Handler+0x4>

080015cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <UsageFault_Handler+0x4>

080015d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr

080015de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr

080015ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr

080015f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015fa:	f000 f875 	bl	80016e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}

08001602 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr
	...

08001610 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001610:	480c      	ldr	r0, [pc, #48]	; (8001644 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001612:	490d      	ldr	r1, [pc, #52]	; (8001648 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001614:	4a0d      	ldr	r2, [pc, #52]	; (800164c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001618:	e002      	b.n	8001620 <LoopCopyDataInit>

0800161a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800161c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161e:	3304      	adds	r3, #4

08001620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001624:	d3f9      	bcc.n	800161a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001626:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001628:	4c0a      	ldr	r4, [pc, #40]	; (8001654 <LoopFillZerobss+0x22>)
  movs r3, #0
 800162a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800162c:	e001      	b.n	8001632 <LoopFillZerobss>

0800162e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001630:	3204      	adds	r2, #4

08001632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001634:	d3fb      	bcc.n	800162e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001636:	f7ff ffe4 	bl	8001602 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800163a:	f000 ff15 	bl	8002468 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800163e:	f7ff f893 	bl	8000768 <main>
  bx lr
 8001642:	4770      	bx	lr
  ldr r0, =_sdata
 8001644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001648:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800164c:	08002500 	.word	0x08002500
  ldr r2, =_sbss
 8001650:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001654:	2000002c 	.word	0x2000002c

08001658 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001658:	e7fe      	b.n	8001658 <ADC1_2_IRQHandler>
	...

0800165c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <HAL_Init+0x28>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a07      	ldr	r2, [pc, #28]	; (8001684 <HAL_Init+0x28>)
 8001666:	f043 0310 	orr.w	r3, r3, #16
 800166a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800166c:	2003      	movs	r0, #3
 800166e:	f000 f92b 	bl	80018c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001672:	200f      	movs	r0, #15
 8001674:	f000 f808 	bl	8001688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001678:	f7ff ff6a 	bl	8001550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40022000 	.word	0x40022000

08001688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_InitTick+0x54>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_InitTick+0x58>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4619      	mov	r1, r3
 800169a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169e:	fbb3 f3f1 	udiv	r3, r3, r1
 80016a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 f935 	bl	8001916 <HAL_SYSTICK_Config>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00e      	b.n	80016d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b0f      	cmp	r3, #15
 80016ba:	d80a      	bhi.n	80016d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016bc:	2200      	movs	r2, #0
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f000 f90b 	bl	80018de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c8:	4a06      	ldr	r2, [pc, #24]	; (80016e4 <HAL_InitTick+0x5c>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	e000      	b.n	80016d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000000 	.word	0x20000000
 80016e0:	20000008 	.word	0x20000008
 80016e4:	20000004 	.word	0x20000004

080016e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <HAL_IncTick+0x1c>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b05      	ldr	r3, [pc, #20]	; (8001708 <HAL_IncTick+0x20>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	4a03      	ldr	r2, [pc, #12]	; (8001708 <HAL_IncTick+0x20>)
 80016fa:	6013      	str	r3, [r2, #0]
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	20000008 	.word	0x20000008
 8001708:	20000028 	.word	0x20000028

0800170c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return uwTick;
 8001710:	4b02      	ldr	r3, [pc, #8]	; (800171c <HAL_GetTick+0x10>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	20000028 	.word	0x20000028

08001720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001728:	f7ff fff0 	bl	800170c <HAL_GetTick>
 800172c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001738:	d005      	beq.n	8001746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800173a:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <HAL_Delay+0x44>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	461a      	mov	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4413      	add	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001746:	bf00      	nop
 8001748:	f7ff ffe0 	bl	800170c <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	429a      	cmp	r2, r3
 8001756:	d8f7      	bhi.n	8001748 <HAL_Delay+0x28>
  {
  }
}
 8001758:	bf00      	nop
 800175a:	bf00      	nop
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000008 	.word	0x20000008

08001768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <__NVIC_SetPriorityGrouping+0x44>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001784:	4013      	ands	r3, r2
 8001786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001790:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179a:	4a04      	ldr	r2, [pc, #16]	; (80017ac <__NVIC_SetPriorityGrouping+0x44>)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	60d3      	str	r3, [r2, #12]
}
 80017a0:	bf00      	nop
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b4:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <__NVIC_GetPriorityGrouping+0x18>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	0a1b      	lsrs	r3, r3, #8
 80017ba:	f003 0307 	and.w	r3, r3, #7
}
 80017be:	4618      	mov	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	6039      	str	r1, [r7, #0]
 80017d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	db0a      	blt.n	80017f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	490c      	ldr	r1, [pc, #48]	; (8001818 <__NVIC_SetPriority+0x4c>)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	0112      	lsls	r2, r2, #4
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	440b      	add	r3, r1
 80017f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f4:	e00a      	b.n	800180c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	4908      	ldr	r1, [pc, #32]	; (800181c <__NVIC_SetPriority+0x50>)
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	3b04      	subs	r3, #4
 8001804:	0112      	lsls	r2, r2, #4
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	440b      	add	r3, r1
 800180a:	761a      	strb	r2, [r3, #24]
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000e100 	.word	0xe000e100
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001820:	b480      	push	{r7}
 8001822:	b089      	sub	sp, #36	; 0x24
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	f1c3 0307 	rsb	r3, r3, #7
 800183a:	2b04      	cmp	r3, #4
 800183c:	bf28      	it	cs
 800183e:	2304      	movcs	r3, #4
 8001840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	3304      	adds	r3, #4
 8001846:	2b06      	cmp	r3, #6
 8001848:	d902      	bls.n	8001850 <NVIC_EncodePriority+0x30>
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3b03      	subs	r3, #3
 800184e:	e000      	b.n	8001852 <NVIC_EncodePriority+0x32>
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001854:	f04f 32ff 	mov.w	r2, #4294967295
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43da      	mvns	r2, r3
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	401a      	ands	r2, r3
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001868:	f04f 31ff 	mov.w	r1, #4294967295
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	fa01 f303 	lsl.w	r3, r1, r3
 8001872:	43d9      	mvns	r1, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001878:	4313      	orrs	r3, r2
         );
}
 800187a:	4618      	mov	r0, r3
 800187c:	3724      	adds	r7, #36	; 0x24
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr

08001884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3b01      	subs	r3, #1
 8001890:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001894:	d301      	bcc.n	800189a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001896:	2301      	movs	r3, #1
 8001898:	e00f      	b.n	80018ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800189a:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <SysTick_Config+0x40>)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3b01      	subs	r3, #1
 80018a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018a2:	210f      	movs	r1, #15
 80018a4:	f04f 30ff 	mov.w	r0, #4294967295
 80018a8:	f7ff ff90 	bl	80017cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ac:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <SysTick_Config+0x40>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018b2:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <SysTick_Config+0x40>)
 80018b4:	2207      	movs	r2, #7
 80018b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	e000e010 	.word	0xe000e010

080018c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff ff49 	bl	8001768 <__NVIC_SetPriorityGrouping>
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	4603      	mov	r3, r0
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
 80018ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018f0:	f7ff ff5e 	bl	80017b0 <__NVIC_GetPriorityGrouping>
 80018f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	68b9      	ldr	r1, [r7, #8]
 80018fa:	6978      	ldr	r0, [r7, #20]
 80018fc:	f7ff ff90 	bl	8001820 <NVIC_EncodePriority>
 8001900:	4602      	mov	r2, r0
 8001902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff5f 	bl	80017cc <__NVIC_SetPriority>
}
 800190e:	bf00      	nop
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff ffb0 	bl	8001884 <SysTick_Config>
 8001924:	4603      	mov	r3, r0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001930:	b480      	push	{r7}
 8001932:	b08b      	sub	sp, #44	; 0x2c
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800193a:	2300      	movs	r3, #0
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800193e:	2300      	movs	r3, #0
 8001940:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001942:	e169      	b.n	8001c18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001944:	2201      	movs	r2, #1
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	429a      	cmp	r2, r3
 800195e:	f040 8158 	bne.w	8001c12 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	4a9a      	ldr	r2, [pc, #616]	; (8001bd0 <HAL_GPIO_Init+0x2a0>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d05e      	beq.n	8001a2a <HAL_GPIO_Init+0xfa>
 800196c:	4a98      	ldr	r2, [pc, #608]	; (8001bd0 <HAL_GPIO_Init+0x2a0>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d875      	bhi.n	8001a5e <HAL_GPIO_Init+0x12e>
 8001972:	4a98      	ldr	r2, [pc, #608]	; (8001bd4 <HAL_GPIO_Init+0x2a4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d058      	beq.n	8001a2a <HAL_GPIO_Init+0xfa>
 8001978:	4a96      	ldr	r2, [pc, #600]	; (8001bd4 <HAL_GPIO_Init+0x2a4>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d86f      	bhi.n	8001a5e <HAL_GPIO_Init+0x12e>
 800197e:	4a96      	ldr	r2, [pc, #600]	; (8001bd8 <HAL_GPIO_Init+0x2a8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d052      	beq.n	8001a2a <HAL_GPIO_Init+0xfa>
 8001984:	4a94      	ldr	r2, [pc, #592]	; (8001bd8 <HAL_GPIO_Init+0x2a8>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d869      	bhi.n	8001a5e <HAL_GPIO_Init+0x12e>
 800198a:	4a94      	ldr	r2, [pc, #592]	; (8001bdc <HAL_GPIO_Init+0x2ac>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d04c      	beq.n	8001a2a <HAL_GPIO_Init+0xfa>
 8001990:	4a92      	ldr	r2, [pc, #584]	; (8001bdc <HAL_GPIO_Init+0x2ac>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d863      	bhi.n	8001a5e <HAL_GPIO_Init+0x12e>
 8001996:	4a92      	ldr	r2, [pc, #584]	; (8001be0 <HAL_GPIO_Init+0x2b0>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d046      	beq.n	8001a2a <HAL_GPIO_Init+0xfa>
 800199c:	4a90      	ldr	r2, [pc, #576]	; (8001be0 <HAL_GPIO_Init+0x2b0>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d85d      	bhi.n	8001a5e <HAL_GPIO_Init+0x12e>
 80019a2:	2b12      	cmp	r3, #18
 80019a4:	d82a      	bhi.n	80019fc <HAL_GPIO_Init+0xcc>
 80019a6:	2b12      	cmp	r3, #18
 80019a8:	d859      	bhi.n	8001a5e <HAL_GPIO_Init+0x12e>
 80019aa:	a201      	add	r2, pc, #4	; (adr r2, 80019b0 <HAL_GPIO_Init+0x80>)
 80019ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b0:	08001a2b 	.word	0x08001a2b
 80019b4:	08001a05 	.word	0x08001a05
 80019b8:	08001a17 	.word	0x08001a17
 80019bc:	08001a59 	.word	0x08001a59
 80019c0:	08001a5f 	.word	0x08001a5f
 80019c4:	08001a5f 	.word	0x08001a5f
 80019c8:	08001a5f 	.word	0x08001a5f
 80019cc:	08001a5f 	.word	0x08001a5f
 80019d0:	08001a5f 	.word	0x08001a5f
 80019d4:	08001a5f 	.word	0x08001a5f
 80019d8:	08001a5f 	.word	0x08001a5f
 80019dc:	08001a5f 	.word	0x08001a5f
 80019e0:	08001a5f 	.word	0x08001a5f
 80019e4:	08001a5f 	.word	0x08001a5f
 80019e8:	08001a5f 	.word	0x08001a5f
 80019ec:	08001a5f 	.word	0x08001a5f
 80019f0:	08001a5f 	.word	0x08001a5f
 80019f4:	08001a0d 	.word	0x08001a0d
 80019f8:	08001a21 	.word	0x08001a21
 80019fc:	4a79      	ldr	r2, [pc, #484]	; (8001be4 <HAL_GPIO_Init+0x2b4>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d013      	beq.n	8001a2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a02:	e02c      	b.n	8001a5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	623b      	str	r3, [r7, #32]
          break;
 8001a0a:	e029      	b.n	8001a60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	3304      	adds	r3, #4
 8001a12:	623b      	str	r3, [r7, #32]
          break;
 8001a14:	e024      	b.n	8001a60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	3308      	adds	r3, #8
 8001a1c:	623b      	str	r3, [r7, #32]
          break;
 8001a1e:	e01f      	b.n	8001a60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	330c      	adds	r3, #12
 8001a26:	623b      	str	r3, [r7, #32]
          break;
 8001a28:	e01a      	b.n	8001a60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d102      	bne.n	8001a38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a32:	2304      	movs	r3, #4
 8001a34:	623b      	str	r3, [r7, #32]
          break;
 8001a36:	e013      	b.n	8001a60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d105      	bne.n	8001a4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a40:	2308      	movs	r3, #8
 8001a42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69fa      	ldr	r2, [r7, #28]
 8001a48:	611a      	str	r2, [r3, #16]
          break;
 8001a4a:	e009      	b.n	8001a60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a4c:	2308      	movs	r3, #8
 8001a4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69fa      	ldr	r2, [r7, #28]
 8001a54:	615a      	str	r2, [r3, #20]
          break;
 8001a56:	e003      	b.n	8001a60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	623b      	str	r3, [r7, #32]
          break;
 8001a5c:	e000      	b.n	8001a60 <HAL_GPIO_Init+0x130>
          break;
 8001a5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	2bff      	cmp	r3, #255	; 0xff
 8001a64:	d801      	bhi.n	8001a6a <HAL_GPIO_Init+0x13a>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	e001      	b.n	8001a6e <HAL_GPIO_Init+0x13e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	2bff      	cmp	r3, #255	; 0xff
 8001a74:	d802      	bhi.n	8001a7c <HAL_GPIO_Init+0x14c>
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	e002      	b.n	8001a82 <HAL_GPIO_Init+0x152>
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	3b08      	subs	r3, #8
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	210f      	movs	r1, #15
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	401a      	ands	r2, r3
 8001a94:	6a39      	ldr	r1, [r7, #32]
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 80b1 	beq.w	8001c12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ab0:	4b4d      	ldr	r3, [pc, #308]	; (8001be8 <HAL_GPIO_Init+0x2b8>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	4a4c      	ldr	r2, [pc, #304]	; (8001be8 <HAL_GPIO_Init+0x2b8>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	6193      	str	r3, [r2, #24]
 8001abc:	4b4a      	ldr	r3, [pc, #296]	; (8001be8 <HAL_GPIO_Init+0x2b8>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ac8:	4a48      	ldr	r2, [pc, #288]	; (8001bec <HAL_GPIO_Init+0x2bc>)
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	089b      	lsrs	r3, r3, #2
 8001ace:	3302      	adds	r3, #2
 8001ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	220f      	movs	r2, #15
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a40      	ldr	r2, [pc, #256]	; (8001bf0 <HAL_GPIO_Init+0x2c0>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d013      	beq.n	8001b1c <HAL_GPIO_Init+0x1ec>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a3f      	ldr	r2, [pc, #252]	; (8001bf4 <HAL_GPIO_Init+0x2c4>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d00d      	beq.n	8001b18 <HAL_GPIO_Init+0x1e8>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a3e      	ldr	r2, [pc, #248]	; (8001bf8 <HAL_GPIO_Init+0x2c8>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d007      	beq.n	8001b14 <HAL_GPIO_Init+0x1e4>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a3d      	ldr	r2, [pc, #244]	; (8001bfc <HAL_GPIO_Init+0x2cc>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d101      	bne.n	8001b10 <HAL_GPIO_Init+0x1e0>
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e006      	b.n	8001b1e <HAL_GPIO_Init+0x1ee>
 8001b10:	2304      	movs	r3, #4
 8001b12:	e004      	b.n	8001b1e <HAL_GPIO_Init+0x1ee>
 8001b14:	2302      	movs	r3, #2
 8001b16:	e002      	b.n	8001b1e <HAL_GPIO_Init+0x1ee>
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e000      	b.n	8001b1e <HAL_GPIO_Init+0x1ee>
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b20:	f002 0203 	and.w	r2, r2, #3
 8001b24:	0092      	lsls	r2, r2, #2
 8001b26:	4093      	lsls	r3, r2
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b2e:	492f      	ldr	r1, [pc, #188]	; (8001bec <HAL_GPIO_Init+0x2bc>)
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	089b      	lsrs	r3, r3, #2
 8001b34:	3302      	adds	r3, #2
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d006      	beq.n	8001b56 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b48:	4b2d      	ldr	r3, [pc, #180]	; (8001c00 <HAL_GPIO_Init+0x2d0>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	492c      	ldr	r1, [pc, #176]	; (8001c00 <HAL_GPIO_Init+0x2d0>)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	600b      	str	r3, [r1, #0]
 8001b54:	e006      	b.n	8001b64 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b56:	4b2a      	ldr	r3, [pc, #168]	; (8001c00 <HAL_GPIO_Init+0x2d0>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	4928      	ldr	r1, [pc, #160]	; (8001c00 <HAL_GPIO_Init+0x2d0>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d006      	beq.n	8001b7e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b70:	4b23      	ldr	r3, [pc, #140]	; (8001c00 <HAL_GPIO_Init+0x2d0>)
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	4922      	ldr	r1, [pc, #136]	; (8001c00 <HAL_GPIO_Init+0x2d0>)
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	604b      	str	r3, [r1, #4]
 8001b7c:	e006      	b.n	8001b8c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b7e:	4b20      	ldr	r3, [pc, #128]	; (8001c00 <HAL_GPIO_Init+0x2d0>)
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	491e      	ldr	r1, [pc, #120]	; (8001c00 <HAL_GPIO_Init+0x2d0>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d006      	beq.n	8001ba6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b98:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <HAL_GPIO_Init+0x2d0>)
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	4918      	ldr	r1, [pc, #96]	; (8001c00 <HAL_GPIO_Init+0x2d0>)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	608b      	str	r3, [r1, #8]
 8001ba4:	e006      	b.n	8001bb4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ba6:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <HAL_GPIO_Init+0x2d0>)
 8001ba8:	689a      	ldr	r2, [r3, #8]
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	4914      	ldr	r1, [pc, #80]	; (8001c00 <HAL_GPIO_Init+0x2d0>)
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d021      	beq.n	8001c04 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <HAL_GPIO_Init+0x2d0>)
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	490e      	ldr	r1, [pc, #56]	; (8001c00 <HAL_GPIO_Init+0x2d0>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	60cb      	str	r3, [r1, #12]
 8001bcc:	e021      	b.n	8001c12 <HAL_GPIO_Init+0x2e2>
 8001bce:	bf00      	nop
 8001bd0:	10320000 	.word	0x10320000
 8001bd4:	10310000 	.word	0x10310000
 8001bd8:	10220000 	.word	0x10220000
 8001bdc:	10210000 	.word	0x10210000
 8001be0:	10120000 	.word	0x10120000
 8001be4:	10110000 	.word	0x10110000
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40010000 	.word	0x40010000
 8001bf0:	40010800 	.word	0x40010800
 8001bf4:	40010c00 	.word	0x40010c00
 8001bf8:	40011000 	.word	0x40011000
 8001bfc:	40011400 	.word	0x40011400
 8001c00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c04:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <HAL_GPIO_Init+0x304>)
 8001c06:	68da      	ldr	r2, [r3, #12]
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	4909      	ldr	r1, [pc, #36]	; (8001c34 <HAL_GPIO_Init+0x304>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	3301      	adds	r3, #1
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f47f ae8e 	bne.w	8001944 <HAL_GPIO_Init+0x14>
  }
}
 8001c28:	bf00      	nop
 8001c2a:	bf00      	nop
 8001c2c:	372c      	adds	r7, #44	; 0x2c
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr
 8001c34:	40010400 	.word	0x40010400

08001c38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	887b      	ldrh	r3, [r7, #2]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d002      	beq.n	8001c56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c50:	2301      	movs	r3, #1
 8001c52:	73fb      	strb	r3, [r7, #15]
 8001c54:	e001      	b.n	8001c5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c56:	2300      	movs	r3, #0
 8001c58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr

08001c66 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	807b      	strh	r3, [r7, #2]
 8001c72:	4613      	mov	r3, r2
 8001c74:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c76:	787b      	ldrb	r3, [r7, #1]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c7c:	887a      	ldrh	r2, [r7, #2]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c82:	e003      	b.n	8001c8c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c84:	887b      	ldrh	r3, [r7, #2]
 8001c86:	041a      	lsls	r2, r3, #16
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	611a      	str	r2, [r3, #16]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr
	...

08001c98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e272      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 8087 	beq.w	8001dc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cb8:	4b92      	ldr	r3, [pc, #584]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 030c 	and.w	r3, r3, #12
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d00c      	beq.n	8001cde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cc4:	4b8f      	ldr	r3, [pc, #572]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 030c 	and.w	r3, r3, #12
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d112      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x5e>
 8001cd0:	4b8c      	ldr	r3, [pc, #560]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cdc:	d10b      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cde:	4b89      	ldr	r3, [pc, #548]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d06c      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x12c>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d168      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e24c      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cfe:	d106      	bne.n	8001d0e <HAL_RCC_OscConfig+0x76>
 8001d00:	4b80      	ldr	r3, [pc, #512]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a7f      	ldr	r2, [pc, #508]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	e02e      	b.n	8001d6c <HAL_RCC_OscConfig+0xd4>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10c      	bne.n	8001d30 <HAL_RCC_OscConfig+0x98>
 8001d16:	4b7b      	ldr	r3, [pc, #492]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a7a      	ldr	r2, [pc, #488]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	4b78      	ldr	r3, [pc, #480]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a77      	ldr	r2, [pc, #476]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	e01d      	b.n	8001d6c <HAL_RCC_OscConfig+0xd4>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d38:	d10c      	bne.n	8001d54 <HAL_RCC_OscConfig+0xbc>
 8001d3a:	4b72      	ldr	r3, [pc, #456]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a71      	ldr	r2, [pc, #452]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	4b6f      	ldr	r3, [pc, #444]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a6e      	ldr	r2, [pc, #440]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	e00b      	b.n	8001d6c <HAL_RCC_OscConfig+0xd4>
 8001d54:	4b6b      	ldr	r3, [pc, #428]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a6a      	ldr	r2, [pc, #424]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d5e:	6013      	str	r3, [r2, #0]
 8001d60:	4b68      	ldr	r3, [pc, #416]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a67      	ldr	r2, [pc, #412]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d013      	beq.n	8001d9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d74:	f7ff fcca 	bl	800170c <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d7c:	f7ff fcc6 	bl	800170c <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b64      	cmp	r3, #100	; 0x64
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e200      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8e:	4b5d      	ldr	r3, [pc, #372]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0f0      	beq.n	8001d7c <HAL_RCC_OscConfig+0xe4>
 8001d9a:	e014      	b.n	8001dc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9c:	f7ff fcb6 	bl	800170c <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da4:	f7ff fcb2 	bl	800170c <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b64      	cmp	r3, #100	; 0x64
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e1ec      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db6:	4b53      	ldr	r3, [pc, #332]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x10c>
 8001dc2:	e000      	b.n	8001dc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d063      	beq.n	8001e9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dd2:	4b4c      	ldr	r3, [pc, #304]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 030c 	and.w	r3, r3, #12
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00b      	beq.n	8001df6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dde:	4b49      	ldr	r3, [pc, #292]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 030c 	and.w	r3, r3, #12
 8001de6:	2b08      	cmp	r3, #8
 8001de8:	d11c      	bne.n	8001e24 <HAL_RCC_OscConfig+0x18c>
 8001dea:	4b46      	ldr	r3, [pc, #280]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d116      	bne.n	8001e24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001df6:	4b43      	ldr	r3, [pc, #268]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d005      	beq.n	8001e0e <HAL_RCC_OscConfig+0x176>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d001      	beq.n	8001e0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e1c0      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0e:	4b3d      	ldr	r3, [pc, #244]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4939      	ldr	r1, [pc, #228]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e22:	e03a      	b.n	8001e9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d020      	beq.n	8001e6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e2c:	4b36      	ldr	r3, [pc, #216]	; (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e32:	f7ff fc6b 	bl	800170c <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e3a:	f7ff fc67 	bl	800170c <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e1a1      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e4c:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0f0      	beq.n	8001e3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e58:	4b2a      	ldr	r3, [pc, #168]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	4927      	ldr	r1, [pc, #156]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	600b      	str	r3, [r1, #0]
 8001e6c:	e015      	b.n	8001e9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e6e:	4b26      	ldr	r3, [pc, #152]	; (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e74:	f7ff fc4a 	bl	800170c <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e7c:	f7ff fc46 	bl	800170c <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e180      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e8e:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d03a      	beq.n	8001f1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d019      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eae:	4b17      	ldr	r3, [pc, #92]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb4:	f7ff fc2a 	bl	800170c <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ebc:	f7ff fc26 	bl	800170c <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e160      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ece:	4b0d      	ldr	r3, [pc, #52]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0f0      	beq.n	8001ebc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eda:	2001      	movs	r0, #1
 8001edc:	f000 faa6 	bl	800242c <RCC_Delay>
 8001ee0:	e01c      	b.n	8001f1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee8:	f7ff fc10 	bl	800170c <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eee:	e00f      	b.n	8001f10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef0:	f7ff fc0c 	bl	800170c <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d908      	bls.n	8001f10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e146      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
 8001f02:	bf00      	nop
 8001f04:	40021000 	.word	0x40021000
 8001f08:	42420000 	.word	0x42420000
 8001f0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f10:	4b92      	ldr	r3, [pc, #584]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1e9      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 80a6 	beq.w	8002076 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f2e:	4b8b      	ldr	r3, [pc, #556]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10d      	bne.n	8001f56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f3a:	4b88      	ldr	r3, [pc, #544]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	4a87      	ldr	r2, [pc, #540]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f44:	61d3      	str	r3, [r2, #28]
 8001f46:	4b85      	ldr	r3, [pc, #532]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f52:	2301      	movs	r3, #1
 8001f54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f56:	4b82      	ldr	r3, [pc, #520]	; (8002160 <HAL_RCC_OscConfig+0x4c8>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d118      	bne.n	8001f94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f62:	4b7f      	ldr	r3, [pc, #508]	; (8002160 <HAL_RCC_OscConfig+0x4c8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a7e      	ldr	r2, [pc, #504]	; (8002160 <HAL_RCC_OscConfig+0x4c8>)
 8001f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f6e:	f7ff fbcd 	bl	800170c <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f76:	f7ff fbc9 	bl	800170c <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b64      	cmp	r3, #100	; 0x64
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e103      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f88:	4b75      	ldr	r3, [pc, #468]	; (8002160 <HAL_RCC_OscConfig+0x4c8>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0f0      	beq.n	8001f76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d106      	bne.n	8001faa <HAL_RCC_OscConfig+0x312>
 8001f9c:	4b6f      	ldr	r3, [pc, #444]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	4a6e      	ldr	r2, [pc, #440]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	6213      	str	r3, [r2, #32]
 8001fa8:	e02d      	b.n	8002006 <HAL_RCC_OscConfig+0x36e>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10c      	bne.n	8001fcc <HAL_RCC_OscConfig+0x334>
 8001fb2:	4b6a      	ldr	r3, [pc, #424]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	4a69      	ldr	r2, [pc, #420]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001fb8:	f023 0301 	bic.w	r3, r3, #1
 8001fbc:	6213      	str	r3, [r2, #32]
 8001fbe:	4b67      	ldr	r3, [pc, #412]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	4a66      	ldr	r2, [pc, #408]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001fc4:	f023 0304 	bic.w	r3, r3, #4
 8001fc8:	6213      	str	r3, [r2, #32]
 8001fca:	e01c      	b.n	8002006 <HAL_RCC_OscConfig+0x36e>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	2b05      	cmp	r3, #5
 8001fd2:	d10c      	bne.n	8001fee <HAL_RCC_OscConfig+0x356>
 8001fd4:	4b61      	ldr	r3, [pc, #388]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	4a60      	ldr	r2, [pc, #384]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001fda:	f043 0304 	orr.w	r3, r3, #4
 8001fde:	6213      	str	r3, [r2, #32]
 8001fe0:	4b5e      	ldr	r3, [pc, #376]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	4a5d      	ldr	r2, [pc, #372]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	6213      	str	r3, [r2, #32]
 8001fec:	e00b      	b.n	8002006 <HAL_RCC_OscConfig+0x36e>
 8001fee:	4b5b      	ldr	r3, [pc, #364]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	4a5a      	ldr	r2, [pc, #360]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001ff4:	f023 0301 	bic.w	r3, r3, #1
 8001ff8:	6213      	str	r3, [r2, #32]
 8001ffa:	4b58      	ldr	r3, [pc, #352]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	4a57      	ldr	r2, [pc, #348]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8002000:	f023 0304 	bic.w	r3, r3, #4
 8002004:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d015      	beq.n	800203a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200e:	f7ff fb7d 	bl	800170c <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002014:	e00a      	b.n	800202c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002016:	f7ff fb79 	bl	800170c <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	f241 3288 	movw	r2, #5000	; 0x1388
 8002024:	4293      	cmp	r3, r2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e0b1      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202c:	4b4b      	ldr	r3, [pc, #300]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0ee      	beq.n	8002016 <HAL_RCC_OscConfig+0x37e>
 8002038:	e014      	b.n	8002064 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203a:	f7ff fb67 	bl	800170c <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002040:	e00a      	b.n	8002058 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002042:	f7ff fb63 	bl	800170c <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002050:	4293      	cmp	r3, r2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e09b      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002058:	4b40      	ldr	r3, [pc, #256]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1ee      	bne.n	8002042 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002064:	7dfb      	ldrb	r3, [r7, #23]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d105      	bne.n	8002076 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800206a:	4b3c      	ldr	r3, [pc, #240]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	4a3b      	ldr	r2, [pc, #236]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8002070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002074:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 8087 	beq.w	800218e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002080:	4b36      	ldr	r3, [pc, #216]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 030c 	and.w	r3, r3, #12
 8002088:	2b08      	cmp	r3, #8
 800208a:	d061      	beq.n	8002150 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	2b02      	cmp	r3, #2
 8002092:	d146      	bne.n	8002122 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002094:	4b33      	ldr	r3, [pc, #204]	; (8002164 <HAL_RCC_OscConfig+0x4cc>)
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209a:	f7ff fb37 	bl	800170c <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a2:	f7ff fb33 	bl	800170c <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e06d      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b4:	4b29      	ldr	r3, [pc, #164]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1f0      	bne.n	80020a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c8:	d108      	bne.n	80020dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020ca:	4b24      	ldr	r3, [pc, #144]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	4921      	ldr	r1, [pc, #132]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020dc:	4b1f      	ldr	r3, [pc, #124]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a19      	ldr	r1, [r3, #32]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	430b      	orrs	r3, r1
 80020ee:	491b      	ldr	r1, [pc, #108]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020f4:	4b1b      	ldr	r3, [pc, #108]	; (8002164 <HAL_RCC_OscConfig+0x4cc>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fa:	f7ff fb07 	bl	800170c <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002102:	f7ff fb03 	bl	800170c <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e03d      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0f0      	beq.n	8002102 <HAL_RCC_OscConfig+0x46a>
 8002120:	e035      	b.n	800218e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002122:	4b10      	ldr	r3, [pc, #64]	; (8002164 <HAL_RCC_OscConfig+0x4cc>)
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002128:	f7ff faf0 	bl	800170c <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002130:	f7ff faec 	bl	800170c <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e026      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002142:	4b06      	ldr	r3, [pc, #24]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1f0      	bne.n	8002130 <HAL_RCC_OscConfig+0x498>
 800214e:	e01e      	b.n	800218e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d107      	bne.n	8002168 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e019      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
 800215c:	40021000 	.word	0x40021000
 8002160:	40007000 	.word	0x40007000
 8002164:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_RCC_OscConfig+0x500>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	429a      	cmp	r2, r3
 800217a:	d106      	bne.n	800218a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002186:	429a      	cmp	r2, r3
 8002188:	d001      	beq.n	800218e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40021000 	.word	0x40021000

0800219c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0d0      	b.n	8002352 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021b0:	4b6a      	ldr	r3, [pc, #424]	; (800235c <HAL_RCC_ClockConfig+0x1c0>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d910      	bls.n	80021e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021be:	4b67      	ldr	r3, [pc, #412]	; (800235c <HAL_RCC_ClockConfig+0x1c0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f023 0207 	bic.w	r2, r3, #7
 80021c6:	4965      	ldr	r1, [pc, #404]	; (800235c <HAL_RCC_ClockConfig+0x1c0>)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ce:	4b63      	ldr	r3, [pc, #396]	; (800235c <HAL_RCC_ClockConfig+0x1c0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d001      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0b8      	b.n	8002352 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d020      	beq.n	800222e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021f8:	4b59      	ldr	r3, [pc, #356]	; (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4a58      	ldr	r2, [pc, #352]	; (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002202:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0308 	and.w	r3, r3, #8
 800220c:	2b00      	cmp	r3, #0
 800220e:	d005      	beq.n	800221c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002210:	4b53      	ldr	r3, [pc, #332]	; (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	4a52      	ldr	r2, [pc, #328]	; (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 8002216:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800221a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800221c:	4b50      	ldr	r3, [pc, #320]	; (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	494d      	ldr	r1, [pc, #308]	; (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	4313      	orrs	r3, r2
 800222c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d040      	beq.n	80022bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d107      	bne.n	8002252 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002242:	4b47      	ldr	r3, [pc, #284]	; (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d115      	bne.n	800227a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e07f      	b.n	8002352 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b02      	cmp	r3, #2
 8002258:	d107      	bne.n	800226a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800225a:	4b41      	ldr	r3, [pc, #260]	; (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d109      	bne.n	800227a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e073      	b.n	8002352 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226a:	4b3d      	ldr	r3, [pc, #244]	; (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e06b      	b.n	8002352 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800227a:	4b39      	ldr	r3, [pc, #228]	; (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f023 0203 	bic.w	r2, r3, #3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	4936      	ldr	r1, [pc, #216]	; (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 8002288:	4313      	orrs	r3, r2
 800228a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800228c:	f7ff fa3e 	bl	800170c <HAL_GetTick>
 8002290:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002292:	e00a      	b.n	80022aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002294:	f7ff fa3a 	bl	800170c <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e053      	b.n	8002352 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022aa:	4b2d      	ldr	r3, [pc, #180]	; (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 020c 	and.w	r2, r3, #12
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d1eb      	bne.n	8002294 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022bc:	4b27      	ldr	r3, [pc, #156]	; (800235c <HAL_RCC_ClockConfig+0x1c0>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d210      	bcs.n	80022ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ca:	4b24      	ldr	r3, [pc, #144]	; (800235c <HAL_RCC_ClockConfig+0x1c0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f023 0207 	bic.w	r2, r3, #7
 80022d2:	4922      	ldr	r1, [pc, #136]	; (800235c <HAL_RCC_ClockConfig+0x1c0>)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022da:	4b20      	ldr	r3, [pc, #128]	; (800235c <HAL_RCC_ClockConfig+0x1c0>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d001      	beq.n	80022ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e032      	b.n	8002352 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d008      	beq.n	800230a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022f8:	4b19      	ldr	r3, [pc, #100]	; (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	4916      	ldr	r1, [pc, #88]	; (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 8002306:	4313      	orrs	r3, r2
 8002308:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	2b00      	cmp	r3, #0
 8002314:	d009      	beq.n	800232a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002316:	4b12      	ldr	r3, [pc, #72]	; (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	490e      	ldr	r1, [pc, #56]	; (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 8002326:	4313      	orrs	r3, r2
 8002328:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800232a:	f000 f821 	bl	8002370 <HAL_RCC_GetSysClockFreq>
 800232e:	4602      	mov	r2, r0
 8002330:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	091b      	lsrs	r3, r3, #4
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	490a      	ldr	r1, [pc, #40]	; (8002364 <HAL_RCC_ClockConfig+0x1c8>)
 800233c:	5ccb      	ldrb	r3, [r1, r3]
 800233e:	fa22 f303 	lsr.w	r3, r2, r3
 8002342:	4a09      	ldr	r2, [pc, #36]	; (8002368 <HAL_RCC_ClockConfig+0x1cc>)
 8002344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002346:	4b09      	ldr	r3, [pc, #36]	; (800236c <HAL_RCC_ClockConfig+0x1d0>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff f99c 	bl	8001688 <HAL_InitTick>

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40022000 	.word	0x40022000
 8002360:	40021000 	.word	0x40021000
 8002364:	080024e8 	.word	0x080024e8
 8002368:	20000000 	.word	0x20000000
 800236c:	20000004 	.word	0x20000004

08002370 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002370:	b490      	push	{r4, r7}
 8002372:	b08a      	sub	sp, #40	; 0x28
 8002374:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002376:	4b29      	ldr	r3, [pc, #164]	; (800241c <HAL_RCC_GetSysClockFreq+0xac>)
 8002378:	1d3c      	adds	r4, r7, #4
 800237a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800237c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002380:	f240 2301 	movw	r3, #513	; 0x201
 8002384:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002386:	2300      	movs	r3, #0
 8002388:	61fb      	str	r3, [r7, #28]
 800238a:	2300      	movs	r3, #0
 800238c:	61bb      	str	r3, [r7, #24]
 800238e:	2300      	movs	r3, #0
 8002390:	627b      	str	r3, [r7, #36]	; 0x24
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002396:	2300      	movs	r3, #0
 8002398:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800239a:	4b21      	ldr	r3, [pc, #132]	; (8002420 <HAL_RCC_GetSysClockFreq+0xb0>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d002      	beq.n	80023b0 <HAL_RCC_GetSysClockFreq+0x40>
 80023aa:	2b08      	cmp	r3, #8
 80023ac:	d003      	beq.n	80023b6 <HAL_RCC_GetSysClockFreq+0x46>
 80023ae:	e02b      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023b0:	4b1c      	ldr	r3, [pc, #112]	; (8002424 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023b2:	623b      	str	r3, [r7, #32]
      break;
 80023b4:	e02b      	b.n	800240e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	0c9b      	lsrs	r3, r3, #18
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	3328      	adds	r3, #40	; 0x28
 80023c0:	443b      	add	r3, r7
 80023c2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023c6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d012      	beq.n	80023f8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023d2:	4b13      	ldr	r3, [pc, #76]	; (8002420 <HAL_RCC_GetSysClockFreq+0xb0>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	0c5b      	lsrs	r3, r3, #17
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	3328      	adds	r3, #40	; 0x28
 80023de:	443b      	add	r3, r7
 80023e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	4a0e      	ldr	r2, [pc, #56]	; (8002424 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023ea:	fb03 f202 	mul.w	r2, r3, r2
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
 80023f6:	e004      	b.n	8002402 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	4a0b      	ldr	r2, [pc, #44]	; (8002428 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023fc:	fb02 f303 	mul.w	r3, r2, r3
 8002400:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	623b      	str	r3, [r7, #32]
      break;
 8002406:	e002      	b.n	800240e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002408:	4b06      	ldr	r3, [pc, #24]	; (8002424 <HAL_RCC_GetSysClockFreq+0xb4>)
 800240a:	623b      	str	r3, [r7, #32]
      break;
 800240c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800240e:	6a3b      	ldr	r3, [r7, #32]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3728      	adds	r7, #40	; 0x28
 8002414:	46bd      	mov	sp, r7
 8002416:	bc90      	pop	{r4, r7}
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	080024d8 	.word	0x080024d8
 8002420:	40021000 	.word	0x40021000
 8002424:	007a1200 	.word	0x007a1200
 8002428:	003d0900 	.word	0x003d0900

0800242c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002434:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <RCC_Delay+0x34>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <RCC_Delay+0x38>)
 800243a:	fba2 2303 	umull	r2, r3, r2, r3
 800243e:	0a5b      	lsrs	r3, r3, #9
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	fb02 f303 	mul.w	r3, r2, r3
 8002446:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002448:	bf00      	nop
  }
  while (Delay --);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1e5a      	subs	r2, r3, #1
 800244e:	60fa      	str	r2, [r7, #12]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1f9      	bne.n	8002448 <RCC_Delay+0x1c>
}
 8002454:	bf00      	nop
 8002456:	bf00      	nop
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr
 8002460:	20000000 	.word	0x20000000
 8002464:	10624dd3 	.word	0x10624dd3

08002468 <__libc_init_array>:
 8002468:	b570      	push	{r4, r5, r6, lr}
 800246a:	2600      	movs	r6, #0
 800246c:	4d0c      	ldr	r5, [pc, #48]	; (80024a0 <__libc_init_array+0x38>)
 800246e:	4c0d      	ldr	r4, [pc, #52]	; (80024a4 <__libc_init_array+0x3c>)
 8002470:	1b64      	subs	r4, r4, r5
 8002472:	10a4      	asrs	r4, r4, #2
 8002474:	42a6      	cmp	r6, r4
 8002476:	d109      	bne.n	800248c <__libc_init_array+0x24>
 8002478:	f000 f822 	bl	80024c0 <_init>
 800247c:	2600      	movs	r6, #0
 800247e:	4d0a      	ldr	r5, [pc, #40]	; (80024a8 <__libc_init_array+0x40>)
 8002480:	4c0a      	ldr	r4, [pc, #40]	; (80024ac <__libc_init_array+0x44>)
 8002482:	1b64      	subs	r4, r4, r5
 8002484:	10a4      	asrs	r4, r4, #2
 8002486:	42a6      	cmp	r6, r4
 8002488:	d105      	bne.n	8002496 <__libc_init_array+0x2e>
 800248a:	bd70      	pop	{r4, r5, r6, pc}
 800248c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002490:	4798      	blx	r3
 8002492:	3601      	adds	r6, #1
 8002494:	e7ee      	b.n	8002474 <__libc_init_array+0xc>
 8002496:	f855 3b04 	ldr.w	r3, [r5], #4
 800249a:	4798      	blx	r3
 800249c:	3601      	adds	r6, #1
 800249e:	e7f2      	b.n	8002486 <__libc_init_array+0x1e>
 80024a0:	080024f8 	.word	0x080024f8
 80024a4:	080024f8 	.word	0x080024f8
 80024a8:	080024f8 	.word	0x080024f8
 80024ac:	080024fc 	.word	0x080024fc

080024b0 <memset>:
 80024b0:	4603      	mov	r3, r0
 80024b2:	4402      	add	r2, r0
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d100      	bne.n	80024ba <memset+0xa>
 80024b8:	4770      	bx	lr
 80024ba:	f803 1b01 	strb.w	r1, [r3], #1
 80024be:	e7f9      	b.n	80024b4 <memset+0x4>

080024c0 <_init>:
 80024c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024c2:	bf00      	nop
 80024c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024c6:	bc08      	pop	{r3}
 80024c8:	469e      	mov	lr, r3
 80024ca:	4770      	bx	lr

080024cc <_fini>:
 80024cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ce:	bf00      	nop
 80024d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024d2:	bc08      	pop	{r3}
 80024d4:	469e      	mov	lr, r3
 80024d6:	4770      	bx	lr
